{
  "address": "0xdB6679478D74Ba4BBE4c0D3089161176844C7E90",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        }
      ],
      "name": "getMaxToken1AmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pegProxy",
          "type": "address"
        }
      ],
      "name": "setPegProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapToken0ForToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapToken1ForToken0",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa31d9854708a6c46f547e60f865a1686866bdf3b68386290953860611300ef53",
  "receipt": {
    "to": null,
    "from": "0x60E76dC9B7369293B364186EcCad993dE205d228",
    "contractAddress": "0xdB6679478D74Ba4BBE4c0D3089161176844C7E90",
    "transactionIndex": 2,
    "gasUsed": "906270",
    "logsBloom": "0x
    "blockHash": "0x4dd3940c472ea5bb13e39ae7a469930dad6079126e12e509830131bbc7937f1e",
    "transactionHash": "0xa31d9854708a6c46f547e60f865a1686866bdf3b68386290953860611300ef53",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9577755,
        "transactionHash": "0xa31d9854708a6c46f547e60f865a1686866bdf3b68386290953860611300ef53",
        "address": "0xdB6679478D74Ba4BBE4c0D3089161176844C7E90",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000060e76dc9b7369293b364186eccad993de205d228"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4dd3940c472ea5bb13e39ae7a469930dad6079126e12e509830131bbc7937f1e"
      }
    ],
    "blockNumber": 9577755,
    "cumulativeGasUsed": "1115282",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "778e5295d7f36ebe714a208a2f9b9b88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"}],\"name\":\"getMaxToken1AmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegProxy\",\"type\":\"address\"}],\"name\":\"setPegProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapToken0ForToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapToken1ForToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pegbridge/PegSwap.sol\":\"PegSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/interface/IPegSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwapPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function token0() external returns (address);\\n\\n    function token1() external returns (address);\\n\\n    function swap(address to, bool direction) external; // direction: token0 -> token1 or token1 -> token0\\n\\n    function getReserves() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x1285862ea363da7f3a3eb719f17a0708aad6e203a085bf3e70e8f946d4c73941\",\"license\":\"MIT\"},\"contracts/pegbridge/PegSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interface/IPegSwapPair.sol\\\";\\n\\ncontract PegSwap is Ownable {\\n    using SafeMath for uint256;\\n\\n    address public pegProxy;\\n\\n    // origin token address => pair address\\n    // example: dai => pair(token0=dai, token1=borDAI)\\n    mapping(address => address) public pairs;\\n\\n    function setPegProxy(address _pegProxy) public onlyOwner {\\n        pegProxy = _pegProxy;\\n    }\\n\\n    function getPair(address token) public view onlySupportToken(token) returns (address) {\\n        return pairs[token];\\n    }\\n\\n    function addPair(address token, address pair) public onlyOwner {\\n        require(pairs[token] == address(0), \\\"PegSwap: token already supported\\\");\\n        pairs[token] = pair;\\n    }\\n\\n    function removePair(address token) public onlyOwner {\\n        require(pairs[token] != address(0), \\\"PegSwap: token not supported\\\");\\n        delete pairs[token];\\n    }\\n\\n    function addLiquidity(\\n        address token0,\\n        uint256 amount,\\n        address to\\n    ) public onlySupportToken(token0) returns (uint256 liquidity) {\\n        address pair = getPair(token0);\\n        IERC20(token0).transferFrom(msg.sender, pair, amount);\\n        liquidity = IPegSwapPair(pair).mint(to);\\n    }\\n\\n    function removeLiquidity(\\n        address token0,\\n        uint256 liquidity,\\n        address to\\n    ) public onlySupportToken(token0) returns (uint256 amount0, uint256 amount1) {\\n        address pair = getPair(token0);\\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity);\\n        (amount0, amount1) = IPegSwapPair(pair).burn(to);\\n    }\\n\\n    // token0 -> token1\\n    function swapToken0ForToken1(\\n        address token0,\\n        uint256 amountIn,\\n        address to\\n    ) public onlySupportToken(token0) onlyPegProxy {\\n        require(amountIn > 0, \\\"PegSwap: input must be greater than 0\\\");\\n        address pair = getPair(token0);\\n\\n        // transfer erc20 token to pair address\\n        IERC20(token0).transferFrom(msg.sender, pair, amountIn);\\n        IPegSwapPair(pair).swap(to, true);\\n    }\\n\\n    // token1 -> token0\\n    function swapToken1ForToken0(\\n        address token0,\\n        uint256 amountIn,\\n        address to\\n    ) public onlySupportToken(token0) onlyPegProxy {\\n        require(amountIn > 0, \\\"PegSwap: input must be greater than 0\\\");\\n        address pair = getPair(token0);\\n        address token1 = IPegSwapPair(pair).token1();\\n\\n        // transfer bor-erc20 token to pair address\\n        IERC20(token1).transferFrom(msg.sender, pair, amountIn);\\n        IPegSwapPair(pair).swap(to, false);\\n    }\\n\\n    function getMaxToken1AmountOut(address token0) public view returns (uint256) {\\n        address pair = getPair(token0);\\n        (, uint256 _reserve1) = IPegSwapPair(pair).getReserves();\\n\\n        return _reserve1;\\n    }\\n\\n    modifier onlySupportToken(address token) {\\n        require(pairs[token] != address(0), \\\"PegSwap: not support this token\\\");\\n        _;\\n    }\\n\\n    modifier onlyPegProxy {\\n        require(msg.sender == pegProxy, \\\"PegSwap: caller is not pegProxy\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfc826b4251b5d1566fa39dccc7c5cd7b6d32ec2d23f779d9711a7f34e6db61f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610f02806100616000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063b6f3e08711610066578063b6f3e087146101e2578063f2fde38b146101f5578063f51af11114610208578063fe33b3021461021b57600080fd5b8063715018a6146101b65780638da5cb5b146101be578063af6c9c1d146101cf57600080fd5b806347fdbc8e116100c857806347fdbc8e146101555780634869e9fa1461017d578063542e99b8146101905780635a454299146101a357600080fd5b80631a788a02146100ef5780631b8793781461011f5780632b24837614610140575b600080fd5b6101026100fd366004610ccc565b610244565b6040516001600160a01b0390911681526020015b60405180910390f35b61013261012d366004610d43565b6102a8565b604051908152602001610116565b61015361014e366004610ccc565b6103f9565b005b610168610163366004610d43565b610445565b60408051928352602083019190915201610116565b600154610102906001600160a01b031681565b61013261019e366004610ccc565b61059b565b6101536101b1366004610d43565b610624565b6101536107d1565b6000546001600160a01b0316610102565b6101536101dd366004610ccc565b610845565b6101536101f0366004610d0b565b6108fd565b610153610203366004610ccc565b6109bd565b610153610216366004610d43565b610aa7565b610102610229366004610ccc565b6002602052600090815260409020546001600160a01b031681565b6001600160a01b0380821660009081526002602052604081205490918391166102885760405162461bcd60e51b815260040161027f90610e38565b60405180910390fd5b50506001600160a01b039081166000908152600260205260409020541690565b6001600160a01b0380841660009081526002602052604081205490918591166102e35760405162461bcd60e51b815260040161027f90610e38565b60006102ee86610244565b6040516323b872dd60e01b81529091506001600160a01b038716906323b872dd9061032190339085908a90600401610ddf565b602060405180830381600087803b15801561033b57600080fd5b505af115801561034f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103739190610d84565b506040516335313c2160e11b81526001600160a01b038581166004830152821690636a62784290602401602060405180830381600087803b1580156103b757600080fd5b505af11580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190610da4565b9695505050505050565b6000546001600160a01b031633146104235760405162461bcd60e51b815260040161027f90610e03565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808416600090815260026020526040812054909182918691166104825760405162461bcd60e51b815260040161027f90610e38565b600061048d87610244565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906104c090339085908b90600401610ddf565b602060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610d84565b5060405163226bf2d160e21b81526001600160a01b0386811660048301528216906389afcb44906024016040805180830381600087803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610dbc565b909890975095505050505050565b6000806105a783610244565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610dbc565b95945050505050565b6001600160a01b0380841660009081526002602052604090205484911661065d5760405162461bcd60e51b815260040161027f90610e38565b6001546001600160a01b031633146106b75760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f787900604482015260640161027f565b600083116106d75760405162461bcd60e51b815260040161027f90610e6f565b60006106e285610244565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061071590339085908990600401610ddf565b602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610d84565b5060405163513c681b60e11b81526001600160a01b0384811660048301526001602483015282169063a278d03690604401600060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146107fb5760405162461bcd60e51b815260040161027f90610e03565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461086f5760405162461bcd60e51b815260040161027f90610e03565b6001600160a01b03818116600090815260026020526040902054166108d65760405162461bcd60e51b815260206004820152601c60248201527f506567537761703a20746f6b656e206e6f7420737570706f7274656400000000604482015260640161027f565b6001600160a01b0316600090815260026020526040902080546001600160a01b0319169055565b6000546001600160a01b031633146109275760405162461bcd60e51b815260040161027f90610e03565b6001600160a01b03828116600090815260026020526040902054161561098f5760405162461bcd60e51b815260206004820181905260248201527f506567537761703a20746f6b656e20616c726561647920737570706f72746564604482015260640161027f565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146109e75760405162461bcd60e51b815260040161027f90610e03565b6001600160a01b038116610a4c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808416600090815260026020526040902054849116610ae05760405162461bcd60e51b815260040161027f90610e38565b6001546001600160a01b03163314610b3a5760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f787900604482015260640161027f565b60008311610b5a5760405162461bcd60e51b815260040161027f90610e6f565b6000610b6585610244565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc9190610cef565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90610c0f90339086908a90600401610ddf565b602060405180830381600087803b158015610c2957600080fd5b505af1158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190610d84565b5060405163513c681b60e11b81526001600160a01b0385811660048301526000602483015283169063a278d03690604401600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b50505050505050505050565b600060208284031215610cdd578081fd5b8135610ce881610eb4565b9392505050565b600060208284031215610d00578081fd5b8151610ce881610eb4565b60008060408385031215610d1d578081fd5b8235610d2881610eb4565b91506020830135610d3881610eb4565b809150509250929050565b600080600060608486031215610d57578081fd5b8335610d6281610eb4565b9250602084013591506040840135610d7981610eb4565b809150509250925092565b600060208284031215610d95578081fd5b81518015158114610ce8578182fd5b600060208284031215610db5578081fd5b5051919050565b60008060408385031215610dce578182fd5b505080516020909101519092909150565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f506567537761703a206e6f7420737570706f7274207468697320746f6b656e00604082015260600190565b60208082526025908201527f506567537761703a20696e707574206d75737420626520677265617465722074604082015264068616e20360dc1b606082015260800190565b6001600160a01b0381168114610ec957600080fd5b5056fea264697066735822122038120234d9539461878e6ce5fea9a81d95889ee67318257cef07df174309397c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063b6f3e08711610066578063b6f3e087146101e2578063f2fde38b146101f5578063f51af11114610208578063fe33b3021461021b57600080fd5b8063715018a6146101b65780638da5cb5b146101be578063af6c9c1d146101cf57600080fd5b806347fdbc8e116100c857806347fdbc8e146101555780634869e9fa1461017d578063542e99b8146101905780635a454299146101a357600080fd5b80631a788a02146100ef5780631b8793781461011f5780632b24837614610140575b600080fd5b6101026100fd366004610ccc565b610244565b6040516001600160a01b0390911681526020015b60405180910390f35b61013261012d366004610d43565b6102a8565b604051908152602001610116565b61015361014e366004610ccc565b6103f9565b005b610168610163366004610d43565b610445565b60408051928352602083019190915201610116565b600154610102906001600160a01b031681565b61013261019e366004610ccc565b61059b565b6101536101b1366004610d43565b610624565b6101536107d1565b6000546001600160a01b0316610102565b6101536101dd366004610ccc565b610845565b6101536101f0366004610d0b565b6108fd565b610153610203366004610ccc565b6109bd565b610153610216366004610d43565b610aa7565b610102610229366004610ccc565b6002602052600090815260409020546001600160a01b031681565b6001600160a01b0380821660009081526002602052604081205490918391166102885760405162461bcd60e51b815260040161027f90610e38565b60405180910390fd5b50506001600160a01b039081166000908152600260205260409020541690565b6001600160a01b0380841660009081526002602052604081205490918591166102e35760405162461bcd60e51b815260040161027f90610e38565b60006102ee86610244565b6040516323b872dd60e01b81529091506001600160a01b038716906323b872dd9061032190339085908a90600401610ddf565b602060405180830381600087803b15801561033b57600080fd5b505af115801561034f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103739190610d84565b506040516335313c2160e11b81526001600160a01b038581166004830152821690636a62784290602401602060405180830381600087803b1580156103b757600080fd5b505af11580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190610da4565b9695505050505050565b6000546001600160a01b031633146104235760405162461bcd60e51b815260040161027f90610e03565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808416600090815260026020526040812054909182918691166104825760405162461bcd60e51b815260040161027f90610e38565b600061048d87610244565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906104c090339085908b90600401610ddf565b602060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190610d84565b5060405163226bf2d160e21b81526001600160a01b0386811660048301528216906389afcb44906024016040805180830381600087803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610dbc565b909890975095505050505050565b6000806105a783610244565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610dbc565b95945050505050565b6001600160a01b0380841660009081526002602052604090205484911661065d5760405162461bcd60e51b815260040161027f90610e38565b6001546001600160a01b031633146106b75760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f787900604482015260640161027f565b600083116106d75760405162461bcd60e51b815260040161027f90610e6f565b60006106e285610244565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd9061071590339085908990600401610ddf565b602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610d84565b5060405163513c681b60e11b81526001600160a01b0384811660048301526001602483015282169063a278d03690604401600060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146107fb5760405162461bcd60e51b815260040161027f90610e03565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461086f5760405162461bcd60e51b815260040161027f90610e03565b6001600160a01b03818116600090815260026020526040902054166108d65760405162461bcd60e51b815260206004820152601c60248201527f506567537761703a20746f6b656e206e6f7420737570706f7274656400000000604482015260640161027f565b6001600160a01b0316600090815260026020526040902080546001600160a01b0319169055565b6000546001600160a01b031633146109275760405162461bcd60e51b815260040161027f90610e03565b6001600160a01b03828116600090815260026020526040902054161561098f5760405162461bcd60e51b815260206004820181905260248201527f506567537761703a20746f6b656e20616c726561647920737570706f72746564604482015260640161027f565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031633146109e75760405162461bcd60e51b815260040161027f90610e03565b6001600160a01b038116610a4c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808416600090815260026020526040902054849116610ae05760405162461bcd60e51b815260040161027f90610e38565b6001546001600160a01b03163314610b3a5760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f787900604482015260640161027f565b60008311610b5a5760405162461bcd60e51b815260040161027f90610e6f565b6000610b6585610244565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc9190610cef565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90610c0f90339086908a90600401610ddf565b602060405180830381600087803b158015610c2957600080fd5b505af1158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190610d84565b5060405163513c681b60e11b81526001600160a01b0385811660048301526000602483015283169063a278d03690604401600060405180830381600087803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b50505050505050505050565b600060208284031215610cdd578081fd5b8135610ce881610eb4565b9392505050565b600060208284031215610d00578081fd5b8151610ce881610eb4565b60008060408385031215610d1d578081fd5b8235610d2881610eb4565b91506020830135610d3881610eb4565b809150509250929050565b600080600060608486031215610d57578081fd5b8335610d6281610eb4565b9250602084013591506040840135610d7981610eb4565b809150509250925092565b600060208284031215610d95578081fd5b81518015158114610ce8578182fd5b600060208284031215610db5578081fd5b5051919050565b60008060408385031215610dce578182fd5b505080516020909101519092909150565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f506567537761703a206e6f7420737570706f7274207468697320746f6b656e00604082015260600190565b60208082526025908201527f506567537761703a20696e707574206d75737420626520677265617465722074604082015264068616e20360dc1b606082015260800190565b6001600160a01b0381168114610ec957600080fd5b5056fea264697066735822122038120234d9539461878e6ce5fea9a81d95889ee67318257cef07df174309397c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2760,
        "contract": "contracts/pegbridge/PegSwap.sol:PegSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7979,
        "contract": "contracts/pegbridge/PegSwap.sol:PegSwap",
        "label": "pegProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7983,
        "contract": "contracts/pegbridge/PegSwap.sol:PegSwap",
        "label": "pairs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}