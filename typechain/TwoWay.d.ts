/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TwoWayInterface extends ethers.utils.Interface {
  functions: {
    "CROSSER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addFeeTo(address,uint256,address)": FunctionFragment;
    "addSupportToken(address,address,uint256)": FunctionFragment;
    "addSupportTokens(address[],address[],uint256[])": FunctionFragment;
    "burnBoringToken(address,address,uint256,address,uint256)": FunctionFragment;
    "calculateFee(address,uint256,uint256)": FunctionFragment;
    "crossIn(address,uint256,address,address,uint256,string)": FunctionFragment;
    "crossOut(address,uint256,address,uint256)": FunctionFragment;
    "feeToLength(address,uint256)": FunctionFragment;
    "getFeeTo(address,uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "pegSwap()": FunctionFragment;
    "removeFeeTo(address,uint256,address)": FunctionFragment;
    "removeSupportToken(address,uint256)": FunctionFragment;
    "removeSupportTokens(address[],uint256[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rollback(address,uint256,address,uint256,string)": FunctionFragment;
    "setFee(address,uint256,uint256,uint256)": FunctionFragment;
    "setPegSwap(address)": FunctionFragment;
    "setThreshold(address,uint256)": FunctionFragment;
    "supportToken(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "threshold(address)": FunctionFragment;
    "txMinted(string)": FunctionFragment;
    "txRollbacked(string)": FunctionFragment;
    "txUnlocked(string)": FunctionFragment;
    "unlock(address,uint256,address,address,uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CROSSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportTokens",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBoringToken",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossIn",
    values: [string, BigNumberish, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "crossOut",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeToLength",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "pegSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFeeTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rollback",
    values: [string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPegSwap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values: [string]): string;
  encodeFunctionData(functionFragment: "txMinted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "txRollbacked",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "txUnlocked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, BigNumberish, string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CROSSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnBoringToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crossIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crossOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPegSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "txMinted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "txRollbacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txUnlocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "CrossBurn(address,address,uint256,uint256,address,address,uint256)": EventFragment;
    "FeeChange(address,uint256,uint256,uint256)": EventFragment;
    "FeeToAdded(address,uint256,address)": EventFragment;
    "FeeToRemoved(address,uint256,address)": EventFragment;
    "Lock(address,address,uint256,uint256,address,address,uint256)": EventFragment;
    "ProposalVoted(address,address,address,uint256,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Rollback(address,address,uint256,uint256,address,address,uint256,string)": EventFragment;
    "Rollbacked(address,address,uint256,string)": EventFragment;
    "ThresholdChanged(address,uint256,uint256)": EventFragment;
    "Unlock(address,address,uint256,uint256,address,address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrossBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rollback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rollbacked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
}

export class TwoWay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TwoWayInterface;

  functions: {
    CROSSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportToken(
      token0: string,
      token1: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportTokens(
      token0s: string[],
      token1s: string[],
      chainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBoringToken(
      sender: string,
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
    >;

    crossIn(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crossOut(
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len: BigNumber }>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { account: string }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pegSwap(overrides?: CallOverrides): Promise<[string]>;

    removeFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupportToken(
      token0: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupportTokens(
      token0s: string[],
      chainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollback(
      token0: string,
      chainID: BigNumberish,
      from: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      token0: string,
      chainID: BigNumberish,
      feeAmount: BigNumberish,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegSwap(
      _pegSwap: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      token: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    threshold(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    txMinted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    txRollbacked(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    txUnlocked(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    unlock(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CROSSER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addFeeTo(
    token0: string,
    chainID: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportToken(
    token0: string,
    token1: string,
    chainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportTokens(
    token0s: string[],
    token1s: string[],
    chainIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBoringToken(
    sender: string,
    token0: string,
    chainID: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFee(
    token: string,
    chainID: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
  >;

  crossIn(
    token0: string,
    chainID: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    txid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crossOut(
    token0: string,
    chainID: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeToLength(
    token: string,
    chainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeTo(
    token: string,
    chainID: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pegSwap(overrides?: CallOverrides): Promise<string>;

  removeFeeTo(
    token0: string,
    chainID: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupportToken(
    token0: string,
    chainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupportTokens(
    token0s: string[],
    chainIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollback(
    token0: string,
    chainID: BigNumberish,
    from: string,
    amount: BigNumberish,
    txid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    token0: string,
    chainID: BigNumberish,
    feeAmount: BigNumberish,
    feeRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegSwap(
    _pegSwap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    token: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportToken(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  threshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  txMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  txRollbacked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  txUnlocked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  unlock(
    token0: string,
    chainID: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    txid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CROSSER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportToken(
      token0: string,
      token1: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportTokens(
      token0s: string[],
      token1s: string[],
      chainIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnBoringToken(
      sender: string,
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
    >;

    crossIn(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    crossOut(
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pegSwap(overrides?: CallOverrides): Promise<string>;

    removeFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportToken(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportTokens(
      token0s: string[],
      chainIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rollback(
      token0: string,
      chainID: BigNumberish,
      from: string,
      amount: BigNumberish,
      txid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      token0: string,
      chainID: BigNumberish,
      feeAmount: BigNumberish,
      feeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPegSwap(_pegSwap: string, overrides?: CallOverrides): Promise<void>;

    setThreshold(
      token: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    threshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    txMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    txRollbacked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    txUnlocked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    unlock(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CrossBurn(
      token0?: null,
      token1?: null,
      chainID0?: null,
      chainID1?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, BigNumber],
      {
        token0: string;
        token1: string;
        chainID0: BigNumber;
        chainID1: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
      }
    >;

    FeeChange(
      token?: null,
      chainID?: null,
      feeAmount?: null,
      feeRatio?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        chainID: BigNumber;
        feeAmount: BigNumber;
        feeRatio: BigNumber;
      }
    >;

    FeeToAdded(
      token?: null,
      chainID?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; chainID: BigNumber; account: string }
    >;

    FeeToRemoved(
      token?: null,
      chainID?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; chainID: BigNumber; account: string }
    >;

    Lock(
      token0?: null,
      token1?: null,
      chainID0?: null,
      chainID1?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, BigNumber],
      {
        token0: string;
        token1: string;
        chainID0: BigNumber;
        chainID1: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
      }
    >;

    ProposalVoted(
      token?: null,
      from?: null,
      to?: null,
      amount?: null,
      proposer?: null,
      count?: null,
      threshold?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        to: string;
        amount: BigNumber;
        proposer: string;
        count: BigNumber;
        threshold: BigNumber;
      }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    Rollback(
      token0?: null,
      token1?: null,
      chainID0?: null,
      chainID1?: null,
      from?: null,
      to?: null,
      amount?: null,
      txid?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, BigNumber, string],
      {
        token0: string;
        token1: string;
        chainID0: BigNumber;
        chainID1: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
        txid: string;
      }
    >;

    Rollbacked(
      token0?: null,
      from?: null,
      amount?: null,
      txid?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token0: string; from: string; amount: BigNumber; txid: string }
    >;

    ThresholdChanged(
      token?: null,
      oldThreshold?: null,
      newThreshold?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; oldThreshold: BigNumber; newThreshold: BigNumber }
    >;

    Unlock(
      token0?: null,
      token1?: null,
      chianID0?: null,
      chainID1?: null,
      from?: null,
      to?: null,
      amount?: null,
      txid?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, BigNumber, string],
      {
        token0: string;
        token1: string;
        chianID0: BigNumber;
        chainID1: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
        txid: string;
      }
    >;
  };

  estimateGas: {
    CROSSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportToken(
      token0: string,
      token1: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportTokens(
      token0s: string[],
      token1s: string[],
      chainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBoringToken(
      sender: string,
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crossIn(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crossOut(
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pegSwap(overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupportToken(
      token0: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupportTokens(
      token0s: string[],
      chainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollback(
      token0: string,
      chainID: BigNumberish,
      from: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      token0: string,
      chainID: BigNumberish,
      feeAmount: BigNumberish,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegSwap(
      _pegSwap: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      token: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    txMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    txRollbacked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    txUnlocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CROSSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportToken(
      token0: string,
      token1: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportTokens(
      token0s: string[],
      token1s: string[],
      chainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBoringToken(
      sender: string,
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crossIn(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crossOut(
      token0: string,
      chainID: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pegSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFeeTo(
      token0: string,
      chainID: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupportToken(
      token0: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupportTokens(
      token0s: string[],
      chainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollback(
      token0: string,
      chainID: BigNumberish,
      from: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      token0: string,
      chainID: BigNumberish,
      feeAmount: BigNumberish,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegSwap(
      _pegSwap: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      token: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txRollbacked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txUnlocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      token0: string,
      chainID: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
