{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xa12cF91751F9C7547a2543de6Eb781B2a89e4296",
      "txHash": "0x825613578d5b5aa6637ab8928bd845d8d279897f7704bdf1b9306841807407e5",
      "kind": "uups"
    },
    {
      "address": "0x223c20aE03ddC35Fddcd21e206e4715284b0105e",
      "txHash": "0xf8a1144453a4bad6d56458000d1ee941fcdddff02786d8b805c445dc81e983d8",
      "kind": "uups"
    }
  ],
  "impls": {
    "565ed7945997fc159e504f2b748c15c7527d2075b21b4d49f4de98f91ca97d63": {
      "address": "0xFd164af933a49594c6f3F9B210c753c2e9b5c6A2",
      "txHash": "0x5bec413fae20d98af527eecbed5b33d35c233c7b0c952c53fbf05d0031465e62",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
          },
          {
            "contract": "ProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ProposalVote.sol:10"
          },
          {
            "contract": "ProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ProposalVote.sol:12"
          },
          {
            "contract": "ProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/ProposalVote.sol:13"
          },
          {
            "contract": "ProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/ProposalVote.sol:14"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeAmountM",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twoway/TwoWayToll.sol:11"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeRatioM",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twoway/TwoWayToll.sol:12"
          },
          {
            "contract": "TwoWayToll",
            "label": "removeFeeAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twoway/TwoWayToll.sol:14"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeTo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twoway/TwoWayToll.sol:15"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeToDev",
            "type": "t_address",
            "src": "contracts/twoway/TwoWayToll.sol:16"
          },
          {
            "contract": "TwoWay",
            "label": "supportToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twoway/TwoWay.sol:28"
          },
          {
            "contract": "TwoWay",
            "label": "txMinted",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twoway/TwoWay.sol:29"
          },
          {
            "contract": "TwoWay",
            "label": "txUnlocked",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twoway/TwoWay.sol:30"
          },
          {
            "contract": "TwoWay",
            "label": "txRollbacked",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twoway/TwoWay.sol:31"
          },
          {
            "contract": "TwoWay",
            "label": "pairs",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/twoway/TwoWay.sol:34"
          },
          {
            "contract": "TwoWay",
            "label": "unlockFeeOn",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/twoway/TwoWay.sol:36"
          },
          {
            "contract": "TwoWay",
            "label": "chainid",
            "type": "t_uint256",
            "src": "contracts/twoway/TwoWay.sol:38"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "59c608122cefa3ca1c473df53e961c7429bcaa5712168ecb723199765d9afe5c": {
      "address": "0xb608b55b0F777e70F8e37a18F8Da6EC8AE667B33",
      "txHash": "0x7c63acbeb10dd52a7897430176ce52e330baebf272c2139b0c322184c7afe404",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
          },
          {
            "contract": "SwapPair",
            "label": "token0",
            "type": "t_address",
            "src": "contracts/twoway/SwapPair.sol:25"
          },
          {
            "contract": "SwapPair",
            "label": "reserve0",
            "type": "t_uint256",
            "src": "contracts/twoway/SwapPair.sol:27"
          },
          {
            "contract": "SwapPair",
            "label": "supportChainids",
            "type": "t_struct(UintSet)3476_storage",
            "src": "contracts/twoway/SwapPair.sol:29"
          },
          {
            "contract": "SwapPair",
            "label": "reserve1s",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/twoway/SwapPair.sol:30"
          },
          {
            "contract": "SwapPair",
            "label": "totalReserve1s",
            "type": "t_uint256",
            "src": "contracts/twoway/SwapPair.sol:31"
          },
          {
            "contract": "SwapPair",
            "label": "twoWay",
            "type": "t_address",
            "src": "contracts/twoway/SwapPair.sol:33"
          },
          {
            "contract": "SwapPair",
            "label": "diff0",
            "type": "t_uint256",
            "src": "contracts/twoway/SwapPair.sol:35"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(UintSet)3476_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3018_storage"
              }
            ]
          },
          "t_struct(Set)3018_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
