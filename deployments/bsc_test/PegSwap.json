{
  "address": "0x1D89E92f28f66DBE12a7F0b469ab55e77330bb1b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getMaxToken0AmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getMaxToken1AmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "removePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        }
      ],
      "name": "setRemovalMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_twoWay",
          "type": "address"
        }
      ],
      "name": "setTwoWay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapToken0ForToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swapToken1ForToken0",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "twoWay",
      "outputs": [
        {
          "internalType": "contract ITwoWay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x168ad7db3b7b88ae49a740195546327bddc0243e14d1b0e8d819bb7f426c0eec",
  "receipt": {
    "to": null,
    "from": "0x2353178C6c05378812f024A783541857634A1e82",
    "contractAddress": "0x1D89E92f28f66DBE12a7F0b469ab55e77330bb1b",
    "transactionIndex": 0,
    "gasUsed": "1197969",
    "logsBloom": "0x
    "blockHash": "0x498d1e789eff03801e9331c69ee9f7fab146bdb5a545aad0539d2e58f93fac85",
    "transactionHash": "0x168ad7db3b7b88ae49a740195546327bddc0243e14d1b0e8d819bb7f426c0eec",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11099412,
        "transactionHash": "0x168ad7db3b7b88ae49a740195546327bddc0243e14d1b0e8d819bb7f426c0eec",
        "address": "0x1D89E92f28f66DBE12a7F0b469ab55e77330bb1b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002353178c6c05378812f024a783541857634a1e82"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x498d1e789eff03801e9331c69ee9f7fab146bdb5a545aad0539d2e58f93fac85"
      }
    ],
    "blockNumber": 11099412,
    "cumulativeGasUsed": "1197969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c56e2555743f37c4674515eb5f5e745d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxToken0AmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxToken1AmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setRemovalMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_twoWay\",\"type\":\"address\"}],\"name\":\"setTwoWay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapToken0ForToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapToken1ForToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twoWay\",\"outputs\":[{\"internalType\":\"contract ITwoWay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/twoway/PegSwap.sol\":\"PegSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interface/IPegSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwapPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function token0() external returns (address);\\n\\n    function token1() external returns (address);\\n\\n    function swap(address to, bool direction) external; // direction: token0 -> token1 or token1 -> token0\\n\\n    function getReserves() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x1285862ea363da7f3a3eb719f17a0708aad6e203a085bf3e70e8f946d4c73941\",\"license\":\"MIT\"},\"contracts/interface/ITwoWay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITwoWay {\\n    function burnBoringToken(address sender, address token0, uint256 chainID, address to, uint256 amount) external;\\n}\",\"keccak256\":\"0x0f8fdf26900deadd42338a66c6f897a6ebe50e064757149e89ab287d39f986e9\",\"license\":\"MIT\"},\"contracts/twoway/PegSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interface/IPegSwapPair.sol\\\";\\nimport \\\"../interface/ITwoWay.sol\\\";\\n\\ncontract PegSwap is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    ITwoWay public twoWay;\\n\\n    // origin token address => pair address\\n    // example: dai => pair(token0=dai, token1=borDAI)\\n    // mapping(address => address) public pairs;\\n    mapping(address => mapping(uint256 => address)) public pairs;\\n\\n    mapping(address => uint256) removalMinimum;\\n\\n    function setRemovalMinimum(address token0, uint256 minimum) public onlyOwner {\\n        removalMinimum[token0] = minimum;\\n    }\\n\\n    function setTwoWay(address _twoWay) public onlyOwner {\\n        twoWay = ITwoWay(_twoWay);\\n    }\\n\\n    function getPair(address token, uint256 chainID) public view onlySupportToken(token, chainID) returns (address) {\\n        return pairs[token][chainID];\\n    }\\n\\n    function addPair(address token, address pair, uint256 chainID) public onlyOwner {\\n        require(pairs[token][chainID] == address(0), \\\"PegSwap: token already supported\\\");\\n        pairs[token][chainID] = pair;\\n    }\\n\\n    function removePair(address token, uint256 chainID) public onlyOwner {\\n        require(pairs[token][chainID] != address(0), \\\"PegSwap: token not supported\\\");\\n        delete pairs[token][chainID];\\n    }\\n\\n    function addLiquidity(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amount,\\n        address to\\n    ) public onlySupportToken(token0, chainID) returns (uint256 liquidity) {\\n        address pair = getPair(token0, chainID);\\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amount);\\n        liquidity = IPegSwapPair(pair).mint(to);\\n    }\\n\\n    function removeLiquidity(\\n        address token0,\\n        uint256 chainID,\\n        uint256 liquidity,\\n        address to\\n    ) public onlySupportToken(token0, chainID) returns (uint256 amount0, uint256 amount1) {\\n        require(removalMinimum[token0] < liquidity, \\\"PegSwap: liquidity is less than minimum\\\");\\n        address pair = getPair(token0, chainID);\\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity);\\n        (amount0, amount1) = IPegSwapPair(pair).burn(msg.sender);\\n\\n        if (amount1 > 0) {\\n            twoWay.burnBoringToken(msg.sender, token0, chainID, to, amount1);\\n        }\\n    }\\n\\n    // token0 -> token1\\n    function swapToken0ForToken1(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) public onlySupportToken(token0, chainID) onlyTwoWay {\\n        require(amountIn > 0, \\\"PegSwap: input must be greater than 0\\\");\\n        address pair = getPair(token0, chainID);\\n\\n        // transfer erc20 token to pair address\\n        IERC20(token0).transferFrom(msg.sender, pair, amountIn);\\n        IPegSwapPair(pair).swap(to, true);\\n    }\\n\\n    // token1 -> token0\\n    function swapToken1ForToken0(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) public onlySupportToken(token0, chainID) onlyTwoWay {\\n        require(amountIn > 0, \\\"PegSwap: input must be greater than 0\\\");\\n        address pair = getPair(token0, chainID);\\n        address token1 = IPegSwapPair(pair).token1();\\n\\n        // transfer bor-erc20 token to pair address\\n        IERC20(token1).transferFrom(msg.sender, pair, amountIn);\\n        IPegSwapPair(pair).swap(to, false);\\n    }\\n\\n    function getMaxToken1AmountOut(address token0, uint256 chainID) public view returns (uint256) {\\n        address pair = getPair(token0, chainID);\\n        (, uint256 _reserve1) = IPegSwapPair(pair).getReserves();\\n\\n        return _reserve1;\\n    }\\n\\n    function getMaxToken0AmountOut(address token0, uint256 chainID) public view returns (uint256) {\\n        address pair = getPair(token0, chainID);\\n        (uint256 _reserve0, ) = IPegSwapPair(pair).getReserves();\\n\\n        return _reserve0;\\n    }\\n\\n    modifier onlySupportToken(address token, uint256 chainID) {\\n        require(pairs[token][chainID] != address(0), \\\"PegSwap: not support this token\\\");\\n        _;\\n    }\\n\\n    modifier onlyTwoWay {\\n        require(msg.sender == address(twoWay), \\\"PegSwap: caller is not pegProxy\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb742fa95d851006525e8dff03562f474a16b1db3518a29f7dd6341476c757c2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114468061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c806356ecaeb711610097578063934ac70711610066578063934ac7071461023e578063b5acfa6214610251578063d5e04b7614610264578063f2fde38b1461027757600080fd5b806356ecaeb7146101ea578063715018a6146101fd5780638da5cb5b146102055780638fed0b2c1461021657600080fd5b80632599c037116100d35780632599c0371461019e57806340ec1723146101b157806342baeb84146101c45780634ff2c804146101d757600080fd5b80626349fb1461010457806303d40513146101345780630cf5bf1a1461016857806312fef6921461017d575b600080fd5b6101176101123660046111dc565b61028a565b6040516001600160a01b0390911681526020015b60405180910390f35b6101176101423660046111dc565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61017b610176366004611164565b610306565b005b61019061018b366004611207565b610352565b60405190815260200161012b565b61017b6101ac3660046111dc565b610444565b61017b6101bf366004611207565b610513565b600154610117906001600160a01b031681565b61017b6101e5366004611207565b610748565b6101906101f83660046111dc565b610905565b61017b610990565b6000546001600160a01b0316610117565b610229610224366004611207565b6109c6565b6040805192835260208301919091520161012b565b61019061024c3660046111dc565b610c24565b61017b61025f36600461119c565b610caf565b61017b6102723660046111dc565b610d84565b61017b610285366004611164565b610dca565b6001600160a01b038083166000908152600260209081526040808320858452909152812054909184918491166102db5760405162461bcd60e51b81526004016102d290611353565b60405180910390fd5b5050506001600160a01b03918216600090815260026020908152604080832093835292905220541690565b6000546001600160a01b031633146103305760405162461bcd60e51b81526004016102d29061131e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380851660009081526002602090815260408083208784529091528120549091869186911661039a5760405162461bcd60e51b81526004016102d290611353565b60006103a6888861028a565b90506103bd6001600160a01b038916338389610e65565b6040516335313c2160e11b81526001600160a01b038681166004830152821690636a62784290602401602060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190611270565b98975050505050505050565b6000546001600160a01b0316331461046e5760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b038281166000908152600260209081526040808320858452909152902054166104e05760405162461bcd60e51b815260206004820152601c60248201527f506567537761703a20746f6b656e206e6f7420737570706f727465640000000060448201526064016102d2565b6001600160a01b0390911660009081526002602090815260408083209383529290522080546001600160a01b0319169055565b6001600160a01b03808516600090815260026020908152604080832087845290915290205485918591166105595760405162461bcd60e51b81526004016102d290611353565b6001546001600160a01b031633146105b35760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f78790060448201526064016102d2565b600084116105d35760405162461bcd60e51b81526004016102d29061138a565b60006105df878761028a565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190611180565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd9061068990339086908b906004016112c7565b602060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190611250565b5060405163513c681b60e11b81526001600160a01b0386811660048301526000602483015283169063a278d03690604401600060405180830381600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b038085166000908152600260209081526040808320878452909152902054859185911661078e5760405162461bcd60e51b81526004016102d290611353565b6001546001600160a01b031633146107e85760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f78790060448201526064016102d2565b600084116108085760405162461bcd60e51b81526004016102d29061138a565b6000610814878761028a565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd9061084790339085908a906004016112c7565b602060405180830381600087803b15801561086157600080fd5b505af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190611250565b5060405163513c681b60e11b81526001600160a01b0385811660048301526001602483015282169063a278d03690604401600060405180830381600087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b5050505050505050505050565b600080610912848461028a565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b15801561094e57600080fd5b505afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190611288565b9695505050505050565b6000546001600160a01b031633146109ba5760405162461bcd60e51b81526004016102d29061131e565b6109c46000610ec3565b565b6001600160a01b038085166000908152600260209081526040808320878452909152812054909182918791879116610a105760405162461bcd60e51b81526004016102d290611353565b6001600160a01b0388166000908152600360205260409020548611610a875760405162461bcd60e51b815260206004820152602760248201527f506567537761703a206c6971756964697479206973206c657373207468616e206044820152666d696e696d756d60c81b60648201526084016102d2565b6000610a93898961028a565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90610ac690339085908c906004016112c7565b602060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190611250565b5060405163226bf2d160e21b81523360048201526001600160a01b038216906389afcb44906024016040805180830381600087803b158015610b5957600080fd5b505af1158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190611288565b90955093508315610c185760015460405163b33efbd560e01b81523360048201526001600160a01b038b81166024830152604482018b90528881166064830152608482018790529091169063b33efbd59060a401600060405180830381600087803b158015610bff57600080fd5b505af1158015610c13573d6000803e3d6000fd5b505050505b50505094509492505050565b600080610c31848461028a565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca59190611288565b5095945050505050565b6000546001600160a01b03163314610cd95760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b0383811660009081526002602090815260408083208584529091529020541615610d4c5760405162461bcd60e51b815260206004820181905260248201527f506567537761703a20746f6b656e20616c726561647920737570706f7274656460448201526064016102d2565b6001600160a01b0392831660009081526002602090815260408083209383529290522080546001600160a01b03191691909216179055565b6000546001600160a01b03163314610dae5760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b03909116600090815260036020526040902055565b6000546001600160a01b03163314610df45760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b038116610e595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d2565b610e6281610ec3565b50565b610ebd846323b872dd60e01b858585604051602401610e86939291906112c7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f13565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610f68826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fea9092919063ffffffff16565b805190915015610fe55780806020019051810190610f869190611250565b610fe55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d2565b505050565b6060610ff98484600085611003565b90505b9392505050565b6060824710156110645760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102d2565b843b6110b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d2565b600080866001600160a01b031685876040516110ce91906112ab565b60006040518083038185875af1925050503d806000811461110b576040519150601f19603f3d011682016040523d82523d6000602084013e611110565b606091505b509150915061112082828661112b565b979650505050505050565b6060831561113a575081610ffc565b82511561114a5782518084602001fd5b8160405162461bcd60e51b81526004016102d291906112eb565b600060208284031215611175578081fd5b8135610ffc816113fb565b600060208284031215611191578081fd5b8151610ffc816113fb565b6000806000606084860312156111b0578182fd5b83356111bb816113fb565b925060208401356111cb816113fb565b929592945050506040919091013590565b600080604083850312156111ee578182fd5b82356111f9816113fb565b946020939093013593505050565b6000806000806080858703121561121c578081fd5b8435611227816113fb565b935060208501359250604085013591506060850135611245816113fb565b939692955090935050565b600060208284031215611261578081fd5b81518015158114610ffc578182fd5b600060208284031215611281578081fd5b5051919050565b6000806040838503121561129a578182fd5b505080516020909101519092909150565b600082516112bd8184602087016113cf565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602081526000825180602084015261130a8160408501602087016113cf565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f506567537761703a206e6f7420737570706f7274207468697320746f6b656e00604082015260600190565b60208082526025908201527f506567537761703a20696e707574206d75737420626520677265617465722074604082015264068616e20360dc1b606082015260800190565b60005b838110156113ea5781810151838201526020016113d2565b83811115610ebd5750506000910152565b6001600160a01b0381168114610e6257600080fdfea26469706673582212203baf31b502dedb65043330f84285e087528b5edb9cb17ea63e0b7c619eef71bc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c806356ecaeb711610097578063934ac70711610066578063934ac7071461023e578063b5acfa6214610251578063d5e04b7614610264578063f2fde38b1461027757600080fd5b806356ecaeb7146101ea578063715018a6146101fd5780638da5cb5b146102055780638fed0b2c1461021657600080fd5b80632599c037116100d35780632599c0371461019e57806340ec1723146101b157806342baeb84146101c45780634ff2c804146101d757600080fd5b80626349fb1461010457806303d40513146101345780630cf5bf1a1461016857806312fef6921461017d575b600080fd5b6101176101123660046111dc565b61028a565b6040516001600160a01b0390911681526020015b60405180910390f35b6101176101423660046111dc565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61017b610176366004611164565b610306565b005b61019061018b366004611207565b610352565b60405190815260200161012b565b61017b6101ac3660046111dc565b610444565b61017b6101bf366004611207565b610513565b600154610117906001600160a01b031681565b61017b6101e5366004611207565b610748565b6101906101f83660046111dc565b610905565b61017b610990565b6000546001600160a01b0316610117565b610229610224366004611207565b6109c6565b6040805192835260208301919091520161012b565b61019061024c3660046111dc565b610c24565b61017b61025f36600461119c565b610caf565b61017b6102723660046111dc565b610d84565b61017b610285366004611164565b610dca565b6001600160a01b038083166000908152600260209081526040808320858452909152812054909184918491166102db5760405162461bcd60e51b81526004016102d290611353565b60405180910390fd5b5050506001600160a01b03918216600090815260026020908152604080832093835292905220541690565b6000546001600160a01b031633146103305760405162461bcd60e51b81526004016102d29061131e565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380851660009081526002602090815260408083208784529091528120549091869186911661039a5760405162461bcd60e51b81526004016102d290611353565b60006103a6888861028a565b90506103bd6001600160a01b038916338389610e65565b6040516335313c2160e11b81526001600160a01b038681166004830152821690636a62784290602401602060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190611270565b98975050505050505050565b6000546001600160a01b0316331461046e5760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b038281166000908152600260209081526040808320858452909152902054166104e05760405162461bcd60e51b815260206004820152601c60248201527f506567537761703a20746f6b656e206e6f7420737570706f727465640000000060448201526064016102d2565b6001600160a01b0390911660009081526002602090815260408083209383529290522080546001600160a01b0319169055565b6001600160a01b03808516600090815260026020908152604080832087845290915290205485918591166105595760405162461bcd60e51b81526004016102d290611353565b6001546001600160a01b031633146105b35760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f78790060448201526064016102d2565b600084116105d35760405162461bcd60e51b81526004016102d29061138a565b60006105df878761028a565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190611180565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd9061068990339086908b906004016112c7565b602060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190611250565b5060405163513c681b60e11b81526001600160a01b0386811660048301526000602483015283169063a278d03690604401600060405180830381600087803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b038085166000908152600260209081526040808320878452909152902054859185911661078e5760405162461bcd60e51b81526004016102d290611353565b6001546001600160a01b031633146107e85760405162461bcd60e51b815260206004820152601f60248201527f506567537761703a2063616c6c6572206973206e6f742070656750726f78790060448201526064016102d2565b600084116108085760405162461bcd60e51b81526004016102d29061138a565b6000610814878761028a565b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd9061084790339085908a906004016112c7565b602060405180830381600087803b15801561086157600080fd5b505af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190611250565b5060405163513c681b60e11b81526001600160a01b0385811660048301526001602483015282169063a278d03690604401600060405180830381600087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b5050505050505050505050565b600080610912848461028a565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b15801561094e57600080fd5b505afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190611288565b9695505050505050565b6000546001600160a01b031633146109ba5760405162461bcd60e51b81526004016102d29061131e565b6109c46000610ec3565b565b6001600160a01b038085166000908152600260209081526040808320878452909152812054909182918791879116610a105760405162461bcd60e51b81526004016102d290611353565b6001600160a01b0388166000908152600360205260409020548611610a875760405162461bcd60e51b815260206004820152602760248201527f506567537761703a206c6971756964697479206973206c657373207468616e206044820152666d696e696d756d60c81b60648201526084016102d2565b6000610a93898961028a565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90610ac690339085908c906004016112c7565b602060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190611250565b5060405163226bf2d160e21b81523360048201526001600160a01b038216906389afcb44906024016040805180830381600087803b158015610b5957600080fd5b505af1158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190611288565b90955093508315610c185760015460405163b33efbd560e01b81523360048201526001600160a01b038b81166024830152604482018b90528881166064830152608482018790529091169063b33efbd59060a401600060405180830381600087803b158015610bff57600080fd5b505af1158015610c13573d6000803e3d6000fd5b505050505b50505094509492505050565b600080610c31848461028a565b90506000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b158015610c6d57600080fd5b505afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca59190611288565b5095945050505050565b6000546001600160a01b03163314610cd95760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b0383811660009081526002602090815260408083208584529091529020541615610d4c5760405162461bcd60e51b815260206004820181905260248201527f506567537761703a20746f6b656e20616c726561647920737570706f7274656460448201526064016102d2565b6001600160a01b0392831660009081526002602090815260408083209383529290522080546001600160a01b03191691909216179055565b6000546001600160a01b03163314610dae5760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b03909116600090815260036020526040902055565b6000546001600160a01b03163314610df45760405162461bcd60e51b81526004016102d29061131e565b6001600160a01b038116610e595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d2565b610e6281610ec3565b50565b610ebd846323b872dd60e01b858585604051602401610e86939291906112c7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f13565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610f68826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fea9092919063ffffffff16565b805190915015610fe55780806020019051810190610f869190611250565b610fe55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d2565b505050565b6060610ff98484600085611003565b90505b9392505050565b6060824710156110645760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102d2565b843b6110b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d2565b600080866001600160a01b031685876040516110ce91906112ab565b60006040518083038185875af1925050503d806000811461110b576040519150601f19603f3d011682016040523d82523d6000602084013e611110565b606091505b509150915061112082828661112b565b979650505050505050565b6060831561113a575081610ffc565b82511561114a5782518084602001fd5b8160405162461bcd60e51b81526004016102d291906112eb565b600060208284031215611175578081fd5b8135610ffc816113fb565b600060208284031215611191578081fd5b8151610ffc816113fb565b6000806000606084860312156111b0578182fd5b83356111bb816113fb565b925060208401356111cb816113fb565b929592945050506040919091013590565b600080604083850312156111ee578182fd5b82356111f9816113fb565b946020939093013593505050565b6000806000806080858703121561121c578081fd5b8435611227816113fb565b935060208501359250604085013591506060850135611245816113fb565b939692955090935050565b600060208284031215611261578081fd5b81518015158114610ffc578182fd5b600060208284031215611281578081fd5b5051919050565b6000806040838503121561129a578182fd5b505080516020909101519092909150565b600082516112bd8184602087016113cf565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602081526000825180602084015261130a8160408501602087016113cf565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f506567537761703a206e6f7420737570706f7274207468697320746f6b656e00604082015260600190565b60208082526025908201527f506567537761703a20696e707574206d75737420626520677265617465722074604082015264068616e20360dc1b606082015260800190565b60005b838110156113ea5781810151838201526020016113d2565b83811115610ebd5750506000910152565b6001600160a01b0381168114610e6257600080fdfea26469706673582212203baf31b502dedb65043330f84285e087528b5edb9cb17ea63e0b7c619eef71bc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2750,
        "contract": "contracts/twoway/PegSwap.sol:PegSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8254,
        "contract": "contracts/twoway/PegSwap.sol:PegSwap",
        "label": "twoWay",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITwoWay)7650"
      },
      {
        "astId": 8260,
        "contract": "contracts/twoway/PegSwap.sol:PegSwap",
        "label": "pairs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 8264,
        "contract": "contracts/twoway/PegSwap.sol:PegSwap",
        "label": "removalMinimum",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITwoWay)7650": {
        "encoding": "inplace",
        "label": "contract ITwoWay",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}