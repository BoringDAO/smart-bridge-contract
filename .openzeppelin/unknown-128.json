{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xE3B59FD01c0155A98146a6E0Beb8376B751363fc",
      "txHash": "0xb94794c6141e06e4d663f16280a07f50797b3c21e63768284fb4aa27fe85891a",
      "kind": "uups"
    }
  ],
  "impls": {
    "0231d3b99fbe9d076496d701354d5ad4f1be2e4e7d63dc7f0c2d924d8bb4ee27": {
      "address": "0x4F497F9D85A6fE135fFca99f0f253919fE827211",
      "txHash": "0x1f7efb2e1ef01a76bafb4cf18887fa7efad08cde438f6994179d157dc7eaea45",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8615_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8615_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e7bfccb77fc196e1f3e1e4bb4c662be25b9e239afb8ccbda3c61ee268368e3f6": {
      "address": "0x39c412fa81dAe9673A3E00e83B2F58a08DD8Fbc9",
      "txHash": "0x99993299c30ffad6c5fc783366ff87741ff387bb70147dd13e1374d2166c3513",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8615_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8615_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e6d27c69768338c3526b7367972ce4d27e2f52d61dfcb606e769448b66bba374": {
      "address": "0xdE52f32A3a5f0E687d14757ECBB5628D5582cd67",
      "txHash": "0x9d53d5d83330d3279783668d9368da8e23da0792023910857588d29bc3c7c70c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8615_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8615_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
