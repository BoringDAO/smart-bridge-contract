/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestERC20, TestERC20Interface } from "../TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f0138038062000f018339810160408190526200003491620002ee565b8251839083906200004d90600390602085019062000195565b5080516200006390600490602084019062000195565b505050620000903382600a6200007a9190620003d3565b6200008a906305f5e100620004a1565b620000ad565b6005805460ff191660ff92909216919091179055506200052c9050565b6001600160a01b038216620001085760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200011c91906200036f565b90915550506001600160a01b038216600090815260208190526040812080548392906200014b9084906200036f565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001a390620004c3565b90600052602060002090601f016020900481019282620001c7576000855562000212565b82601f10620001e257805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000212578251825591602001919060010190620001f5565b506200022092915062000224565b5090565b5b8082111562000220576000815560010162000225565b600082601f8301126200024c578081fd5b81516001600160401b038082111562000269576200026962000516565b604051601f8301601f19908116603f0116810190828211818310171562000294576200029462000516565b81604052838152602092508683858801011115620002b0578485fd5b8491505b83821015620002d35785820183015181830184015290820190620002b4565b83821115620002e457848385830101525b9695505050505050565b60008060006060848603121562000303578283fd5b83516001600160401b03808211156200031a578485fd5b62000328878388016200023b565b945060208601519150808211156200033e578384fd5b506200034d868287016200023b565b925050604084015160ff8116811462000364578182fd5b809150509250925092565b6000821982111562000385576200038562000500565b500190565b600181815b80851115620003cb578160001904821115620003af57620003af62000500565b80851615620003bd57918102915b93841c93908002906200038f565b509250929050565b6000620003e460ff841683620003eb565b9392505050565b600082620003fc575060016200049b565b816200040b575060006200049b565b81600181146200042457600281146200042f576200044f565b60019150506200049b565b60ff84111562000443576200044362000500565b50506001821b6200049b565b5060208310610133831016604e8410600b841016171562000474575081810a6200049b565b6200048083836200038a565b806000190482111562000497576200049762000500565b0290505b92915050565b6000816000190483118215151615620004be57620004be62000500565b500290565b600181811c90821680620004d857607f821691505b60208210811415620004fa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6109c5806200053c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461014757806395d89b4114610170578063a457c2d714610178578063a9059cbb1461018b578063dd62ed3e1461019e578063de5f72fd146101d757600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f5780633950935114610134575b600080fd5b6100c16101e1565b6040516100ce91906108dd565b60405180910390f35b6100ea6100e53660046108b4565b610273565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a366004610879565b610289565b60055460405160ff90911681526020016100ce565b6100ea6101423660046108b4565b610338565b6100fe610155366004610826565b6001600160a01b031660009081526020819052604090205490565b6100c1610374565b6100ea6101863660046108b4565b610383565b6100ea6101993660046108b4565b61041c565b6100fe6101ac366004610847565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101df610429565b005b6060600380546101f090610954565b80601f016020809104026020016040519081016040528092919081815260200182805461021c90610954565b80156102695780601f1061023e57610100808354040283529160200191610269565b820191906000526020600020905b81548152906001019060200180831161024c57829003601f168201915b5050505050905090565b6000610280338484610438565b50600192915050565b600061029684848461055c565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103205760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61032d8533858403610438565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161028091859061036f908690610930565b610438565b6060600480546101f090610954565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104055760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610317565b6104123385858403610438565b5060019392505050565b600061028033848461055c565b61043633620186a061072b565b565b6001600160a01b03831661049a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610317565b6001600160a01b0382166104fb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610317565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105c05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610317565b6001600160a01b0382166106225760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610317565b6001600160a01b0383166000908152602081905260409020548181101561069a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610317565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106d1908490610930565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161071d91815260200190565b60405180910390a350505050565b6001600160a01b0382166107815760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610317565b80600260008282546107939190610930565b90915550506001600160a01b038216600090815260208190526040812080548392906107c0908490610930565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b038116811461082157600080fd5b919050565b600060208284031215610837578081fd5b6108408261080a565b9392505050565b60008060408385031215610859578081fd5b6108628361080a565b91506108706020840161080a565b90509250929050565b60008060006060848603121561088d578081fd5b6108968461080a565b92506108a46020850161080a565b9150604084013590509250925092565b600080604083850312156108c6578182fd5b6108cf8361080a565b946020939093013593505050565b6000602080835283518082850152825b81811015610909578581018301518582016040015282016108ed565b8181111561091a5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561094f57634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061096857607f821691505b6020821081141561098957634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220eed2e48720728acb311848d60da245fd2430da8015886de790283a1a789db92164736f6c63430008040033";

export class TestERC20__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _symbol: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestERC20> {
    return super.deploy(
      _name,
      _symbol,
      decimals_,
      overrides || {}
    ) as Promise<TestERC20>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      decimals_,
      overrides || {}
    );
  }
  attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
