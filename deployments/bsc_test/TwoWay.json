{
  "address": "0xC8E98D8855088F869a38dD00f4683c3Ea05d2c62",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CrossBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRatio",
          "type": "uint256"
        }
      ],
      "name": "FeeChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "FeeToAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "FeeToRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Rollback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Rollbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chianID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CROSSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "addSupportToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0s",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "token1s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        }
      ],
      "name": "addSupportTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnBoringToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "crossIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "crossOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "feeToLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getFeeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegSwap",
      "outputs": [
        {
          "internalType": "contract IPegSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "removeSupportToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        }
      ],
      "name": "removeSupportTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "rollback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeRatio",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pegSwap",
          "type": "address"
        }
      ],
      "name": "setPegSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txRollbacked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ba1f6ab8263d0b94a2ab3f03ef5a0157e699df7b58fe082bc3fe482b9261f5d",
  "receipt": {
    "to": null,
    "from": "0x2353178C6c05378812f024A783541857634A1e82",
    "contractAddress": "0xC8E98D8855088F869a38dD00f4683c3Ea05d2c62",
    "transactionIndex": 4,
    "gasUsed": "3003440",
    "logsBloom": "0x
    "blockHash": "0xd7a305eacc286e8a70d70347f6345126aed7df1923a52d074527ddde432b24e2",
    "transactionHash": "0x1ba1f6ab8263d0b94a2ab3f03ef5a0157e699df7b58fe082bc3fe482b9261f5d",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 11099984,
        "transactionHash": "0x1ba1f6ab8263d0b94a2ab3f03ef5a0157e699df7b58fe082bc3fe482b9261f5d",
        "address": "0xC8E98D8855088F869a38dD00f4683c3Ea05d2c62",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002353178c6c05378812f024a783541857634a1e82",
          "0x0000000000000000000000002353178c6c05378812f024a783541857634a1e82"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xd7a305eacc286e8a70d70347f6345126aed7df1923a52d074527ddde432b24e2"
      }
    ],
    "blockNumber": 11099984,
    "cumulativeGasUsed": "3555003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cbca735d1c22cbb730acfe157da846fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CrossBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeToAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeToRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Rollback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Rollbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chianID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"addSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0s\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"}],\"name\":\"addSupportTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBoringToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"crossIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"crossOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"feeToLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegSwap\",\"outputs\":[{\"internalType\":\"contract IPegSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"removeSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"}],\"name\":\"removeSupportTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"rollback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegSwap\",\"type\":\"address\"}],\"name\":\"setPegSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txRollbacked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/twoway/TwoWay.sol\":\"TwoWay\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/ProposalVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract ProposalVote {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public threshold;\\n\\n    mapping(bytes32 => bool) isFinished;\\n    mapping(bytes32 => mapping(address => bool)) isVoted;\\n    mapping(bytes32 => uint256) counter;\\n\\n    event ProposalVoted(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address proposer,\\n        uint256 count,\\n        uint256 threshold\\n    );\\n\\n    event ThresholdChanged(address token, uint256 oldThreshold, uint256 newThreshold);\\n\\n    function _setThreshold(address token, uint256 _threshold) internal virtual {\\n        uint256 oldThreshold = threshold[token];\\n        threshold[token] = _threshold;\\n        emit ThresholdChanged(token, oldThreshold, _threshold);\\n    }\\n\\n    function _vote(\\n        address tokenTo,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) internal virtual returns (bool result) {\\n        require(threshold[tokenTo] > 0, \\\"ProposalVote: threshold should be greater than 0\\\");\\n        uint256 count = threshold[tokenTo];\\n        bytes32 mid = keccak256(abi.encodePacked(tokenTo, from, to, amount, txid));\\n        require(isFinished[mid] == false, \\\"_vote::proposal finished\\\");\\n        require(isVoted[mid][msg.sender] == false, \\\"_vote::msg.sender voted\\\");\\n        counter[mid] = counter[mid].add(1);\\n        isVoted[mid][msg.sender] = true;\\n\\n        if (counter[mid] >= count) {\\n            isFinished[mid] = true;\\n            result = true;\\n        }\\n\\n        emit ProposalVoted(tokenTo, from, to, amount, msg.sender, counter[mid], count);\\n    }\\n}\\n\",\"keccak256\":\"0x0f7247daad2583af438ec1aace160eebc48ae66fe24112c28fbf020aff3d1780\",\"license\":\"MIT\"},\"contracts/interface/IBoringToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBoringToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9b558f607a5f506c5ff714d1e3a78601d87a93a07d4cfa3e2f86e8c0b6145452\",\"license\":\"MIT\"},\"contracts/interface/IPegSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwap {\\n    function swapToken0ForToken1(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) external;\\n\\n    function swapToken1ForToken0(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) external;\\n\\n    function getPair(address token, uint256 chainID) external view returns (address);\\n\\n    function getMaxToken1AmountOut(address token0, uint256 chainID) external view returns (uint256);\\n    function getMaxToken0AmountOut(address token0, uint256 chainID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5975f09e1d07a6e7261b10927f2d4f178eb47731931e843011849619b707d42b\",\"license\":\"MIT\"},\"contracts/interface/IPegSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwapPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function token0() external returns (address);\\n\\n    function token1() external returns (address);\\n\\n    function swap(address to, bool direction) external; // direction: token0 -> token1 or token1 -> token0\\n\\n    function getReserves() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x1285862ea363da7f3a3eb719f17a0708aad6e203a085bf3e70e8f946d4c73941\",\"license\":\"MIT\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/twoway/Toll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// import \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../lib/SafeDecimalMath.sol\\\";\\n\\ncontract Toll {\\n    using SafeDecimalMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(address => mapping(uint256 => uint256)) feeAmountM;\\n    mapping(address => mapping(uint256 => uint256)) feeRatioM;\\n    mapping(address => mapping(uint256 => EnumerableSet.AddressSet)) internal feeToSet;\\n\\n    event FeeChange(address token, uint256 chainID, uint256 feeAmount, uint256 feeRatio);\\n    event FeeToRemoved(address token, uint256 chainID, address account);\\n    event FeeToAdded(address token, uint256 chainID, address account);\\n\\n    function _setFee(\\n        address token,\\n        uint256 chainID,\\n        uint256 _feeAmount,\\n        uint256 _feeRatio\\n    ) internal virtual {\\n        require(_feeRatio <= 1e18, \\\"fee ratio not correct\\\");\\n\\n        feeAmountM[token][chainID] = _feeAmount;\\n        feeRatioM[token][chainID] = _feeRatio;\\n        emit FeeChange(token, chainID, _feeAmount, _feeRatio);\\n    }\\n\\n    function _addFeeTo(address token, uint256 chainID, address account) internal virtual {\\n        require(feeToSet[token][chainID].contains(account) == false, \\\"Toll::account was feeTo already\\\");\\n        feeToSet[token][chainID].add(account);\\n        emit FeeToAdded(token, chainID, account);\\n    }\\n\\n    function _removeFeeTo(address token, uint256 chainID, address account) internal virtual {\\n        require(feeToSet[token][chainID].contains(account) == true, \\\"Toll::account is not feeTo\\\");\\n        feeToSet[token][chainID].remove(account);\\n        emit FeeToRemoved(token, chainID, account);\\n    }\\n\\n    function calculateFee(\\n        address token,\\n        uint256 chainID,\\n        uint256 amount\\n    ) public view virtual returns (uint256 feeAmount, uint256 remainAmount) {\\n        uint256 _feeMinAmount = feeAmountM[token][chainID];\\n        uint256 _feeRatio = feeRatioM[token][chainID];\\n        feeAmount = _feeMinAmount + amount.multiplyDecimal(_feeRatio);\\n        remainAmount = amount - feeAmount;\\n    }\\n\\n    function feeToLength(address token, uint256 chainID) public view returns (uint256 len) {\\n        len = feeToSet[token][chainID].length();\\n    }\\n\\n    function getFeeTo(address token, uint256 chainID, uint256 i) public view returns (address account) {\\n        account = feeToSet[token][chainID].at(i);\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3c663c74dad977130cad03f414f776ff58b25f03cd5754449f36dbaa9e7ea\",\"license\":\"MIT\"},\"contracts/twoway/TwoWay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interface/IPegSwap.sol\\\";\\nimport \\\"../interface/IPegSwapPair.sol\\\";\\nimport \\\"../interface/IBoringToken.sol\\\";\\nimport \\\"../ProposalVote.sol\\\";\\nimport \\\"./Toll.sol\\\";\\n\\ncontract TwoWay is ProposalVote, AccessControl, Toll {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    bytes32 public constant CROSSER_ROLE = \\\"CROSSER_ROLE\\\";\\n    \\n\\n    IPegSwap public pegSwap;\\n    // mapping(address => address) public supportToken; // eg.ethToken => bscToke\\n    mapping(address => mapping(uint => address)) public supportToken;\\n    mapping(string => bool) public txMinted;\\n    mapping(string => bool) public txUnlocked;\\n    mapping(string => bool) public txRollbacked;\\n\\n    //================= Event ==================//\\n    event CrossBurn(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount);\\n    event Lock(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount);\\n    event Unlock(address token0, address token1, uint256 chianID0, uint256 chainID1, address from, address to, uint256 amount, string txid);\\n    event Rollback(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount, string txid);\\n    event Rollbacked(address token0, address from, uint256 amount, string txid);\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function crossOut(\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) public onlySupportToken(token0, chainID) {\\n        require(amount > 0, \\\"PegProxy: amount must be greater than 0\\\");\\n        require(to != address(0), \\\"PegProxy: to is empty\\\");\\n\\n        (uint256 feeAmount, uint256 remainAmount) = calculateFee(token0, chainID, amount);\\n        uint256 feeToLen = feeToLength(token0, chainID);\\n        for (uint256 i; i < feeToLen; i++) {\\n            IERC20(token0).transferFrom(msg.sender, getFeeTo(token0, chainID, i), feeAmount / feeToLen);\\n        }\\n\\n        IERC20(token0).transferFrom(msg.sender, address(this), remainAmount);\\n\\n        uint256 out = pegSwap.getMaxToken1AmountOut(token0, chainID);\\n        uint256 burnAmount = remainAmount.min(out);\\n        if (burnAmount > 0) {\\n            IERC20(token0).approve(address(pegSwap), burnAmount);\\n            pegSwap.swapToken0ForToken1(token0, chainID, burnAmount, msg.sender);\\n            _burnBoringToken(msg.sender, token0, chainID, to, burnAmount);\\n        }\\n        if (amount > out) {\\n            uint256 lockAmount = remainAmount.sub(burnAmount);\\n            emit Lock(token0, supportToken[token0][chainID], block.chainid, chainID, msg.sender, to, lockAmount);\\n        }\\n    }\\n\\n    function crossIn(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlyCrosser whenNotMinted(txid) {\\n        bool result = _vote(token0, from, to, amount, txid);\\n        if (result) {\\n            // mint token\\n            txMinted[txid] = true;\\n            address pair = pegSwap.getPair(token0, chainID);\\n            address borToken = IPegSwapPair(pair).token1();\\n            uint token0Amount = pegSwap.getMaxToken0AmountOut(token0, chainID);\\n            if (amount > token0Amount) {\\n                emit Rollback(token0, supportToken[token0][chainID], block.chainid, chainID, from, to, amount, txid);\\n            } else {\\n                IBoringToken(borToken).mint(address(this), amount);\\n                IBoringToken(borToken).approve(address(pegSwap), amount);\\n                pegSwap.swapToken1ForToken0(token0, chainID, amount, to);\\n            }\\n        }\\n    }\\n\\n    function rollback(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlySupportToken(token0, chainID) onlyCrosser whenNotRollbacked(txid) {\\n        bool result = _vote(token0, from, from, amount, txid);\\n        if (result) {\\n            txRollbacked[txid] = true;\\n            IERC20(token0).transfer(from, amount);\\n            emit Rollbacked(token0, from, amount, txid);\\n        }\\n    }\\n\\n    function unlock(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlySupportToken(token0, chainID) onlyCrosser whenNotUnlocked(txid) {\\n        bool result = _vote(token0, from, to, amount, txid);\\n        if (result) {\\n            txUnlocked[txid] = true;\\n            IERC20(token0).safeTransfer(to, amount);\\n            emit Unlock(token0, supportToken[token0][chainID], block.chainid, chainID, from, to, amount, txid);\\n        }\\n    }\\n\\n    function _burnBoringToken(\\n        address sender,\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        address pair = pegSwap.getPair(token0, chainID);\\n        address token1 = IPegSwapPair(pair).token1();\\n\\n        require(IERC20(token1).balanceOf(sender) >= amount, \\\"PegProxy: msg.sender not enough token to burn\\\");\\n\\n        IBoringToken(token1).burn(sender, amount);\\n        emit CrossBurn(token0, supportToken[token0][chainID], block.chainid, chainID,  sender, to, amount);\\n    }\\n\\n\\n    function burnBoringToken(\\n        address sender,\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) public onlySupportToken(token0, chainID) onlyPegSwap {\\n        _burnBoringToken(sender, token0, chainID, to, amount);\\n    }\\n\\n    //================ Setter ==================//\\n    function setThreshold(address token, uint256 _threshold) public onlyAdmin {\\n        _setThreshold(token, _threshold);\\n    }\\n\\n    function setPegSwap(address _pegSwap) public onlyAdmin {\\n        pegSwap = IPegSwap(_pegSwap);\\n    }\\n\\n    function addSupportToken(address token0, address token1, uint256 chainID) public onlyAdmin {\\n        require(supportToken[token0][chainID] == address(0), \\\"PegProxy: Toke already Supported\\\");\\n        supportToken[token0][chainID] = token1;\\n    }\\n\\n    function removeSupportToken(address token0, uint256 chainID) public onlyAdmin {\\n        require(supportToken[token0][chainID] != address(0), \\\"PegProxy: toke not supported\\\");\\n        delete supportToken[token0][chainID];\\n    }\\n\\n    function addSupportTokens(address[] memory token0s, address[] memory token1s, uint256[] memory chainIDs) public {\\n        require(token0s.length == token1s.length, \\\"PegProxy: token length not match\\\");\\n        require(token0s.length == chainIDs.length, \\\"PegProxy: chainIDs length not match\\\");\\n        for (uint256 i; i <token0s.length; i++) {\\n            addSupportToken(token0s[i], token1s[i], chainIDs[i]);\\n        }\\n    }\\n\\n    function removeSupportTokens(address[] memory token0s, uint256[] memory chainIDs) public {\\n        require(token0s.length == chainIDs.length, \\\"PegProxy: chainIDs length not match\\\");\\n        for (uint256 i; i < token0s.length; i++) {\\n            removeSupportToken(token0s[i], chainIDs[i]);\\n        }\\n    }\\n\\n    //================ Toll =====================//\\n    function addFeeTo(address token0, uint256 chainID, address account) external onlyAdmin {\\n        _addFeeTo(token0, chainID, account);\\n    }\\n\\n    function removeFeeTo(address token0, uint256 chainID, address account) external onlyAdmin {\\n        _removeFeeTo(token0, chainID, account);\\n    }\\n\\n    function setFee(address token0, uint256 chainID, uint256 feeAmount, uint256 feeRatio) external onlyAdmin {\\n        _setFee(token0, chainID, feeAmount, feeRatio);\\n    }\\n\\n    //================ Modifier =================//\\n    modifier onlySupportToken(address token, uint256 chainID) {\\n        require(supportToken[token][chainID] != address(0), \\\"PegProxy: not support this token\\\");\\n        _;\\n    }\\n\\n    modifier onlyPegSwap {\\n        require(msg.sender == address(pegSwap), \\\"PegSwap: caller is not pegSwap\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"PegProxy: caller is not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCrosser {\\n        require(hasRole(CROSSER_ROLE, msg.sender), \\\"PegProxy: caller is not crosser\\\");\\n        _;\\n    }\\n\\n    modifier whenNotMinted(string memory _txid) {\\n        require(txMinted[_txid] == false, \\\"PegProxy: tx minted\\\");\\n        _;\\n    }\\n\\n    modifier whenNotUnlocked(string memory _txid) {\\n        require(txUnlocked[_txid] == false, \\\"PegProxy: tx unlocked\\\");\\n        _;\\n    }\\n\\n    modifier whenNotRollbacked(string memory _txid) {\\n        require(txRollbacked[_txid] == false, \\\"PegProxy: tx rollbacked\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xde542a2fad02ea9654ca908ee66a8c9739b43d6ddcd47d1a927a2689bb9242fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b620000d9565b62000031828262000035565b5050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16620000315760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000953390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6134e280620000e96000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806381660f5d1161010f578063c86ec2bf116100a2578063df7e600a11610071578063df7e600a146104c4578063ee8a6acf146104d7578063f06410f8146104ea578063f8f8d5c0146104fd57600080fd5b8063c86ec2bf1461044a578063cf28f67c1461046a578063d547741f1461047d578063d692f4c51461049057600080fd5b80639d879990116100de5780639d879990146104095780639f391da11461041c578063a217fddf1461042f578063b33efbd51461043757600080fd5b806381660f5d146103a257806391d14854146103b5578063951f4b40146103c8578063967145af146103db57600080fd5b80632e6bef331161018757806353ad72e51161015657806353ad72e51461033857806356cf02d9146103665780636d05b2121461037c578063715ec45c1461038f57600080fd5b80632e6bef33146102d45780632f2ff15d146102ff578063336cbaa71461031257806336568abe1461032557600080fd5b806310c27402116101c357806310c274021461024f57806314681c841461027d5780631b322be414610290578063248a9ca3146102a357600080fd5b806301ffc9a7146101ea5780630324ef9c1461021257806303507ba51461023a575b600080fd5b6101fd6101f8366004612ee1565b610510565b60405190151581526020015b60405180910390f35b610225610220366004612d27565b610547565b60408051928352602083019190915201610209565b61024d610248366004612e19565b6105ae565b005b6101fd61025d366004612f09565b8051602081830181018051600a8252928201919093012091525460ff1681565b61024d61028b366004612aa9565b610653565b61024d61029e366004612ae1565b61069c565b6102c66102b1366004612e9a565b60009081526004602052604090206001015490565b604051908152602001610209565b6008546102e7906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b61024d61030d366004612eb2565b61076e565b6102e7610320366004612d27565b610794565b61024d610333366004612eb2565b6107c9565b6101fd610346366004612f09565b8051602081830181018051600c8252928201919093012091525460ff1681565b6102c66b43524f535345525f524f4c4560a01b81565b6102c661038a366004612b7b565b610847565b61024d61039d366004612be7565b61087a565b61024d6103b0366004612cb3565b610a35565b6101fd6103c3366004612eb2565b610c32565b61024d6103d6366004612ba6565b610c5d565b6101fd6103e9366004612f09565b8051602081830181018051600b8252928201919093012091525460ff1681565b61024d610417366004612b7b565b610c8f565b61024d61042a366004612ba6565b610cc0565b6102c6600081565b61024d610445366004612b21565b610cf2565b6102c6610458366004612aa9565b60006020819052908152604090205481565b61024d610478366004612be7565b610da8565b61024d61048b366004612eb2565b6111f2565b6102e761049e366004612b7b565b60096020908152600092835260408084209091529082529020546001600160a01b031681565b61024d6104d2366004612c6c565b611218565b61024d6104e5366004612d95565b6116ce565b61024d6104f8366004612d5b565b6117e4565b61024d61050b366004612b7b565b611817565b60006001600160e01b03198216637965db0b60e01b148061054157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0383166000818152600560209081526040808320868452825280832054938352600682528083208684529091528120549091829161058c85826118e3565b61059690836132b1565b93506105a284866133f3565b92505050935093915050565b80518251146105d85760405162461bcd60e51b81526004016105cf906131e2565b60405180910390fd5b60005b825181101561064e5761063c83828151811061060757634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061062f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611817565b806106468161344d565b9150506105db565b505050565b61065e600033610c32565b61067a5760405162461bcd60e51b81526004016105cf90613225565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6106a7600033610c32565b6106c35760405162461bcd60e51b81526004016105cf90613225565b6001600160a01b03838116600090815260096020908152604080832085845290915290205416156107365760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20546f6b6520616c726561647920537570706f7274656460448201526064016105cf565b6001600160a01b0392831660009081526009602090815260408083209383529290522080546001600160a01b03191691909216179055565b60008281526004602052604090206001015461078a8133611905565b61064e8383611969565b6001600160a01b038316600090815260076020908152604080832085845290915281206107c190836119ef565b949350505050565b6001600160a01b03811633146108395760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105cf565b61084382826119fb565b5050565b6001600160a01b0382166000908152600760209081526040808320848452909152812061087390611a62565b9392505050565b6001600160a01b03808716600090815260096020908152604080832089845290915290205487918791166108c05760405162461bcd60e51b81526004016105cf906131ad565b6108d96b43524f535345525f524f4c4560a01b33610c32565b6108f55760405162461bcd60e51b81526004016105cf90613176565b82600b816040516109069190612fd9565b9081526040519081900360200190205460ff161561095e5760405162461bcd60e51b8152602060048201526015602482015274141959d41c9bde1e4e881d1e081d5b9b1bd8dad959605a1b60448201526064016105cf565b600061096d8a89898989611a6c565b90508015610a29576001600b866040516109879190612fd9565b908152604051908190036020019020805491151560ff199092169190911790556109bb6001600160a01b038b168888611cf4565b6001600160a01b03808b1660009081526009602090815260408083208d8452909152908190205490517fe8a9cddb11d86358ad5c2fdd6359f0a6f41de0d399033319becf1364409dacbc92610a20928e9291169046908e908e908e908e908e906130e9565b60405180910390a15b50505050505050505050565b6001600160a01b0380861660009081526009602090815260408083208884529091529020548691869116610a7b5760405162461bcd60e51b81526004016105cf906131ad565b610a946b43524f535345525f524f4c4560a01b33610c32565b610ab05760405162461bcd60e51b81526004016105cf90613176565b82600c81604051610ac19190612fd9565b9081526040519081900360200190205460ff1615610b215760405162461bcd60e51b815260206004820152601760248201527f50656750726f78793a20747820726f6c6c6261636b656400000000000000000060448201526064016105cf565b6000610b308988898989611a6c565b90508015610c27576001600c86604051610b4a9190612fd9565b908152604051908190036020018120805492151560ff199093169290921790915563a9059cbb60e01b81526001600160a01b038a169063a9059cbb90610b96908a908a9060040161314a565b602060405180830381600087803b158015610bb057600080fd5b505af1158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190612e7a565b507f9420db1a0c5e4f45cc0dac05f17e8eb893645981e3c01e8d14120353a487d9e989888888604051610c1e949392919061306a565b60405180910390a15b505050505050505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c68600033610c32565b610c845760405162461bcd60e51b81526004016105cf90613225565b61064e838383611d4a565b610c9a600033610c32565b610cb65760405162461bcd60e51b81526004016105cf90613225565b6108438282611e4a565b610ccb600033610c32565b610ce75760405162461bcd60e51b81526004016105cf90613225565b61064e838383611ea6565b6001600160a01b0380851660009081526009602090815260408083208784529091529020548591859116610d385760405162461bcd60e51b81526004016105cf906131ad565b6008546001600160a01b03163314610d925760405162461bcd60e51b815260206004820152601e60248201527f506567537761703a2063616c6c6572206973206e6f742070656753776170000060448201526064016105cf565b610d9f8787878787611f99565b50505050505050565b610dc16b43524f535345525f524f4c4560a01b33610c32565b610ddd5760405162461bcd60e51b81526004016105cf90613176565b80600a81604051610dee9190612fd9565b9081526040519081900360200190205460ff1615610e445760405162461bcd60e51b8152602060048201526013602482015272141959d41c9bde1e4e881d1e081b5a5b9d1959606a1b60448201526064016105cf565b6000610e538887878787611a6c565b905080156111e8576001600a84604051610e6d9190612fd9565b908152604051908190036020018120805492151560ff1990931692909217909155600854626349fb60e01b82526000916001600160a01b0390911690626349fb90610ebe908c908c9060040161314a565b60206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190612ac5565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190612ac5565b60085460405163934ac70760e01b81529192506000916001600160a01b039091169063934ac70790610fbd908e908e9060040161314a565b60206040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612f3c565b905080871115611089576001600160a01b03808c1660009081526009602090815260408083208e8452909152908190205490517f56a316ee63540abb5f8fd44be7a6eb2016a90fc9bb3a34ffe13948a44c49a6169261107c928f9291169046908f908f908f908f908f906130e9565b60405180910390a16111e4565b6040516340c10f1960e01b81526001600160a01b038316906340c10f19906110b79030908b9060040161314a565b600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b505060085460405163095ea7b360e01b81526001600160a01b03808716945063095ea7b3935061111b9216908b9060040161314a565b602060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612e7a565b506008546040516340ec172360e01b81526001600160a01b038d81166004830152602482018d9052604482018a90528a81166064830152909116906340ec172390608401600060405180830381600087803b1580156111cb57600080fd5b505af11580156111df573d6000803e3d6000fd5b505050505b5050505b5050505050505050565b60008281526004602052604090206001015461120e8133611905565b61064e83836119fb565b6001600160a01b038085166000908152600960209081526040808320878452909152902054859185911661125e5760405162461bcd60e51b81526004016105cf906131ad565b600083116112be5760405162461bcd60e51b815260206004820152602760248201527f50656750726f78793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b60648201526084016105cf565b6001600160a01b03841661130c5760405162461bcd60e51b815260206004820152601560248201527450656750726f78793a20746f20697320656d70747960581b60448201526064016105cf565b60008061131a888887610547565b91509150600061132a8989610847565b905060005b818110156113f657896001600160a01b03166323b872dd336113528d8d86610794565b61135c86896132c9565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156113ab57600080fd5b505af11580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612e7a565b50806113ee8161344d565b91505061132f565b506040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038a16906323b872dd90606401602060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147d9190612e7a565b506008546040516356ecaeb760e01b81526000916001600160a01b0316906356ecaeb7906114b1908d908d9060040161314a565b60206040518083038186803b1580156114c957600080fd5b505afa1580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190612f3c565b9050600061150f8483612246565b9050801561161e5760085460405163095ea7b360e01b81526001600160a01b038d81169263095ea7b39261154b9290911690859060040161314a565b602060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d9190612e7a565b506008546040516313fcb20160e21b81526001600160a01b038d81166004830152602482018d90526044820184905233606483015290911690634ff2c80490608401600060405180830381600087803b1580156115f957600080fd5b505af115801561160d573d6000803e3d6000fd5b5050505061161e338c8c8c85611f99565b818811156111e4576000611632858361225c565b90507f7cb5e2d54d5587c3a3448631884061009b0e2c30e37922a4dd4aed50e11dd7f38c600960008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060009054906101000a90046001600160a01b0316468e338f876040516116b897969594939291906130a7565b60405180910390a1505050505050505050505050565b815183511461171f5760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20746f6b656e206c656e677468206e6f74206d6174636860448201526064016105cf565b80518351146117405760405162461bcd60e51b81526004016105cf906131e2565b60005b83518110156117de576117cc84828151811061176f57634e487b7160e01b600052603260045260246000fd5b602002602001015184838151811061179757634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106117bf57634e487b7160e01b600052603260045260246000fd5b602002602001015161069c565b806117d68161344d565b915050611743565b50505050565b6117ef600033610c32565b61180b5760405162461bcd60e51b81526004016105cf90613225565b6117de84848484612268565b611822600033610c32565b61183e5760405162461bcd60e51b81526004016105cf90613225565b6001600160a01b038281166000908152600960209081526040808320858452909152902054166118b05760405162461bcd60e51b815260206004820152601c60248201527f50656750726f78793a20746f6b65206e6f7420737570706f727465640000000060448201526064016105cf565b6001600160a01b0390911660009081526009602090815260408083209383529290522080546001600160a01b0319169055565b60006118f16012600a61332c565b6118fb848461233d565b61087391906132c9565b61190f8282610c32565b61084357611927816001600160a01b03166014612349565b611932836020612349565b604051602001611943929190612ff5565b60408051601f198184030181529082905262461bcd60e51b82526105cf91600401613163565b6119738282610c32565b6108435760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119ab3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610873838361252b565b611a058282610c32565b156108435760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610541825490565b6001600160a01b038516600090815260208190526040812054611aea5760405162461bcd60e51b815260206004820152603060248201527f50726f706f73616c566f74653a207468726573686f6c642073686f756c64206260448201526f0652067726561746572207468616e20360841b60648201526084016105cf565b6001600160a01b038616600090815260208181526040808320549051909291611b1d918a918a918a918a918a9101612f80565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff1615611b955760405162461bcd60e51b815260206004820152601860248201527f5f766f74653a3a70726f706f73616c2066696e6973686564000000000000000060448201526064016105cf565b600081815260026020908152604080832033845290915290205460ff1615611bff5760405162461bcd60e51b815260206004820152601760248201527f5f766f74653a3a6d73672e73656e64657220766f74656400000000000000000060448201526064016105cf565b600081815260036020526040902054611c19906001612563565b60008281526003602081815260408084209485556002825280842033855282528320805460ff19166001179055918490529052548211611c71576000818152600160208190526040909120805460ff19168217905592505b6000818152600360209081526040918290205482516001600160a01b038c811682528b811693820193909352918916828401526060820188905233608083015260a082015260c0810184905290517fe458477b94285c9f254a407e2614c39f55230b527ff7f51d76fdf33e251ae9369181900360e00190a1505095945050505050565b61064e8363a9059cbb60e01b8484604051602401611d1392919061314a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261256f565b6001600160a01b03831660009081526007602090815260408083208584529091529020611d779082612641565b1515600114611dc85760405162461bcd60e51b815260206004820152601a60248201527f546f6c6c3a3a6163636f756e74206973206e6f7420666565546f00000000000060448201526064016105cf565b6001600160a01b03831660009081526007602090815260408083208584529091529020611df59082612663565b50604080516001600160a01b038086168252602082018590528316918101919091527f47ed70551b214b8794c1a97dea263c5d1cf3d03ea32f3d62333cc54035f57039906060015b60405180910390a1505050565b6001600160a01b038216600081815260208181526040918290208054908590558251938452908301819052908201839052907fb18e91516e037486aa6fa38f56a8aac933fd127180efe9c9745ecbf660a78e4490606001611e3d565b6001600160a01b03831660009081526007602090815260408083208584529091529020611ed39082612641565b15611f205760405162461bcd60e51b815260206004820152601f60248201527f546f6c6c3a3a6163636f756e742077617320666565546f20616c72656164790060448201526064016105cf565b6001600160a01b03831660009081526007602090815260408083208584529091529020611f4d9082612678565b50604080516001600160a01b038086168252602082018590528316918101919091527fe9616fb79eb127156fd126bed0d80aee08f9490b152f4aaeae629569f5d0e52290606001611e3d565b600854604051626349fb60e01b81526000916001600160a01b031690626349fb90611fca908890889060040161314a565b60206040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190612ac5565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190612ac5565b6040516370a0823160e01b81526001600160a01b03898116600483015291925084918316906370a082319060240160206040518083038186803b1580156120d757600080fd5b505afa1580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f9190612f3c565b10156121735760405162461bcd60e51b815260206004820152602d60248201527f50656750726f78793a206d73672e73656e646572206e6f7420656e6f7567682060448201526c3a37b5b2b7103a3790313ab93760991b60648201526084016105cf565b604051632770a7eb60e21b81526001600160a01b03821690639dc29fac906121a1908a90879060040161314a565b600060405180830381600087803b1580156121bb57600080fd5b505af11580156121cf573d6000803e3d6000fd5b5050506001600160a01b0380881660009081526009602090815260408083208a8452909152908190205490517f79aee25f54411be6ea1ab53c9d3cc3e245c301d481091deda6343da926932c0c9350612235928a92169046908a908d908b908b906130a7565b60405180910390a150505050505050565b60008183106122555781610873565b5090919050565b600061087382846133f3565b670de0b6b3a76400008111156122b85760405162461bcd60e51b8152602060048201526015602482015274199959481c985d1a5bc81b9bdd0818dbdc9c9958dd605a1b60448201526064016105cf565b6001600160a01b0384166000818152600560209081526040808320878452825280832086905583835260068252808320878452825291829020849055815192835282018590528101839052606081018290527fe7de0268825882caac9be515100046b260e4bb88ef28dcf7e4d99a3b9b7537829060800160405180910390a150505050565b600061087382846133d4565b606060006123588360026133d4565b6123639060026132b1565b67ffffffffffffffff81111561238957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123b3576020820181803683370190505b509050600360fc1b816000815181106123dc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061241957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061243d8460026133d4565b6124489060016132b1565b90505b60018111156124dc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061248a57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124ae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124d581613436565b905061244b565b5083156108735760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105cf565b600082600001828154811061255057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600061087382846132b1565b60006125c4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661268d9092919063ffffffff16565b80519091501561064e57808060200190518101906125e29190612e7a565b61064e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105cf565b6001600160a01b03811660009081526001830160205260408120541515610873565b6000610873836001600160a01b03841661269c565b6000610873836001600160a01b0384166127b9565b60606107c18484600085612808565b600081815260018301602052604081205480156127af5760006126c06001836133f3565b85549091506000906126d4906001906133f3565b905081811461275557600086600001828154811061270257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061273357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061277457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610541565b6000915050610541565b600081815260018301602052604081205461280057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610541565b506000610541565b6060824710156128695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105cf565b843b6128b75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105cf565b600080866001600160a01b031685876040516128d39190612fd9565b60006040518083038185875af1925050503d8060008114612910576040519150601f19603f3d011682016040523d82523d6000602084013e612915565b606091505b5091509150612925828286612930565b979650505050505050565b6060831561293f575081610873565b82511561294f5782518084602001fd5b8160405162461bcd60e51b81526004016105cf9190613163565b600082601f830112612979578081fd5b8135602061298e6129898361328d565b61325c565b80838252828201915082860187848660051b89010111156129ad578586fd5b855b858110156129d45781356129c281613494565b845292840192908401906001016129af565b5090979650505050505050565b600082601f8301126129f1578081fd5b81356020612a016129898361328d565b80838252828201915082860187848660051b8901011115612a20578586fd5b855b858110156129d457813584529284019290840190600101612a22565b600082601f830112612a4e578081fd5b813567ffffffffffffffff811115612a6857612a6861347e565b612a7b601f8201601f191660200161325c565b818152846020838601011115612a8f578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612aba578081fd5b813561087381613494565b600060208284031215612ad6578081fd5b815161087381613494565b600080600060608486031215612af5578182fd5b8335612b0081613494565b92506020840135612b1081613494565b929592945050506040919091013590565b600080600080600060a08688031215612b38578081fd5b8535612b4381613494565b94506020860135612b5381613494565b9350604086013592506060860135612b6a81613494565b949793965091946080013592915050565b60008060408385031215612b8d578182fd5b8235612b9881613494565b946020939093013593505050565b600080600060608486031215612bba578283fd5b8335612bc581613494565b9250602084013591506040840135612bdc81613494565b809150509250925092565b60008060008060008060c08789031215612bff578081fd5b8635612c0a81613494565b9550602087013594506040870135612c2181613494565b93506060870135612c3181613494565b92506080870135915060a087013567ffffffffffffffff811115612c53578182fd5b612c5f89828a01612a3e565b9150509295509295509295565b60008060008060808587031215612c81578384fd5b8435612c8c81613494565b9350602085013592506040850135612ca381613494565b9396929550929360600135925050565b600080600080600060a08688031215612cca578283fd5b8535612cd581613494565b9450602086013593506040860135612cec81613494565b925060608601359150608086013567ffffffffffffffff811115612d0e578182fd5b612d1a88828901612a3e565b9150509295509295909350565b600080600060608486031215612d3b578081fd5b8335612d4681613494565b95602085013595506040909401359392505050565b60008060008060808587031215612d70578182fd5b8435612d7b81613494565b966020860135965060408601359560600135945092505050565b600080600060608486031215612da9578081fd5b833567ffffffffffffffff80821115612dc0578283fd5b612dcc87838801612969565b94506020860135915080821115612de1578283fd5b612ded87838801612969565b93506040860135915080821115612e02578283fd5b50612e0f868287016129e1565b9150509250925092565b60008060408385031215612e2b578182fd5b823567ffffffffffffffff80821115612e42578384fd5b612e4e86838701612969565b93506020850135915080821115612e63578283fd5b50612e70858286016129e1565b9150509250929050565b600060208284031215612e8b578081fd5b81518015158114610873578182fd5b600060208284031215612eab578081fd5b5035919050565b60008060408385031215612ec4578182fd5b823591506020830135612ed681613494565b809150509250929050565b600060208284031215612ef2578081fd5b81356001600160e01b031981168114610873578182fd5b600060208284031215612f1a578081fd5b813567ffffffffffffffff811115612f30578182fd5b6107c184828501612a3e565b600060208284031215612f4d578081fd5b5051919050565b60008151808452612f6c81602086016020860161340a565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b166014840152808660601b1660288401525083603c8301528251612fc881605c85016020870161340a565b91909101605c019695505050505050565b60008251612feb81846020870161340a565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161302d81601785016020880161340a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161305e81602884016020880161340a565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061309d90830184612f54565b9695505050505050565b6001600160a01b0397881681529587166020870152604086019490945260608501929092528416608084015290921660a082015260c081019190915260e00190565b6001600160a01b038981168252888116602083015260408201889052606082018790528581166080830152841660a082015260c0810183905261010060e0820181905260009061313b83820185612f54565b9b9a5050505050505050505050565b6001600160a01b03929092168252602082015260400190565b6020815260006108736020830184612f54565b6020808252601f908201527f50656750726f78793a2063616c6c6572206973206e6f742063726f7373657200604082015260600190565b6020808252818101527f50656750726f78793a206e6f7420737570706f7274207468697320746f6b656e604082015260600190565b60208082526023908201527f50656750726f78793a20636861696e494473206c656e677468206e6f74206d616040820152620e8c6d60eb1b606082015260800190565b6020808252601d908201527f50656750726f78793a2063616c6c6572206973206e6f742061646d696e000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156132855761328561347e565b604052919050565b600067ffffffffffffffff8211156132a7576132a761347e565b5060051b60200190565b600082198211156132c4576132c4613468565b500190565b6000826132e457634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561332457816000190482111561330a5761330a613468565b8085161561331757918102915b93841c93908002906132ee565b509250929050565b6000610873838360008261334257506001610541565b8161334f57506000610541565b8160018114613365576002811461336f5761338b565b6001915050610541565b60ff84111561338057613380613468565b50506001821b610541565b5060208310610133831016604e8410600b84101617156133ae575081810a610541565b6133b883836132e9565b80600019048211156133cc576133cc613468565b029392505050565b60008160001904831182151516156133ee576133ee613468565b500290565b60008282101561340557613405613468565b500390565b60005b8381101561342557818101518382015260200161340d565b838111156117de5750506000910152565b60008161344557613445613468565b506000190190565b600060001982141561346157613461613468565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146134a957600080fd5b5056fea26469706673582212200d075390e8a14c33f049c7e56771340d24a9b60a8824d9f61ed6aebeab0139bb64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806381660f5d1161010f578063c86ec2bf116100a2578063df7e600a11610071578063df7e600a146104c4578063ee8a6acf146104d7578063f06410f8146104ea578063f8f8d5c0146104fd57600080fd5b8063c86ec2bf1461044a578063cf28f67c1461046a578063d547741f1461047d578063d692f4c51461049057600080fd5b80639d879990116100de5780639d879990146104095780639f391da11461041c578063a217fddf1461042f578063b33efbd51461043757600080fd5b806381660f5d146103a257806391d14854146103b5578063951f4b40146103c8578063967145af146103db57600080fd5b80632e6bef331161018757806353ad72e51161015657806353ad72e51461033857806356cf02d9146103665780636d05b2121461037c578063715ec45c1461038f57600080fd5b80632e6bef33146102d45780632f2ff15d146102ff578063336cbaa71461031257806336568abe1461032557600080fd5b806310c27402116101c357806310c274021461024f57806314681c841461027d5780631b322be414610290578063248a9ca3146102a357600080fd5b806301ffc9a7146101ea5780630324ef9c1461021257806303507ba51461023a575b600080fd5b6101fd6101f8366004612ee1565b610510565b60405190151581526020015b60405180910390f35b610225610220366004612d27565b610547565b60408051928352602083019190915201610209565b61024d610248366004612e19565b6105ae565b005b6101fd61025d366004612f09565b8051602081830181018051600a8252928201919093012091525460ff1681565b61024d61028b366004612aa9565b610653565b61024d61029e366004612ae1565b61069c565b6102c66102b1366004612e9a565b60009081526004602052604090206001015490565b604051908152602001610209565b6008546102e7906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b61024d61030d366004612eb2565b61076e565b6102e7610320366004612d27565b610794565b61024d610333366004612eb2565b6107c9565b6101fd610346366004612f09565b8051602081830181018051600c8252928201919093012091525460ff1681565b6102c66b43524f535345525f524f4c4560a01b81565b6102c661038a366004612b7b565b610847565b61024d61039d366004612be7565b61087a565b61024d6103b0366004612cb3565b610a35565b6101fd6103c3366004612eb2565b610c32565b61024d6103d6366004612ba6565b610c5d565b6101fd6103e9366004612f09565b8051602081830181018051600b8252928201919093012091525460ff1681565b61024d610417366004612b7b565b610c8f565b61024d61042a366004612ba6565b610cc0565b6102c6600081565b61024d610445366004612b21565b610cf2565b6102c6610458366004612aa9565b60006020819052908152604090205481565b61024d610478366004612be7565b610da8565b61024d61048b366004612eb2565b6111f2565b6102e761049e366004612b7b565b60096020908152600092835260408084209091529082529020546001600160a01b031681565b61024d6104d2366004612c6c565b611218565b61024d6104e5366004612d95565b6116ce565b61024d6104f8366004612d5b565b6117e4565b61024d61050b366004612b7b565b611817565b60006001600160e01b03198216637965db0b60e01b148061054157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0383166000818152600560209081526040808320868452825280832054938352600682528083208684529091528120549091829161058c85826118e3565b61059690836132b1565b93506105a284866133f3565b92505050935093915050565b80518251146105d85760405162461bcd60e51b81526004016105cf906131e2565b60405180910390fd5b60005b825181101561064e5761063c83828151811061060757634e487b7160e01b600052603260045260246000fd5b602002602001015183838151811061062f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611817565b806106468161344d565b9150506105db565b505050565b61065e600033610c32565b61067a5760405162461bcd60e51b81526004016105cf90613225565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6106a7600033610c32565b6106c35760405162461bcd60e51b81526004016105cf90613225565b6001600160a01b03838116600090815260096020908152604080832085845290915290205416156107365760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20546f6b6520616c726561647920537570706f7274656460448201526064016105cf565b6001600160a01b0392831660009081526009602090815260408083209383529290522080546001600160a01b03191691909216179055565b60008281526004602052604090206001015461078a8133611905565b61064e8383611969565b6001600160a01b038316600090815260076020908152604080832085845290915281206107c190836119ef565b949350505050565b6001600160a01b03811633146108395760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105cf565b61084382826119fb565b5050565b6001600160a01b0382166000908152600760209081526040808320848452909152812061087390611a62565b9392505050565b6001600160a01b03808716600090815260096020908152604080832089845290915290205487918791166108c05760405162461bcd60e51b81526004016105cf906131ad565b6108d96b43524f535345525f524f4c4560a01b33610c32565b6108f55760405162461bcd60e51b81526004016105cf90613176565b82600b816040516109069190612fd9565b9081526040519081900360200190205460ff161561095e5760405162461bcd60e51b8152602060048201526015602482015274141959d41c9bde1e4e881d1e081d5b9b1bd8dad959605a1b60448201526064016105cf565b600061096d8a89898989611a6c565b90508015610a29576001600b866040516109879190612fd9565b908152604051908190036020019020805491151560ff199092169190911790556109bb6001600160a01b038b168888611cf4565b6001600160a01b03808b1660009081526009602090815260408083208d8452909152908190205490517fe8a9cddb11d86358ad5c2fdd6359f0a6f41de0d399033319becf1364409dacbc92610a20928e9291169046908e908e908e908e908e906130e9565b60405180910390a15b50505050505050505050565b6001600160a01b0380861660009081526009602090815260408083208884529091529020548691869116610a7b5760405162461bcd60e51b81526004016105cf906131ad565b610a946b43524f535345525f524f4c4560a01b33610c32565b610ab05760405162461bcd60e51b81526004016105cf90613176565b82600c81604051610ac19190612fd9565b9081526040519081900360200190205460ff1615610b215760405162461bcd60e51b815260206004820152601760248201527f50656750726f78793a20747820726f6c6c6261636b656400000000000000000060448201526064016105cf565b6000610b308988898989611a6c565b90508015610c27576001600c86604051610b4a9190612fd9565b908152604051908190036020018120805492151560ff199093169290921790915563a9059cbb60e01b81526001600160a01b038a169063a9059cbb90610b96908a908a9060040161314a565b602060405180830381600087803b158015610bb057600080fd5b505af1158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190612e7a565b507f9420db1a0c5e4f45cc0dac05f17e8eb893645981e3c01e8d14120353a487d9e989888888604051610c1e949392919061306a565b60405180910390a15b505050505050505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610c68600033610c32565b610c845760405162461bcd60e51b81526004016105cf90613225565b61064e838383611d4a565b610c9a600033610c32565b610cb65760405162461bcd60e51b81526004016105cf90613225565b6108438282611e4a565b610ccb600033610c32565b610ce75760405162461bcd60e51b81526004016105cf90613225565b61064e838383611ea6565b6001600160a01b0380851660009081526009602090815260408083208784529091529020548591859116610d385760405162461bcd60e51b81526004016105cf906131ad565b6008546001600160a01b03163314610d925760405162461bcd60e51b815260206004820152601e60248201527f506567537761703a2063616c6c6572206973206e6f742070656753776170000060448201526064016105cf565b610d9f8787878787611f99565b50505050505050565b610dc16b43524f535345525f524f4c4560a01b33610c32565b610ddd5760405162461bcd60e51b81526004016105cf90613176565b80600a81604051610dee9190612fd9565b9081526040519081900360200190205460ff1615610e445760405162461bcd60e51b8152602060048201526013602482015272141959d41c9bde1e4e881d1e081b5a5b9d1959606a1b60448201526064016105cf565b6000610e538887878787611a6c565b905080156111e8576001600a84604051610e6d9190612fd9565b908152604051908190036020018120805492151560ff1990931692909217909155600854626349fb60e01b82526000916001600160a01b0390911690626349fb90610ebe908c908c9060040161314a565b60206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190612ac5565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190612ac5565b60085460405163934ac70760e01b81529192506000916001600160a01b039091169063934ac70790610fbd908e908e9060040161314a565b60206040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190612f3c565b905080871115611089576001600160a01b03808c1660009081526009602090815260408083208e8452909152908190205490517f56a316ee63540abb5f8fd44be7a6eb2016a90fc9bb3a34ffe13948a44c49a6169261107c928f9291169046908f908f908f908f908f906130e9565b60405180910390a16111e4565b6040516340c10f1960e01b81526001600160a01b038316906340c10f19906110b79030908b9060040161314a565b600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b505060085460405163095ea7b360e01b81526001600160a01b03808716945063095ea7b3935061111b9216908b9060040161314a565b602060405180830381600087803b15801561113557600080fd5b505af1158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612e7a565b506008546040516340ec172360e01b81526001600160a01b038d81166004830152602482018d9052604482018a90528a81166064830152909116906340ec172390608401600060405180830381600087803b1580156111cb57600080fd5b505af11580156111df573d6000803e3d6000fd5b505050505b5050505b5050505050505050565b60008281526004602052604090206001015461120e8133611905565b61064e83836119fb565b6001600160a01b038085166000908152600960209081526040808320878452909152902054859185911661125e5760405162461bcd60e51b81526004016105cf906131ad565b600083116112be5760405162461bcd60e51b815260206004820152602760248201527f50656750726f78793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b60648201526084016105cf565b6001600160a01b03841661130c5760405162461bcd60e51b815260206004820152601560248201527450656750726f78793a20746f20697320656d70747960581b60448201526064016105cf565b60008061131a888887610547565b91509150600061132a8989610847565b905060005b818110156113f657896001600160a01b03166323b872dd336113528d8d86610794565b61135c86896132c9565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156113ab57600080fd5b505af11580156113bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e39190612e7a565b50806113ee8161344d565b91505061132f565b506040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038a16906323b872dd90606401602060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147d9190612e7a565b506008546040516356ecaeb760e01b81526000916001600160a01b0316906356ecaeb7906114b1908d908d9060040161314a565b60206040518083038186803b1580156114c957600080fd5b505afa1580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190612f3c565b9050600061150f8483612246565b9050801561161e5760085460405163095ea7b360e01b81526001600160a01b038d81169263095ea7b39261154b9290911690859060040161314a565b602060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d9190612e7a565b506008546040516313fcb20160e21b81526001600160a01b038d81166004830152602482018d90526044820184905233606483015290911690634ff2c80490608401600060405180830381600087803b1580156115f957600080fd5b505af115801561160d573d6000803e3d6000fd5b5050505061161e338c8c8c85611f99565b818811156111e4576000611632858361225c565b90507f7cb5e2d54d5587c3a3448631884061009b0e2c30e37922a4dd4aed50e11dd7f38c600960008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060009054906101000a90046001600160a01b0316468e338f876040516116b897969594939291906130a7565b60405180910390a1505050505050505050505050565b815183511461171f5760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20746f6b656e206c656e677468206e6f74206d6174636860448201526064016105cf565b80518351146117405760405162461bcd60e51b81526004016105cf906131e2565b60005b83518110156117de576117cc84828151811061176f57634e487b7160e01b600052603260045260246000fd5b602002602001015184838151811061179757634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106117bf57634e487b7160e01b600052603260045260246000fd5b602002602001015161069c565b806117d68161344d565b915050611743565b50505050565b6117ef600033610c32565b61180b5760405162461bcd60e51b81526004016105cf90613225565b6117de84848484612268565b611822600033610c32565b61183e5760405162461bcd60e51b81526004016105cf90613225565b6001600160a01b038281166000908152600960209081526040808320858452909152902054166118b05760405162461bcd60e51b815260206004820152601c60248201527f50656750726f78793a20746f6b65206e6f7420737570706f727465640000000060448201526064016105cf565b6001600160a01b0390911660009081526009602090815260408083209383529290522080546001600160a01b0319169055565b60006118f16012600a61332c565b6118fb848461233d565b61087391906132c9565b61190f8282610c32565b61084357611927816001600160a01b03166014612349565b611932836020612349565b604051602001611943929190612ff5565b60408051601f198184030181529082905262461bcd60e51b82526105cf91600401613163565b6119738282610c32565b6108435760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119ab3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610873838361252b565b611a058282610c32565b156108435760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610541825490565b6001600160a01b038516600090815260208190526040812054611aea5760405162461bcd60e51b815260206004820152603060248201527f50726f706f73616c566f74653a207468726573686f6c642073686f756c64206260448201526f0652067726561746572207468616e20360841b60648201526084016105cf565b6001600160a01b038616600090815260208181526040808320549051909291611b1d918a918a918a918a918a9101612f80565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff1615611b955760405162461bcd60e51b815260206004820152601860248201527f5f766f74653a3a70726f706f73616c2066696e6973686564000000000000000060448201526064016105cf565b600081815260026020908152604080832033845290915290205460ff1615611bff5760405162461bcd60e51b815260206004820152601760248201527f5f766f74653a3a6d73672e73656e64657220766f74656400000000000000000060448201526064016105cf565b600081815260036020526040902054611c19906001612563565b60008281526003602081815260408084209485556002825280842033855282528320805460ff19166001179055918490529052548211611c71576000818152600160208190526040909120805460ff19168217905592505b6000818152600360209081526040918290205482516001600160a01b038c811682528b811693820193909352918916828401526060820188905233608083015260a082015260c0810184905290517fe458477b94285c9f254a407e2614c39f55230b527ff7f51d76fdf33e251ae9369181900360e00190a1505095945050505050565b61064e8363a9059cbb60e01b8484604051602401611d1392919061314a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261256f565b6001600160a01b03831660009081526007602090815260408083208584529091529020611d779082612641565b1515600114611dc85760405162461bcd60e51b815260206004820152601a60248201527f546f6c6c3a3a6163636f756e74206973206e6f7420666565546f00000000000060448201526064016105cf565b6001600160a01b03831660009081526007602090815260408083208584529091529020611df59082612663565b50604080516001600160a01b038086168252602082018590528316918101919091527f47ed70551b214b8794c1a97dea263c5d1cf3d03ea32f3d62333cc54035f57039906060015b60405180910390a1505050565b6001600160a01b038216600081815260208181526040918290208054908590558251938452908301819052908201839052907fb18e91516e037486aa6fa38f56a8aac933fd127180efe9c9745ecbf660a78e4490606001611e3d565b6001600160a01b03831660009081526007602090815260408083208584529091529020611ed39082612641565b15611f205760405162461bcd60e51b815260206004820152601f60248201527f546f6c6c3a3a6163636f756e742077617320666565546f20616c72656164790060448201526064016105cf565b6001600160a01b03831660009081526007602090815260408083208584529091529020611f4d9082612678565b50604080516001600160a01b038086168252602082018590528316918101919091527fe9616fb79eb127156fd126bed0d80aee08f9490b152f4aaeae629569f5d0e52290606001611e3d565b600854604051626349fb60e01b81526000916001600160a01b031690626349fb90611fca908890889060040161314a565b60206040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190612ac5565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190612ac5565b6040516370a0823160e01b81526001600160a01b03898116600483015291925084918316906370a082319060240160206040518083038186803b1580156120d757600080fd5b505afa1580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f9190612f3c565b10156121735760405162461bcd60e51b815260206004820152602d60248201527f50656750726f78793a206d73672e73656e646572206e6f7420656e6f7567682060448201526c3a37b5b2b7103a3790313ab93760991b60648201526084016105cf565b604051632770a7eb60e21b81526001600160a01b03821690639dc29fac906121a1908a90879060040161314a565b600060405180830381600087803b1580156121bb57600080fd5b505af11580156121cf573d6000803e3d6000fd5b5050506001600160a01b0380881660009081526009602090815260408083208a8452909152908190205490517f79aee25f54411be6ea1ab53c9d3cc3e245c301d481091deda6343da926932c0c9350612235928a92169046908a908d908b908b906130a7565b60405180910390a150505050505050565b60008183106122555781610873565b5090919050565b600061087382846133f3565b670de0b6b3a76400008111156122b85760405162461bcd60e51b8152602060048201526015602482015274199959481c985d1a5bc81b9bdd0818dbdc9c9958dd605a1b60448201526064016105cf565b6001600160a01b0384166000818152600560209081526040808320878452825280832086905583835260068252808320878452825291829020849055815192835282018590528101839052606081018290527fe7de0268825882caac9be515100046b260e4bb88ef28dcf7e4d99a3b9b7537829060800160405180910390a150505050565b600061087382846133d4565b606060006123588360026133d4565b6123639060026132b1565b67ffffffffffffffff81111561238957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123b3576020820181803683370190505b509050600360fc1b816000815181106123dc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061241957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061243d8460026133d4565b6124489060016132b1565b90505b60018111156124dc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061248a57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106124ae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124d581613436565b905061244b565b5083156108735760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105cf565b600082600001828154811061255057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600061087382846132b1565b60006125c4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661268d9092919063ffffffff16565b80519091501561064e57808060200190518101906125e29190612e7a565b61064e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105cf565b6001600160a01b03811660009081526001830160205260408120541515610873565b6000610873836001600160a01b03841661269c565b6000610873836001600160a01b0384166127b9565b60606107c18484600085612808565b600081815260018301602052604081205480156127af5760006126c06001836133f3565b85549091506000906126d4906001906133f3565b905081811461275557600086600001828154811061270257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061273357634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061277457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610541565b6000915050610541565b600081815260018301602052604081205461280057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610541565b506000610541565b6060824710156128695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105cf565b843b6128b75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105cf565b600080866001600160a01b031685876040516128d39190612fd9565b60006040518083038185875af1925050503d8060008114612910576040519150601f19603f3d011682016040523d82523d6000602084013e612915565b606091505b5091509150612925828286612930565b979650505050505050565b6060831561293f575081610873565b82511561294f5782518084602001fd5b8160405162461bcd60e51b81526004016105cf9190613163565b600082601f830112612979578081fd5b8135602061298e6129898361328d565b61325c565b80838252828201915082860187848660051b89010111156129ad578586fd5b855b858110156129d45781356129c281613494565b845292840192908401906001016129af565b5090979650505050505050565b600082601f8301126129f1578081fd5b81356020612a016129898361328d565b80838252828201915082860187848660051b8901011115612a20578586fd5b855b858110156129d457813584529284019290840190600101612a22565b600082601f830112612a4e578081fd5b813567ffffffffffffffff811115612a6857612a6861347e565b612a7b601f8201601f191660200161325c565b818152846020838601011115612a8f578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612aba578081fd5b813561087381613494565b600060208284031215612ad6578081fd5b815161087381613494565b600080600060608486031215612af5578182fd5b8335612b0081613494565b92506020840135612b1081613494565b929592945050506040919091013590565b600080600080600060a08688031215612b38578081fd5b8535612b4381613494565b94506020860135612b5381613494565b9350604086013592506060860135612b6a81613494565b949793965091946080013592915050565b60008060408385031215612b8d578182fd5b8235612b9881613494565b946020939093013593505050565b600080600060608486031215612bba578283fd5b8335612bc581613494565b9250602084013591506040840135612bdc81613494565b809150509250925092565b60008060008060008060c08789031215612bff578081fd5b8635612c0a81613494565b9550602087013594506040870135612c2181613494565b93506060870135612c3181613494565b92506080870135915060a087013567ffffffffffffffff811115612c53578182fd5b612c5f89828a01612a3e565b9150509295509295509295565b60008060008060808587031215612c81578384fd5b8435612c8c81613494565b9350602085013592506040850135612ca381613494565b9396929550929360600135925050565b600080600080600060a08688031215612cca578283fd5b8535612cd581613494565b9450602086013593506040860135612cec81613494565b925060608601359150608086013567ffffffffffffffff811115612d0e578182fd5b612d1a88828901612a3e565b9150509295509295909350565b600080600060608486031215612d3b578081fd5b8335612d4681613494565b95602085013595506040909401359392505050565b60008060008060808587031215612d70578182fd5b8435612d7b81613494565b966020860135965060408601359560600135945092505050565b600080600060608486031215612da9578081fd5b833567ffffffffffffffff80821115612dc0578283fd5b612dcc87838801612969565b94506020860135915080821115612de1578283fd5b612ded87838801612969565b93506040860135915080821115612e02578283fd5b50612e0f868287016129e1565b9150509250925092565b60008060408385031215612e2b578182fd5b823567ffffffffffffffff80821115612e42578384fd5b612e4e86838701612969565b93506020850135915080821115612e63578283fd5b50612e70858286016129e1565b9150509250929050565b600060208284031215612e8b578081fd5b81518015158114610873578182fd5b600060208284031215612eab578081fd5b5035919050565b60008060408385031215612ec4578182fd5b823591506020830135612ed681613494565b809150509250929050565b600060208284031215612ef2578081fd5b81356001600160e01b031981168114610873578182fd5b600060208284031215612f1a578081fd5b813567ffffffffffffffff811115612f30578182fd5b6107c184828501612a3e565b600060208284031215612f4d578081fd5b5051919050565b60008151808452612f6c81602086016020860161340a565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b166014840152808660601b1660288401525083603c8301528251612fc881605c85016020870161340a565b91909101605c019695505050505050565b60008251612feb81846020870161340a565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161302d81601785016020880161340a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161305e81602884016020880161340a565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061309d90830184612f54565b9695505050505050565b6001600160a01b0397881681529587166020870152604086019490945260608501929092528416608084015290921660a082015260c081019190915260e00190565b6001600160a01b038981168252888116602083015260408201889052606082018790528581166080830152841660a082015260c0810183905261010060e0820181905260009061313b83820185612f54565b9b9a5050505050505050505050565b6001600160a01b03929092168252602082015260400190565b6020815260006108736020830184612f54565b6020808252601f908201527f50656750726f78793a2063616c6c6572206973206e6f742063726f7373657200604082015260600190565b6020808252818101527f50656750726f78793a206e6f7420737570706f7274207468697320746f6b656e604082015260600190565b60208082526023908201527f50656750726f78793a20636861696e494473206c656e677468206e6f74206d616040820152620e8c6d60eb1b606082015260800190565b6020808252601d908201527f50656750726f78793a2063616c6c6572206973206e6f742061646d696e000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156132855761328561347e565b604052919050565b600067ffffffffffffffff8211156132a7576132a761347e565b5060051b60200190565b600082198211156132c4576132c4613468565b500190565b6000826132e457634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561332457816000190482111561330a5761330a613468565b8085161561331757918102915b93841c93908002906132ee565b509250929050565b6000610873838360008261334257506001610541565b8161334f57506000610541565b8160018114613365576002811461336f5761338b565b6001915050610541565b60ff84111561338057613380613468565b50506001821b610541565b5060208310610133831016604e8410600b84101617156133ae575081810a610541565b6133b883836132e9565b80600019048211156133cc576133cc613468565b029392505050565b60008160001904831182151516156133ee576133ee613468565b500290565b60008282101561340557613405613468565b500390565b60005b8381101561342557818101518382015260200161340d565b838111156117de5750506000910152565b60008161344557613445613468565b506000190190565b600060001982141561346157613461613468565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146134a957600080fd5b5056fea26469706673582212200d075390e8a14c33f049c7e56771340d24a9b60a8824d9f61ed6aebeab0139bb64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6556,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "threshold",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6560,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "isFinished",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6566,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "isVoted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6570,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2437,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2432_storage)"
      },
      {
        "astId": 9301,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeAmountM",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9307,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeRatioM",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9314,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeToSet",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AddressSet)5031_storage))"
      },
      {
        "astId": 9584,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "pegSwap",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IPegSwap)7548"
      },
      {
        "astId": 9590,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "supportToken",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 9594,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "txMinted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 9598,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "txUnlocked",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 9602,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "txRollbacked",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPegSwap)7548": {
        "encoding": "inplace",
        "label": "contract IPegSwap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AddressSet)5031_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AddressSet)5031_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2432_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2432_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)5031_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5031_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5031_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5030,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4760_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2432_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2429,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2431,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4760_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4755,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4759,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}