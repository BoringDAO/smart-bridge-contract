/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PegSwapInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,uint256,uint256,address)": FunctionFragment;
    "addPair(address,address,uint256)": FunctionFragment;
    "getMaxToken0AmountOut(address,uint256)": FunctionFragment;
    "getMaxToken1AmountOut(address,uint256)": FunctionFragment;
    "getPair(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(address,uint256)": FunctionFragment;
    "pegProxy()": FunctionFragment;
    "removeLiquidity(address,uint256,uint256,address)": FunctionFragment;
    "removePair(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPegProxy(address)": FunctionFragment;
    "setRemovalMinimum(address,uint256)": FunctionFragment;
    "swapToken0ForToken1(address,uint256,uint256,address)": FunctionFragment;
    "swapToken1ForToken0(address,uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPair",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxToken0AmountOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxToken1AmountOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pegProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePair",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPegProxy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRemovalMinimum",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToken0ForToken1",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToken1ForToken0",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxToken0AmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxToken1AmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemovalMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapToken0ForToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapToken1ForToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PegSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PegSwapInterface;

  functions: {
    addLiquidity(
      token0: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPair(
      token: string,
      pair: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMaxToken0AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxToken1AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPair(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pegProxy(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      token0: string,
      chainID: BigNumberish,
      liquidity: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePair(
      token: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegProxy(
      _pegProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemovalMinimum(
      token0: string,
      minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken0ForToken1(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken1ForToken0(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    token0: string,
    chainID: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPair(
    token: string,
    pair: string,
    chainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMaxToken0AmountOut(
    token0: string,
    chainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxToken1AmountOut(
    token0: string,
    chainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPair(
    token: string,
    chainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pegProxy(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    token0: string,
    chainID: BigNumberish,
    liquidity: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePair(
    token: string,
    chainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegProxy(
    _pegProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemovalMinimum(
    token0: string,
    minimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken0ForToken1(
    token0: string,
    chainID: BigNumberish,
    amountIn: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken1ForToken0(
    token0: string,
    chainID: BigNumberish,
    amountIn: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      token0: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPair(
      token: string,
      pair: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMaxToken0AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxToken1AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pegProxy(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      token0: string,
      chainID: BigNumberish,
      liquidity: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    removePair(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPegProxy(_pegProxy: string, overrides?: CallOverrides): Promise<void>;

    setRemovalMinimum(
      token0: string,
      minimum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken0ForToken1(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToken1ForToken0(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addLiquidity(
      token0: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPair(
      token: string,
      pair: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMaxToken0AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxToken1AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pegProxy(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      token0: string,
      chainID: BigNumberish,
      liquidity: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePair(
      token: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegProxy(
      _pegProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemovalMinimum(
      token0: string,
      minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken0ForToken1(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken1ForToken0(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      token0: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPair(
      token: string,
      pair: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMaxToken0AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxToken1AmountOut(
      token0: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pegProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      token0: string,
      chainID: BigNumberish,
      liquidity: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePair(
      token: string,
      chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegProxy(
      _pegProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemovalMinimum(
      token0: string,
      minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken0ForToken1(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken1ForToken0(
      token0: string,
      chainID: BigNumberish,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
