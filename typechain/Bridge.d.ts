/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgeInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addFeeTo(address,address)": FunctionFragment;
    "addSupportToken(address,address)": FunctionFragment;
    "addSupportTokens(address[],address[])": FunctionFragment;
    "calculateFee(address,uint256,uint256)": FunctionFragment;
    "chainID()": FunctionFragment;
    "crossBurn(address,address,uint256)": FunctionFragment;
    "crossMint(address,address,address,uint256,string)": FunctionFragment;
    "feeToLength(address)": FunctionFragment;
    "getFeeTo(address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleKey(address,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "lockFeeAmount(address)": FunctionFragment;
    "lockFeeRatio(address)": FunctionFragment;
    "minBurn(address)": FunctionFragment;
    "removeFeeTo(address,address)": FunctionFragment;
    "removeSupportToken(address)": FunctionFragment;
    "removeSupportTokens(address[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFee(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setMinBurn(address,uint256)": FunctionFragment;
    "setThreshold(address,uint256)": FunctionFragment;
    "supportToken(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "threshold(address)": FunctionFragment;
    "txMinted(string)": FunctionFragment;
    "unlockFeeAmount(address)": FunctionFragment;
    "unlockFeeRatio(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportTokens",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crossBurn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossMint",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "feeToLength", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFeeTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFeeAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFeeRatio",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "minBurn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFeeTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBurn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values: [string]): string;
  encodeFunctionData(functionFragment: "txMinted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unlockFeeAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFeeRatio",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crossBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crossMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoleKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "txMinted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CrossBurn(address,address,uint256,address,address,uint256)": EventFragment;
    "CrossMint(address,address,uint256,address,address,uint256,string)": EventFragment;
    "FeeChange(address,uint256,uint256,uint256,uint256)": EventFragment;
    "FeeToAdded(address,address)": EventFragment;
    "FeeToRemoved(address,address)": EventFragment;
    "MinBurnChanged(address,uint256,uint256)": EventFragment;
    "ProposalVoted(address,address,address,uint256,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "ThresholdChanged(address,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBurnChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addFeeTo(
      token0: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportToken(
      token0: string,
      token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportTokens(
      token0Addrs: string[],
      token1Addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFee(
      token: string,
      amount: BigNumberish,
      crossType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
    >;

    chainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    crossBurn(
      token0: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crossMint(
      token0: string,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeToLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len: BigNumber }>;

    getFeeTo(
      token: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { account: string }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleKey(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFeeAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minBurn(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFeeTo(
      token0: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupportToken(
      token0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupportTokens(
      addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      token0: string,
      _lockFeeAmount: BigNumberish,
      _lockFeeRatio: BigNumberish,
      _unlockFeeAmount: BigNumberish,
      _unlockFeeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBurn(
      token1: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      token1: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    threshold(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    txMinted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    unlockFeeAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockFeeRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addFeeTo(
    token0: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportToken(
    token0: string,
    token1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportTokens(
    token0Addrs: string[],
    token1Addrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFee(
    token: string,
    amount: BigNumberish,
    crossType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
  >;

  chainID(overrides?: CallOverrides): Promise<BigNumber>;

  crossBurn(
    token0: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crossMint(
    token0: string,
    from: string,
    to: string,
    amount: BigNumberish,
    txid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeToLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getFeeTo(
    token: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleKey(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _chainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeFeeTo(
    token0: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupportToken(
    token0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupportTokens(
    addrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    token0: string,
    _lockFeeAmount: BigNumberish,
    _lockFeeRatio: BigNumberish,
    _unlockFeeAmount: BigNumberish,
    _unlockFeeRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBurn(
    token1: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    token1: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  threshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  txMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  unlockFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unlockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addFeeTo(
      token0: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportToken(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportTokens(
      token0Addrs: string[],
      token1Addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFee(
      token: string,
      amount: BigNumberish,
      crossType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
    >;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    crossBurn(
      token0: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crossMint(
      token0: string,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeToLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFeeTo(
      token: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleKey(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeTo(
      token0: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportToken(
      token0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportTokens(
      addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      token0: string,
      _lockFeeAmount: BigNumberish,
      _lockFeeRatio: BigNumberish,
      _unlockFeeAmount: BigNumberish,
      _unlockFeeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBurn(
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      token1: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    threshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    txMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    unlockFeeAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    CrossBurn(
      token0?: null,
      token1?: null,
      chainID?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        token0: string;
        token1: string;
        chainID: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
      }
    >;

    CrossMint(
      token0?: null,
      token1?: null,
      chainID?: null,
      from?: null,
      to?: null,
      amount?: null,
      txid?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber, string],
      {
        token0: string;
        token1: string;
        chainID: BigNumber;
        from: string;
        to: string;
        amount: BigNumber;
        txid: string;
      }
    >;

    FeeChange(
      token?: null,
      lockFeeAmount?: null,
      lockFeeRatio?: null,
      unlockFeeAmount?: null,
      unlockFeeRatio?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        lockFeeAmount: BigNumber;
        lockFeeRatio: BigNumber;
        unlockFeeAmount: BigNumber;
        unlockFeeRatio: BigNumber;
      }
    >;

    FeeToAdded(
      token?: null,
      account?: null
    ): TypedEventFilter<[string, string], { token: string; account: string }>;

    FeeToRemoved(
      token?: null,
      account?: null
    ): TypedEventFilter<[string, string], { token: string; account: string }>;

    MinBurnChanged(
      token1?: null,
      preMin?: null,
      nowMin?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token1: string; preMin: BigNumber; nowMin: BigNumber }
    >;

    ProposalVoted(
      token?: null,
      from?: null,
      to?: null,
      amount?: null,
      proposer?: null,
      count?: null,
      threshold?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        to: string;
        amount: BigNumber;
        proposer: string;
        count: BigNumber;
        threshold: BigNumber;
      }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    ThresholdChanged(
      token?: null,
      oldThreshold?: null,
      newThreshold?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; oldThreshold: BigNumber; newThreshold: BigNumber }
    >;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeTo(
      token0: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportToken(
      token0: string,
      token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportTokens(
      token0Addrs: string[],
      token1Addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFee(
      token: string,
      amount: BigNumberish,
      crossType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    crossBurn(
      token0: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crossMint(
      token0: string,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeToLength(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFeeTo(
      token: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleKey(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minBurn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeTo(
      token0: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupportToken(
      token0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupportTokens(
      addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      token0: string,
      _lockFeeAmount: BigNumberish,
      _lockFeeRatio: BigNumberish,
      _unlockFeeAmount: BigNumberish,
      _unlockFeeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBurn(
      token1: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      token1: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threshold(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    txMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unlockFeeAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockFeeRatio(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFeeTo(
      token0: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportToken(
      token0: string,
      token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportTokens(
      token0Addrs: string[],
      token1Addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFee(
      token: string,
      amount: BigNumberish,
      crossType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crossBurn(
      token0: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crossMint(
      token0: string,
      from: string,
      to: string,
      amount: BigNumberish,
      txid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeToLength(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTo(
      token: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleKey(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _chainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFeeAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockFeeRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBurn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFeeTo(
      token0: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupportToken(
      token0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupportTokens(
      addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      token0: string,
      _lockFeeAmount: BigNumberish,
      _lockFeeRatio: BigNumberish,
      _unlockFeeAmount: BigNumberish,
      _unlockFeeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBurn(
      token1: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      token1: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockFeeAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockFeeRatio(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
