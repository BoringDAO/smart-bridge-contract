/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestITokenBSC, TestITokenBSCInterface } from "../TestITokenBSC";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "minter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "setMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012b6380380620012b6833981016040819052620000349162000355565b8251839083906200004d906003906020850190620001fc565b50805162000063906004906020840190620001fc565b505050620000806200007a620000be60201b60201c565b620000c2565b6200009533683635c9adc5dea0000062000114565b600680546001600160a01b0319166001600160a01b039290921691909117905550620004569050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166200016f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001839190620003de565b90915550506001600160a01b03821660009081526020819052604081208054839290620001b2908490620003de565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200020a9062000403565b90600052602060002090601f0160209004810192826200022e576000855562000279565b82601f106200024957805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002795782518255916020019190600101906200025c565b50620002879291506200028b565b5090565b5b808211156200028757600081556001016200028c565b600082601f830112620002b3578081fd5b81516001600160401b0380821115620002d057620002d062000440565b604051601f8301601f19908116603f01168101908282118183101715620002fb57620002fb62000440565b8160405283815260209250868385880101111562000317578485fd5b8491505b838210156200033a57858201830151818301840152908201906200031b565b838211156200034b57848385830101525b9695505050505050565b6000806000606084860312156200036a578283fd5b83516001600160401b038082111562000381578485fd5b6200038f87838801620002a2565b94506020860151915080821115620003a5578384fd5b50620003b486828701620002a2565b604086015190935090506001600160a01b0381168114620003d3578182fd5b809150509250925092565b60008219821115620003fe57634e487b7160e01b81526011600452602481fd5b500190565b600181811c908216806200041857607f821691505b602082108114156200043a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610e5080620004666000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063a457c2d711610071578063a457c2d714610240578063a9059cbb14610253578063dd62ed3e14610266578063f2fde38b1461029f578063fca3b5aa146102b257600080fd5b8063715018a61461020a5780638da5cb5b1461021457806395d89b41146102255780639dc29fac1461022d57600080fd5b806323b872dd116100e957806323b872dd14610199578063313ce567146101ac57806339509351146101bb57806340c10f19146101ce57806370a08231146101e157600080fd5b806306fdde031461011b5780630754617214610139578063095ea7b31461016457806318160ddd14610187575b600080fd5b6101236102c5565b6040516101309190610d12565b60405180910390f35b60065461014c906001600160a01b031681565b6040516001600160a01b039091168152602001610130565b610177610172366004610ce9565b610357565b6040519015158152602001610130565b6002545b604051908152602001610130565b6101776101a7366004610cae565b61036d565b60405160128152602001610130565b6101776101c9366004610ce9565b61041c565b6101776101dc366004610ce9565b610458565b61018b6101ef366004610c5b565b6001600160a01b031660009081526020819052604090205490565b6102126104ad565b005b6005546001600160a01b031661014c565b6101236104e3565b61017761023b366004610ce9565b6104f2565b61017761024e366004610ce9565b610547565b610177610261366004610ce9565b6105e0565b61018b610274366004610c7c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102126102ad366004610c5b565b6105ed565b6102126102c0366004610c5b565b610688565b6060600380546102d490610dc9565b80601f016020809104026020016040519081016040528092919081815260200182805461030090610dc9565b801561034d5780601f106103225761010080835404028352916020019161034d565b820191906000526020600020905b81548152906001019060200180831161033057829003601f168201915b5050505050905090565b60006103643384846106d4565b50600192915050565b600061037a8484846107f9565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104045760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61041185338584036106d4565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610364918590610453908690610d9a565b6106d4565b6006546000906001600160a01b031633146104a35760405162461bcd60e51b815260206004820152600b60248201526a37b7363c9036b4b73a32b960a91b60448201526064016103fb565b61036483836109c8565b6005546001600160a01b031633146104d75760405162461bcd60e51b81526004016103fb90610d65565b6104e16000610aa7565b565b6060600480546102d490610dc9565b6006546000906001600160a01b0316331461053d5760405162461bcd60e51b815260206004820152600b60248201526a37b7363c9036b4b73a32b960a91b60448201526064016103fb565b6103648383610af9565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105c95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103fb565b6105d633858584036106d4565b5060019392505050565b60006103643384846107f9565b6005546001600160a01b031633146106175760405162461bcd60e51b81526004016103fb90610d65565b6001600160a01b03811661067c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103fb565b61068581610aa7565b50565b6005546001600160a01b031633146106b25760405162461bcd60e51b81526004016103fb90610d65565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166107365760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103fb565b6001600160a01b0382166107975760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103fb565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661085d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103fb565b6001600160a01b0382166108bf5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103fb565b6001600160a01b038316600090815260208190526040902054818110156109375760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103fb565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061096e908490610d9a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109ba91815260200190565b60405180910390a350505050565b6001600160a01b038216610a1e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103fb565b8060026000828254610a309190610d9a565b90915550506001600160a01b03821660009081526020819052604081208054839290610a5d908490610d9a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610b595760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103fb565b6001600160a01b03821660009081526020819052604090205481811015610bcd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103fb565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610bfc908490610db2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016107ec565b80356001600160a01b0381168114610c5657600080fd5b919050565b600060208284031215610c6c578081fd5b610c7582610c3f565b9392505050565b60008060408385031215610c8e578081fd5b610c9783610c3f565b9150610ca560208401610c3f565b90509250929050565b600080600060608486031215610cc2578081fd5b610ccb84610c3f565b9250610cd960208501610c3f565b9150604084013590509250925092565b60008060408385031215610cfb578182fd5b610d0483610c3f565b946020939093013593505050565b6000602080835283518082850152825b81811015610d3e57858101830151858201604001528201610d22565b81811115610d4f5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610dad57610dad610e04565b500190565b600082821015610dc457610dc4610e04565b500390565b600181811c90821680610ddd57607f821691505b60208210811415610dfe57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208d85427d9192ecf95971c721091a820ce4a6db42aa42a2035a21507ce5309a4f64736f6c63430008040033";

export class TestITokenBSC__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _symbol: string,
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestITokenBSC> {
    return super.deploy(
      _name,
      _symbol,
      _minter,
      overrides || {}
    ) as Promise<TestITokenBSC>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _minter, overrides || {});
  }
  attach(address: string): TestITokenBSC {
    return super.attach(address) as TestITokenBSC;
  }
  connect(signer: Signer): TestITokenBSC__factory {
    return super.connect(signer) as TestITokenBSC__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestITokenBSCInterface {
    return new utils.Interface(_abi) as TestITokenBSCInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestITokenBSC {
    return new Contract(address, _abi, signerOrProvider) as TestITokenBSC;
  }
}
