{
  "address": "0x05fc6766ADc968e2052C9Dc10899E6DbA7911e8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CrossBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Rollback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Rollbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chianID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CROSSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "addSupportToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0s",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "token1s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        }
      ],
      "name": "addSupportTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnBoringToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "crossIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "crossOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegSwap",
      "outputs": [
        {
          "internalType": "contract IPegSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "removeSupportToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        }
      ],
      "name": "removeSupportTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "rollback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pegSwap",
          "type": "address"
        }
      ],
      "name": "setPegSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txRollbacked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb950b772ccb68704468235157b5fbddb058dfc13f3005c662ecca93bebfc9726",
  "receipt": {
    "to": null,
    "from": "0x60E76dC9B7369293B364186EcCad993dE205d228",
    "contractAddress": "0x05fc6766ADc968e2052C9Dc10899E6DbA7911e8F",
    "transactionIndex": 2,
    "gasUsed": "2399469",
    "logsBloom": "0x
    "blockHash": "0x8b03ff65dc2fbb6ee9f3340e414b345f89c6517af6633f8005a316d1ac324053",
    "transactionHash": "0xb950b772ccb68704468235157b5fbddb058dfc13f3005c662ecca93bebfc9726",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 25837257,
        "transactionHash": "0xb950b772ccb68704468235157b5fbddb058dfc13f3005c662ecca93bebfc9726",
        "address": "0x05fc6766ADc968e2052C9Dc10899E6DbA7911e8F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000060e76dc9b7369293b364186eccad993de205d228",
          "0x00000000000000000000000060e76dc9b7369293b364186eccad993de205d228"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x8b03ff65dc2fbb6ee9f3340e414b345f89c6517af6633f8005a316d1ac324053"
      }
    ],
    "blockNumber": 25837257,
    "cumulativeGasUsed": "2511181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7bb531626318bdf5f5e606a30c007076",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CrossBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Rollback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Rollbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chianID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"addSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0s\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"}],\"name\":\"addSupportTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBoringToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"crossIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"crossOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegSwap\",\"outputs\":[{\"internalType\":\"contract IPegSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"removeSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"}],\"name\":\"removeSupportTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"rollback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegSwap\",\"type\":\"address\"}],\"name\":\"setPegSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txRollbacked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pegbridge/PegProxy.sol\":\"PegProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/ProposalVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract ProposalVote {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public threshold;\\n\\n    mapping(bytes32 => bool) isFinished;\\n    mapping(bytes32 => mapping(address => bool)) isVoted;\\n    mapping(bytes32 => uint256) counter;\\n\\n    event ProposalVoted(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address proposer,\\n        uint256 count,\\n        uint256 threshold\\n    );\\n\\n    event ThresholdChanged(address token, uint256 oldThreshold, uint256 newThreshold);\\n\\n    function _setThreshold(address token, uint256 _threshold) internal virtual {\\n        uint256 oldThreshold = threshold[token];\\n        threshold[token] = _threshold;\\n        emit ThresholdChanged(token, oldThreshold, _threshold);\\n    }\\n\\n    function _vote(\\n        address tokenTo,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) internal virtual returns (bool result) {\\n        require(threshold[tokenTo] > 0, \\\"ProposalVote: threshold should be greater than 0\\\");\\n        uint256 count = threshold[tokenTo];\\n        bytes32 mid = keccak256(abi.encodePacked(tokenTo, from, to, amount, txid));\\n        require(isFinished[mid] == false, \\\"_vote::proposal finished\\\");\\n        require(isVoted[mid][msg.sender] == false, \\\"_vote::msg.sender voted\\\");\\n        counter[mid] = counter[mid].add(1);\\n        isVoted[mid][msg.sender] = true;\\n\\n        if (counter[mid] >= count) {\\n            isFinished[mid] = true;\\n            result = true;\\n        }\\n\\n        emit ProposalVoted(tokenTo, from, to, amount, msg.sender, counter[mid], count);\\n    }\\n}\\n\",\"keccak256\":\"0x0f7247daad2583af438ec1aace160eebc48ae66fe24112c28fbf020aff3d1780\",\"license\":\"MIT\"},\"contracts/interface/IBoringToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBoringToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9b558f607a5f506c5ff714d1e3a78601d87a93a07d4cfa3e2f86e8c0b6145452\",\"license\":\"MIT\"},\"contracts/interface/IPegSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwap {\\n    function swapToken0ForToken1(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) external;\\n\\n    function swapToken1ForToken0(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) external;\\n\\n    function getPair(address token, uint256 chainID) external view returns (address);\\n\\n    function getMaxToken1AmountOut(address token0, uint256 chainID) external view returns (uint256);\\n    function getMaxToken0AmountOut(address token0, uint256 chainID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5975f09e1d07a6e7261b10927f2d4f178eb47731931e843011849619b707d42b\",\"license\":\"MIT\"},\"contracts/interface/IPegSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwapPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function token0() external returns (address);\\n\\n    function token1() external returns (address);\\n\\n    function swap(address to, bool direction) external; // direction: token0 -> token1 or token1 -> token0\\n\\n    function getReserves() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x1285862ea363da7f3a3eb719f17a0708aad6e203a085bf3e70e8f946d4c73941\",\"license\":\"MIT\"},\"contracts/pegbridge/PegProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interface/IPegSwap.sol\\\";\\nimport \\\"../interface/IPegSwapPair.sol\\\";\\nimport \\\"../interface/IBoringToken.sol\\\";\\nimport \\\"../ProposalVote.sol\\\";\\n\\ncontract PegProxy is ProposalVote, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    bytes32 public constant CROSSER_ROLE = \\\"CROSSER_ROLE\\\";\\n\\n    IPegSwap public pegSwap;\\n    // mapping(address => address) public supportToken; // eg.ethToken => bscToke\\n    mapping(address => mapping(uint => address)) public supportToken;\\n    mapping(string => bool) public txMinted;\\n    mapping(string => bool) public txUnlocked;\\n    mapping(string => bool) public txRollbacked;\\n\\n    //================= Event ==================//\\n    event CrossBurn(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount);\\n    event Lock(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount);\\n    event Unlock(address token0, address token1, uint256 chianID0, uint256 chainID1, address from, address to, uint256 amount, string txid);\\n    event Rollback(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount, string txid);\\n    event Rollbacked(address token0, address from, uint256 amount, string txid);\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function crossOut(\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) public onlySupportToken(token0, chainID) {\\n        require(amount > 0, \\\"PegProxy: amount must be greater than 0\\\");\\n        require(to != address(0), \\\"PegProxy: to is empty\\\");\\n\\n        IERC20(token0).transferFrom(msg.sender, address(this), amount);\\n\\n        uint256 out = pegSwap.getMaxToken1AmountOut(token0, chainID);\\n        uint256 burnAmount = amount.min(out);\\n        if (burnAmount > 0) {\\n            IERC20(token0).approve(address(pegSwap), burnAmount);\\n            pegSwap.swapToken0ForToken1(token0, chainID, burnAmount, msg.sender);\\n            burnBoringToken(token0, chainID, to, burnAmount);\\n        }\\n        if (amount > out) {\\n            uint256 lockAmount = amount.sub(burnAmount);\\n            emit Lock(token0, supportToken[token0][chainID], block.chainid, chainID, msg.sender, to, lockAmount);\\n        }\\n    }\\n\\n    function crossIn(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlyCrosser whenNotMinted(txid) {\\n        bool result = _vote(token0, from, to, amount, txid);\\n        if (result) {\\n            // mint token\\n            txMinted[txid] = true;\\n            address pair = pegSwap.getPair(token0, chainID);\\n            address borToken = IPegSwapPair(pair).token1();\\n            uint token0Amount = pegSwap.getMaxToken0AmountOut(token0, chainID);\\n            if (amount > token0Amount) {\\n                emit Rollback(token0, supportToken[token0][chainID], block.chainid, chainID, from, to, amount, txid);\\n            } else {\\n                IBoringToken(borToken).mint(address(this), amount);\\n                IBoringToken(borToken).approve(address(pegSwap), amount);\\n                pegSwap.swapToken1ForToken0(token0, chainID, amount, to);\\n            }\\n        }\\n    }\\n\\n    function rollback(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlySupportToken(token0, chainID) onlyCrosser whenNotRollbacked(txid) {\\n        bool result = _vote(token0, from, from, amount, txid);\\n        if (result) {\\n            txRollbacked[txid] = true;\\n            IERC20(token0).transfer(from, amount);\\n            emit Rollbacked(token0, from, amount, txid);\\n        }\\n    }\\n\\n    function unlock(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlySupportToken(token0, chainID) onlyCrosser whenNotUnlocked(txid) {\\n        bool result = _vote(token0, from, to, amount, txid);\\n        if (result) {\\n            txUnlocked[txid] = true;\\n            IERC20(token0).safeTransfer(to, amount);\\n            emit Unlock(token0, supportToken[token0][chainID], block.chainid, chainID, from, to, amount, txid);\\n        }\\n    }\\n\\n    function burnBoringToken(\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) public onlySupportToken(token0, chainID) {\\n        address pair = pegSwap.getPair(token0, chainID);\\n        address token1 = IPegSwapPair(pair).token1();\\n\\n        require(IERC20(token1).balanceOf(msg.sender) >= amount, \\\"PegProxy: msg.sender not enough token to burn\\\");\\n\\n        IBoringToken(token1).burn(msg.sender, amount);\\n        emit CrossBurn(token0, supportToken[token0][chainID], block.chainid, chainID,  msg.sender, to, amount);\\n    }\\n\\n    //================ Setter ==================//\\n    function setThreshold(address token, uint256 _threshold) public onlyAdmin {\\n        _setThreshold(token, _threshold);\\n    }\\n\\n    function setPegSwap(address _pegSwap) public onlyAdmin {\\n        pegSwap = IPegSwap(_pegSwap);\\n    }\\n\\n    function addSupportToken(address token0, address token1, uint256 chainID) public onlyAdmin {\\n        require(supportToken[token0][chainID] == address(0), \\\"PegProxy: Toke already Supported\\\");\\n        supportToken[token0][chainID] = token1;\\n    }\\n\\n    function removeSupportToken(address token0, uint256 chainID) public onlyAdmin {\\n        require(supportToken[token0][chainID] != address(0), \\\"PegProxy: toke not supported\\\");\\n        delete supportToken[token0][chainID];\\n    }\\n\\n    function addSupportTokens(address[] memory token0s, address[] memory token1s, uint256[] memory chainIDs) public {\\n        require(token0s.length == token1s.length, \\\"PegProxy: token length not match\\\");\\n        require(token0s.length == chainIDs.length, \\\"PegProxy: chainIDs length not match\\\");\\n        for (uint256 i; i <token0s.length; i++) {\\n            addSupportToken(token0s[i], token1s[i], chainIDs[i]);\\n        }\\n    }\\n\\n    function removeSupportTokens(address[] memory token0s, uint256[] memory chainIDs) public {\\n        require(token0s.length == chainIDs.length, \\\"PegProxy: chainIDs length not match\\\");\\n        for (uint256 i; i < token0s.length; i++) {\\n            removeSupportToken(token0s[i], chainIDs[i]);\\n        }\\n    }\\n\\n    //================ Modifier =================//\\n    modifier onlySupportToken(address token, uint256 chainID) {\\n        require(supportToken[token][chainID] != address(0), \\\"PegProxy: not support this token\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"PegProxy: caller is not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCrosser {\\n        require(hasRole(CROSSER_ROLE, msg.sender), \\\"PegProxy: caller is not crosser\\\");\\n        _;\\n    }\\n\\n    modifier whenNotMinted(string memory _txid) {\\n        require(txMinted[_txid] == false, \\\"PegProxy: tx minted\\\");\\n        _;\\n    }\\n\\n    modifier whenNotUnlocked(string memory _txid) {\\n        require(txUnlocked[_txid] == false, \\\"PegProxy: tx unlocked\\\");\\n        _;\\n    }\\n\\n    modifier whenNotRollbacked(string memory _txid) {\\n        require(txRollbacked[_txid] == false, \\\"PegProxy: tx rollbacked\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0bc13dab5baddabce67f496386bda66c3ef61b4f8ba80ea3614b446af2311d20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b620000d9565b62000031828262000035565b5050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16620000315760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000953390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6129f180620000e96000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806381660f5d116100de578063c86ec2bf11610097578063d692f4c511610071578063d692f4c5146103aa578063df7e600a146103de578063ee8a6acf146103f1578063f8f8d5c01461040457600080fd5b8063c86ec2bf14610364578063cf28f67c14610384578063d547741f1461039757600080fd5b806381660f5d146102e257806391d14854146102f5578063967145af146103085780639d87999014610336578063a217fddf14610349578063afd513901461035157600080fd5b80632e6bef33116101305780632e6bef331461023a5780632f2ff15d1461026557806336568abe1461027857806353ad72e51461028b57806356cf02d9146102b9578063715ec45c146102cf57600080fd5b806301ffc9a71461017857806303507ba5146101a057806310c27402146101b557806314681c84146101e35780631b322be4146101f6578063248a9ca314610209575b600080fd5b61018b6101863660046124fb565b610417565b60405190151581526020015b60405180910390f35b6101b36101ae366004612433565b61044e565b005b61018b6101c3366004612523565b805160208183018101805160078252928201919093012091525460ff1681565b6101b36101f13660046121cc565b6104f3565b6101b3610204366004612204565b61053c565b61022c6102173660046124b4565b60009081526004602052604090206001015490565b604051908152602001610197565b60055461024d906001600160a01b031681565b6040516001600160a01b039091168152602001610197565b6101b36102733660046124cc565b61060e565b6101b36102863660046124cc565b610634565b61018b610299366004612523565b805160208183018101805160098252928201919093012091525460ff1681565b61022c6b43524f535345525f524f4c4560a01b81565b6101b36102dd36600461226f565b6106b2565b6101b36102f036600461233b565b61086d565b61018b6103033660046124cc565b610a6a565b61018b610316366004612523565b805160208183018101805160088252928201919093012091525460ff1681565b6101b3610344366004612244565b610a95565b61022c600081565b6101b361035f3660046122f4565b610ac6565b61022c6103723660046121cc565b60006020819052908152604090205481565b6101b361039236600461226f565b610db8565b6101b36103a53660046124cc565b611202565b61024d6103b8366004612244565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6101b36103ec3660046122f4565b611228565b6101b36103ff3660046123af565b6115bb565b6101b3610412366004612244565b6116d1565b60006001600160e01b03198216637965db0b60e01b148061044857506301ffc9a760e01b6001600160e01b03198316145b92915050565b80518251146104785760405162461bcd60e51b815260040161046f906127fc565b60405180910390fd5b60005b82518110156104ee576104dc8382815181106104a757634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106104cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516116d1565b806104e68161295c565b91505061047b565b505050565b6104fe600033610a6a565b61051a5760405162461bcd60e51b815260040161046f9061283f565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610547600033610a6a565b6105635760405162461bcd60e51b815260040161046f9061283f565b6001600160a01b03838116600090815260066020908152604080832085845290915290205416156105d65760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20546f6b6520616c726561647920537570706f72746564604482015260640161046f565b6001600160a01b0392831660009081526006602090815260408083209383529290522080546001600160a01b03191691909216179055565b60008281526004602052604090206001015461062a813361179d565b6104ee8383611801565b6001600160a01b03811633146106a45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161046f565b6106ae8282611887565b5050565b6001600160a01b03808716600090815260066020908152604080832089845290915290205487918791166106f85760405162461bcd60e51b815260040161046f906127c7565b6107116b43524f535345525f524f4c4560a01b33610a6a565b61072d5760405162461bcd60e51b815260040161046f90612790565b8260088160405161073e91906125f3565b9081526040519081900360200190205460ff16156107965760405162461bcd60e51b8152602060048201526015602482015274141959d41c9bde1e4e881d1e081d5b9b1bd8dad959605a1b604482015260640161046f565b60006107a58a898989896118ee565b905080156108615760016008866040516107bf91906125f3565b908152604051908190036020019020805491151560ff199092169190911790556107f36001600160a01b038b168888611b76565b6001600160a01b03808b1660009081526006602090815260408083208d8452909152908190205490517fe8a9cddb11d86358ad5c2fdd6359f0a6f41de0d399033319becf1364409dacbc92610858928e9291169046908e908e908e908e908e90612703565b60405180910390a15b50505050505050505050565b6001600160a01b03808616600090815260066020908152604080832088845290915290205486918691166108b35760405162461bcd60e51b815260040161046f906127c7565b6108cc6b43524f535345525f524f4c4560a01b33610a6a565b6108e85760405162461bcd60e51b815260040161046f90612790565b826009816040516108f991906125f3565b9081526040519081900360200190205460ff16156109595760405162461bcd60e51b815260206004820152601760248201527f50656750726f78793a20747820726f6c6c6261636b6564000000000000000000604482015260640161046f565b600061096889888989896118ee565b90508015610a5f57600160098660405161098291906125f3565b908152604051908190036020018120805492151560ff199093169290921790915563a9059cbb60e01b81526001600160a01b038a169063a9059cbb906109ce908a908a90600401612764565b602060405180830381600087803b1580156109e857600080fd5b505af11580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190612494565b507f9420db1a0c5e4f45cc0dac05f17e8eb893645981e3c01e8d14120353a487d9e989888888604051610a569493929190612684565b60405180910390a15b505050505050505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610aa0600033610a6a565b610abc5760405162461bcd60e51b815260040161046f9061283f565b6106ae8282611bcc565b6001600160a01b0380851660009081526006602090815260408083208784529091529020548591859116610b0c5760405162461bcd60e51b815260040161046f906127c7565b600554604051626349fb60e01b81526000916001600160a01b031690626349fb90610b3d908a908a90600401612764565b60206040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d91906121e8565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0491906121e8565b6040516370a0823160e01b815233600482015290915085906001600160a01b038316906370a082319060240160206040518083038186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c809190612556565b1015610ce45760405162461bcd60e51b815260206004820152602d60248201527f50656750726f78793a206d73672e73656e646572206e6f7420656e6f7567682060448201526c3a37b5b2b7103a3790313ab93760991b606482015260840161046f565b604051632770a7eb60e21b81526001600160a01b03821690639dc29fac90610d129033908990600401612764565b600060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b5050506001600160a01b03808a1660009081526006602090815260408083208c8452909152908190205490517f79aee25f54411be6ea1ab53c9d3cc3e245c301d481091deda6343da926932c0c9350610da6928c92169046908c9033908d908d906126c1565b60405180910390a15050505050505050565b610dd16b43524f535345525f524f4c4560a01b33610a6a565b610ded5760405162461bcd60e51b815260040161046f90612790565b80600781604051610dfe91906125f3565b9081526040519081900360200190205460ff1615610e545760405162461bcd60e51b8152602060048201526013602482015272141959d41c9bde1e4e881d1e081b5a5b9d1959606a1b604482015260640161046f565b6000610e6388878787876118ee565b905080156111f8576001600784604051610e7d91906125f3565b908152604051908190036020018120805492151560ff1990931692909217909155600554626349fb60e01b82526000916001600160a01b0390911690626349fb90610ece908c908c90600401612764565b60206040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1e91906121e8565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9591906121e8565b60055460405163934ac70760e01b81529192506000916001600160a01b039091169063934ac70790610fcd908e908e90600401612764565b60206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190612556565b905080871115611099576001600160a01b03808c1660009081526006602090815260408083208e8452909152908190205490517f56a316ee63540abb5f8fd44be7a6eb2016a90fc9bb3a34ffe13948a44c49a6169261108c928f9291169046908f908f908f908f908f90612703565b60405180910390a16111f4565b6040516340c10f1960e01b81526001600160a01b038316906340c10f19906110c79030908b90600401612764565b600060405180830381600087803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b505060055460405163095ea7b360e01b81526001600160a01b03808716945063095ea7b3935061112b9216908b90600401612764565b602060405180830381600087803b15801561114557600080fd5b505af1158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612494565b506005546040516340ec172360e01b81526001600160a01b038d81166004830152602482018d9052604482018a90528a81166064830152909116906340ec172390608401600060405180830381600087803b1580156111db57600080fd5b505af11580156111ef573d6000803e3d6000fd5b505050505b5050505b5050505050505050565b60008281526004602052604090206001015461121e813361179d565b6104ee8383611887565b6001600160a01b038085166000908152600660209081526040808320878452909152902054859185911661126e5760405162461bcd60e51b815260040161046f906127c7565b600083116112ce5760405162461bcd60e51b815260206004820152602760248201527f50656750726f78793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b606482015260840161046f565b6001600160a01b03841661131c5760405162461bcd60e51b815260206004820152601560248201527450656750726f78793a20746f20697320656d70747960581b604482015260640161046f565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038716906323b872dd90606401602060405180830381600087803b15801561136a57600080fd5b505af115801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190612494565b506005546040516356ecaeb760e01b81526000916001600160a01b0316906356ecaeb7906113d6908a908a90600401612764565b60206040518083038186803b1580156113ee57600080fd5b505afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190612556565b905060006114348583611c30565b905080156115425760055460405163095ea7b360e01b81526001600160a01b038a81169263095ea7b39261147092909116908590600401612764565b602060405180830381600087803b15801561148a57600080fd5b505af115801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190612494565b506005546040516313fcb20160e21b81526001600160a01b038a81166004830152602482018a90526044820184905233606483015290911690634ff2c80490608401600060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b5050505061154288888884610ac6565b818511156111f85760006115568683611c48565b6001600160a01b03808b1660009081526006602090815260408083208d8452909152908190205490519293507f7cb5e2d54d5587c3a3448631884061009b0e2c30e37922a4dd4aed50e11dd7f392610a56928d92169046908d9033908e9089906126c1565b815183511461160c5760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20746f6b656e206c656e677468206e6f74206d61746368604482015260640161046f565b805183511461162d5760405162461bcd60e51b815260040161046f906127fc565b60005b83518110156116cb576116b984828151811061165c57634e487b7160e01b600052603260045260246000fd5b602002602001015184838151811061168457634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106116ac57634e487b7160e01b600052603260045260246000fd5b602002602001015161053c565b806116c38161295c565b915050611630565b50505050565b6116dc600033610a6a565b6116f85760405162461bcd60e51b815260040161046f9061283f565b6001600160a01b0382811660009081526006602090815260408083208584529091529020541661176a5760405162461bcd60e51b815260206004820152601c60248201527f50656750726f78793a20746f6b65206e6f7420737570706f7274656400000000604482015260640161046f565b6001600160a01b0390911660009081526006602090815260408083209383529290522080546001600160a01b0319169055565b6117a78282610a6a565b6106ae576117bf816001600160a01b03166014611c54565b6117ca836020611c54565b6040516020016117db92919061260f565b60408051601f198184030181529082905262461bcd60e51b825261046f9160040161277d565b61180b8282610a6a565b6106ae5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118433390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118918282610a6a565b156106ae5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03851660009081526020819052604081205461196c5760405162461bcd60e51b815260206004820152603060248201527f50726f706f73616c566f74653a207468726573686f6c642073686f756c64206260448201526f0652067726561746572207468616e20360841b606482015260840161046f565b6001600160a01b03861660009081526020818152604080832054905190929161199f918a918a918a918a918a910161259a565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff1615611a175760405162461bcd60e51b815260206004820152601860248201527f5f766f74653a3a70726f706f73616c2066696e69736865640000000000000000604482015260640161046f565b600081815260026020908152604080832033845290915290205460ff1615611a815760405162461bcd60e51b815260206004820152601760248201527f5f766f74653a3a6d73672e73656e64657220766f746564000000000000000000604482015260640161046f565b600081815260036020526040902054611a9b906001611e36565b60008281526003602081815260408084209485556002825280842033855282528320805460ff19166001179055918490529052548211611af3576000818152600160208190526040909120805460ff19168217905592505b6000818152600360209081526040918290205482516001600160a01b038c811682528b811693820193909352918916828401526060820188905233608083015260a082015260c0810184905290517fe458477b94285c9f254a407e2614c39f55230b527ff7f51d76fdf33e251ae9369181900360e00190a1505095945050505050565b6104ee8363a9059cbb60e01b8484604051602401611b95929190612764565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e42565b6001600160a01b038216600081815260208181526040918290208054908590558251938452908301819052908201839052907fb18e91516e037486aa6fa38f56a8aac933fd127180efe9c9745ecbf660a78e449060600160405180910390a1505050565b6000818310611c3f5781611c41565b825b9392505050565b6000611c418284612902565b60606000611c638360026128e3565b611c6e9060026128cb565b67ffffffffffffffff811115611c9457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611cbe576020820181803683370190505b509050600360fc1b81600081518110611ce757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d2457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611d488460026128e3565b611d539060016128cb565b90505b6001811115611de7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d9557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611db957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611de081612945565b9050611d56565b508315611c415760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161046f565b6000611c4182846128cb565b6000611e97826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f149092919063ffffffff16565b8051909150156104ee5780806020019051810190611eb59190612494565b6104ee5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046f565b6060611f238484600085611f2b565b949350505050565b606082471015611f8c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046f565b843b611fda5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046f565b600080866001600160a01b03168587604051611ff691906125f3565b60006040518083038185875af1925050503d8060008114612033576040519150601f19603f3d011682016040523d82523d6000602084013e612038565b606091505b5091509150612048828286612053565b979650505050505050565b60608315612062575081611c41565b8251156120725782518084602001fd5b8160405162461bcd60e51b815260040161046f919061277d565b600082601f83011261209c578081fd5b813560206120b16120ac836128a7565b612876565b80838252828201915082860187848660051b89010111156120d0578586fd5b855b858110156120f75781356120e5816129a3565b845292840192908401906001016120d2565b5090979650505050505050565b600082601f830112612114578081fd5b813560206121246120ac836128a7565b80838252828201915082860187848660051b8901011115612143578586fd5b855b858110156120f757813584529284019290840190600101612145565b600082601f830112612171578081fd5b813567ffffffffffffffff81111561218b5761218b61298d565b61219e601f8201601f1916602001612876565b8181528460208386010111156121b2578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156121dd578081fd5b8135611c41816129a3565b6000602082840312156121f9578081fd5b8151611c41816129a3565b600080600060608486031215612218578182fd5b8335612223816129a3565b92506020840135612233816129a3565b929592945050506040919091013590565b60008060408385031215612256578182fd5b8235612261816129a3565b946020939093013593505050565b60008060008060008060c08789031215612287578182fd5b8635612292816129a3565b95506020870135945060408701356122a9816129a3565b935060608701356122b9816129a3565b92506080870135915060a087013567ffffffffffffffff8111156122db578182fd5b6122e789828a01612161565b9150509295509295509295565b60008060008060808587031215612309578384fd5b8435612314816129a3565b935060208501359250604085013561232b816129a3565b9396929550929360600135925050565b600080600080600060a08688031215612352578081fd5b853561235d816129a3565b9450602086013593506040860135612374816129a3565b925060608601359150608086013567ffffffffffffffff811115612396578182fd5b6123a288828901612161565b9150509295509295909350565b6000806000606084860312156123c3578081fd5b833567ffffffffffffffff808211156123da578283fd5b6123e68783880161208c565b945060208601359150808211156123fb578283fd5b6124078783880161208c565b9350604086013591508082111561241c578283fd5b5061242986828701612104565b9150509250925092565b60008060408385031215612445578182fd5b823567ffffffffffffffff8082111561245c578384fd5b6124688683870161208c565b9350602085013591508082111561247d578283fd5b5061248a85828601612104565b9150509250929050565b6000602082840312156124a5578081fd5b81518015158114611c41578182fd5b6000602082840312156124c5578081fd5b5035919050565b600080604083850312156124de578182fd5b8235915060208301356124f0816129a3565b809150509250929050565b60006020828403121561250c578081fd5b81356001600160e01b031981168114611c41578182fd5b600060208284031215612534578081fd5b813567ffffffffffffffff81111561254a578182fd5b611f2384828501612161565b600060208284031215612567578081fd5b5051919050565b60008151808452612586816020860160208601612919565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b166014840152808660601b1660288401525083603c83015282516125e281605c850160208701612919565b91909101605c019695505050505050565b60008251612605818460208701612919565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612647816017850160208801612919565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612678816028840160208801612919565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126b79083018461256e565b9695505050505050565b6001600160a01b0397881681529587166020870152604086019490945260608501929092528416608084015290921660a082015260c081019190915260e00190565b6001600160a01b038981168252888116602083015260408201889052606082018790528581166080830152841660a082015260c0810183905261010060e082018190526000906127558382018561256e565b9b9a5050505050505050505050565b6001600160a01b03929092168252602082015260400190565b602081526000611c41602083018461256e565b6020808252601f908201527f50656750726f78793a2063616c6c6572206973206e6f742063726f7373657200604082015260600190565b6020808252818101527f50656750726f78793a206e6f7420737570706f7274207468697320746f6b656e604082015260600190565b60208082526023908201527f50656750726f78793a20636861696e494473206c656e677468206e6f74206d616040820152620e8c6d60eb1b606082015260800190565b6020808252601d908201527f50656750726f78793a2063616c6c6572206973206e6f742061646d696e000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561289f5761289f61298d565b604052919050565b600067ffffffffffffffff8211156128c1576128c161298d565b5060051b60200190565b600082198211156128de576128de612977565b500190565b60008160001904831182151516156128fd576128fd612977565b500290565b60008282101561291457612914612977565b500390565b60005b8381101561293457818101518382015260200161291c565b838111156116cb5750506000910152565b60008161295457612954612977565b506000190190565b600060001982141561297057612970612977565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146129b857600080fd5b5056fea2646970667358221220fb40005b699bca0ba819a9575e60cff93fbf79b090865a554b439c8008a4c57764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806381660f5d116100de578063c86ec2bf11610097578063d692f4c511610071578063d692f4c5146103aa578063df7e600a146103de578063ee8a6acf146103f1578063f8f8d5c01461040457600080fd5b8063c86ec2bf14610364578063cf28f67c14610384578063d547741f1461039757600080fd5b806381660f5d146102e257806391d14854146102f5578063967145af146103085780639d87999014610336578063a217fddf14610349578063afd513901461035157600080fd5b80632e6bef33116101305780632e6bef331461023a5780632f2ff15d1461026557806336568abe1461027857806353ad72e51461028b57806356cf02d9146102b9578063715ec45c146102cf57600080fd5b806301ffc9a71461017857806303507ba5146101a057806310c27402146101b557806314681c84146101e35780631b322be4146101f6578063248a9ca314610209575b600080fd5b61018b6101863660046124fb565b610417565b60405190151581526020015b60405180910390f35b6101b36101ae366004612433565b61044e565b005b61018b6101c3366004612523565b805160208183018101805160078252928201919093012091525460ff1681565b6101b36101f13660046121cc565b6104f3565b6101b3610204366004612204565b61053c565b61022c6102173660046124b4565b60009081526004602052604090206001015490565b604051908152602001610197565b60055461024d906001600160a01b031681565b6040516001600160a01b039091168152602001610197565b6101b36102733660046124cc565b61060e565b6101b36102863660046124cc565b610634565b61018b610299366004612523565b805160208183018101805160098252928201919093012091525460ff1681565b61022c6b43524f535345525f524f4c4560a01b81565b6101b36102dd36600461226f565b6106b2565b6101b36102f036600461233b565b61086d565b61018b6103033660046124cc565b610a6a565b61018b610316366004612523565b805160208183018101805160088252928201919093012091525460ff1681565b6101b3610344366004612244565b610a95565b61022c600081565b6101b361035f3660046122f4565b610ac6565b61022c6103723660046121cc565b60006020819052908152604090205481565b6101b361039236600461226f565b610db8565b6101b36103a53660046124cc565b611202565b61024d6103b8366004612244565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6101b36103ec3660046122f4565b611228565b6101b36103ff3660046123af565b6115bb565b6101b3610412366004612244565b6116d1565b60006001600160e01b03198216637965db0b60e01b148061044857506301ffc9a760e01b6001600160e01b03198316145b92915050565b80518251146104785760405162461bcd60e51b815260040161046f906127fc565b60405180910390fd5b60005b82518110156104ee576104dc8382815181106104a757634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106104cf57634e487b7160e01b600052603260045260246000fd5b60200260200101516116d1565b806104e68161295c565b91505061047b565b505050565b6104fe600033610a6a565b61051a5760405162461bcd60e51b815260040161046f9061283f565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610547600033610a6a565b6105635760405162461bcd60e51b815260040161046f9061283f565b6001600160a01b03838116600090815260066020908152604080832085845290915290205416156105d65760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20546f6b6520616c726561647920537570706f72746564604482015260640161046f565b6001600160a01b0392831660009081526006602090815260408083209383529290522080546001600160a01b03191691909216179055565b60008281526004602052604090206001015461062a813361179d565b6104ee8383611801565b6001600160a01b03811633146106a45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161046f565b6106ae8282611887565b5050565b6001600160a01b03808716600090815260066020908152604080832089845290915290205487918791166106f85760405162461bcd60e51b815260040161046f906127c7565b6107116b43524f535345525f524f4c4560a01b33610a6a565b61072d5760405162461bcd60e51b815260040161046f90612790565b8260088160405161073e91906125f3565b9081526040519081900360200190205460ff16156107965760405162461bcd60e51b8152602060048201526015602482015274141959d41c9bde1e4e881d1e081d5b9b1bd8dad959605a1b604482015260640161046f565b60006107a58a898989896118ee565b905080156108615760016008866040516107bf91906125f3565b908152604051908190036020019020805491151560ff199092169190911790556107f36001600160a01b038b168888611b76565b6001600160a01b03808b1660009081526006602090815260408083208d8452909152908190205490517fe8a9cddb11d86358ad5c2fdd6359f0a6f41de0d399033319becf1364409dacbc92610858928e9291169046908e908e908e908e908e90612703565b60405180910390a15b50505050505050505050565b6001600160a01b03808616600090815260066020908152604080832088845290915290205486918691166108b35760405162461bcd60e51b815260040161046f906127c7565b6108cc6b43524f535345525f524f4c4560a01b33610a6a565b6108e85760405162461bcd60e51b815260040161046f90612790565b826009816040516108f991906125f3565b9081526040519081900360200190205460ff16156109595760405162461bcd60e51b815260206004820152601760248201527f50656750726f78793a20747820726f6c6c6261636b6564000000000000000000604482015260640161046f565b600061096889888989896118ee565b90508015610a5f57600160098660405161098291906125f3565b908152604051908190036020018120805492151560ff199093169290921790915563a9059cbb60e01b81526001600160a01b038a169063a9059cbb906109ce908a908a90600401612764565b602060405180830381600087803b1580156109e857600080fd5b505af11580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190612494565b507f9420db1a0c5e4f45cc0dac05f17e8eb893645981e3c01e8d14120353a487d9e989888888604051610a569493929190612684565b60405180910390a15b505050505050505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610aa0600033610a6a565b610abc5760405162461bcd60e51b815260040161046f9061283f565b6106ae8282611bcc565b6001600160a01b0380851660009081526006602090815260408083208784529091529020548591859116610b0c5760405162461bcd60e51b815260040161046f906127c7565b600554604051626349fb60e01b81526000916001600160a01b031690626349fb90610b3d908a908a90600401612764565b60206040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d91906121e8565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0491906121e8565b6040516370a0823160e01b815233600482015290915085906001600160a01b038316906370a082319060240160206040518083038186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c809190612556565b1015610ce45760405162461bcd60e51b815260206004820152602d60248201527f50656750726f78793a206d73672e73656e646572206e6f7420656e6f7567682060448201526c3a37b5b2b7103a3790313ab93760991b606482015260840161046f565b604051632770a7eb60e21b81526001600160a01b03821690639dc29fac90610d129033908990600401612764565b600060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b5050506001600160a01b03808a1660009081526006602090815260408083208c8452909152908190205490517f79aee25f54411be6ea1ab53c9d3cc3e245c301d481091deda6343da926932c0c9350610da6928c92169046908c9033908d908d906126c1565b60405180910390a15050505050505050565b610dd16b43524f535345525f524f4c4560a01b33610a6a565b610ded5760405162461bcd60e51b815260040161046f90612790565b80600781604051610dfe91906125f3565b9081526040519081900360200190205460ff1615610e545760405162461bcd60e51b8152602060048201526013602482015272141959d41c9bde1e4e881d1e081b5a5b9d1959606a1b604482015260640161046f565b6000610e6388878787876118ee565b905080156111f8576001600784604051610e7d91906125f3565b908152604051908190036020018120805492151560ff1990931692909217909155600554626349fb60e01b82526000916001600160a01b0390911690626349fb90610ece908c908c90600401612764565b60206040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1e91906121e8565b90506000816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f5d57600080fd5b505af1158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9591906121e8565b60055460405163934ac70760e01b81529192506000916001600160a01b039091169063934ac70790610fcd908e908e90600401612764565b60206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190612556565b905080871115611099576001600160a01b03808c1660009081526006602090815260408083208e8452909152908190205490517f56a316ee63540abb5f8fd44be7a6eb2016a90fc9bb3a34ffe13948a44c49a6169261108c928f9291169046908f908f908f908f908f90612703565b60405180910390a16111f4565b6040516340c10f1960e01b81526001600160a01b038316906340c10f19906110c79030908b90600401612764565b600060405180830381600087803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b505060055460405163095ea7b360e01b81526001600160a01b03808716945063095ea7b3935061112b9216908b90600401612764565b602060405180830381600087803b15801561114557600080fd5b505af1158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190612494565b506005546040516340ec172360e01b81526001600160a01b038d81166004830152602482018d9052604482018a90528a81166064830152909116906340ec172390608401600060405180830381600087803b1580156111db57600080fd5b505af11580156111ef573d6000803e3d6000fd5b505050505b5050505b5050505050505050565b60008281526004602052604090206001015461121e813361179d565b6104ee8383611887565b6001600160a01b038085166000908152600660209081526040808320878452909152902054859185911661126e5760405162461bcd60e51b815260040161046f906127c7565b600083116112ce5760405162461bcd60e51b815260206004820152602760248201527f50656750726f78793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b606482015260840161046f565b6001600160a01b03841661131c5760405162461bcd60e51b815260206004820152601560248201527450656750726f78793a20746f20697320656d70747960581b604482015260640161046f565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038716906323b872dd90606401602060405180830381600087803b15801561136a57600080fd5b505af115801561137e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a29190612494565b506005546040516356ecaeb760e01b81526000916001600160a01b0316906356ecaeb7906113d6908a908a90600401612764565b60206040518083038186803b1580156113ee57600080fd5b505afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190612556565b905060006114348583611c30565b905080156115425760055460405163095ea7b360e01b81526001600160a01b038a81169263095ea7b39261147092909116908590600401612764565b602060405180830381600087803b15801561148a57600080fd5b505af115801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190612494565b506005546040516313fcb20160e21b81526001600160a01b038a81166004830152602482018a90526044820184905233606483015290911690634ff2c80490608401600060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b5050505061154288888884610ac6565b818511156111f85760006115568683611c48565b6001600160a01b03808b1660009081526006602090815260408083208d8452909152908190205490519293507f7cb5e2d54d5587c3a3448631884061009b0e2c30e37922a4dd4aed50e11dd7f392610a56928d92169046908d9033908e9089906126c1565b815183511461160c5760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20746f6b656e206c656e677468206e6f74206d61746368604482015260640161046f565b805183511461162d5760405162461bcd60e51b815260040161046f906127fc565b60005b83518110156116cb576116b984828151811061165c57634e487b7160e01b600052603260045260246000fd5b602002602001015184838151811061168457634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106116ac57634e487b7160e01b600052603260045260246000fd5b602002602001015161053c565b806116c38161295c565b915050611630565b50505050565b6116dc600033610a6a565b6116f85760405162461bcd60e51b815260040161046f9061283f565b6001600160a01b0382811660009081526006602090815260408083208584529091529020541661176a5760405162461bcd60e51b815260206004820152601c60248201527f50656750726f78793a20746f6b65206e6f7420737570706f7274656400000000604482015260640161046f565b6001600160a01b0390911660009081526006602090815260408083209383529290522080546001600160a01b0319169055565b6117a78282610a6a565b6106ae576117bf816001600160a01b03166014611c54565b6117ca836020611c54565b6040516020016117db92919061260f565b60408051601f198184030181529082905262461bcd60e51b825261046f9160040161277d565b61180b8282610a6a565b6106ae5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118433390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118918282610a6a565b156106ae5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03851660009081526020819052604081205461196c5760405162461bcd60e51b815260206004820152603060248201527f50726f706f73616c566f74653a207468726573686f6c642073686f756c64206260448201526f0652067726561746572207468616e20360841b606482015260840161046f565b6001600160a01b03861660009081526020818152604080832054905190929161199f918a918a918a918a918a910161259a565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff1615611a175760405162461bcd60e51b815260206004820152601860248201527f5f766f74653a3a70726f706f73616c2066696e69736865640000000000000000604482015260640161046f565b600081815260026020908152604080832033845290915290205460ff1615611a815760405162461bcd60e51b815260206004820152601760248201527f5f766f74653a3a6d73672e73656e64657220766f746564000000000000000000604482015260640161046f565b600081815260036020526040902054611a9b906001611e36565b60008281526003602081815260408084209485556002825280842033855282528320805460ff19166001179055918490529052548211611af3576000818152600160208190526040909120805460ff19168217905592505b6000818152600360209081526040918290205482516001600160a01b038c811682528b811693820193909352918916828401526060820188905233608083015260a082015260c0810184905290517fe458477b94285c9f254a407e2614c39f55230b527ff7f51d76fdf33e251ae9369181900360e00190a1505095945050505050565b6104ee8363a9059cbb60e01b8484604051602401611b95929190612764565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e42565b6001600160a01b038216600081815260208181526040918290208054908590558251938452908301819052908201839052907fb18e91516e037486aa6fa38f56a8aac933fd127180efe9c9745ecbf660a78e449060600160405180910390a1505050565b6000818310611c3f5781611c41565b825b9392505050565b6000611c418284612902565b60606000611c638360026128e3565b611c6e9060026128cb565b67ffffffffffffffff811115611c9457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611cbe576020820181803683370190505b509050600360fc1b81600081518110611ce757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d2457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611d488460026128e3565b611d539060016128cb565b90505b6001811115611de7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d9557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611db957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611de081612945565b9050611d56565b508315611c415760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161046f565b6000611c4182846128cb565b6000611e97826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f149092919063ffffffff16565b8051909150156104ee5780806020019051810190611eb59190612494565b6104ee5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046f565b6060611f238484600085611f2b565b949350505050565b606082471015611f8c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046f565b843b611fda5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046f565b600080866001600160a01b03168587604051611ff691906125f3565b60006040518083038185875af1925050503d8060008114612033576040519150601f19603f3d011682016040523d82523d6000602084013e612038565b606091505b5091509150612048828286612053565b979650505050505050565b60608315612062575081611c41565b8251156120725782518084602001fd5b8160405162461bcd60e51b815260040161046f919061277d565b600082601f83011261209c578081fd5b813560206120b16120ac836128a7565b612876565b80838252828201915082860187848660051b89010111156120d0578586fd5b855b858110156120f75781356120e5816129a3565b845292840192908401906001016120d2565b5090979650505050505050565b600082601f830112612114578081fd5b813560206121246120ac836128a7565b80838252828201915082860187848660051b8901011115612143578586fd5b855b858110156120f757813584529284019290840190600101612145565b600082601f830112612171578081fd5b813567ffffffffffffffff81111561218b5761218b61298d565b61219e601f8201601f1916602001612876565b8181528460208386010111156121b2578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156121dd578081fd5b8135611c41816129a3565b6000602082840312156121f9578081fd5b8151611c41816129a3565b600080600060608486031215612218578182fd5b8335612223816129a3565b92506020840135612233816129a3565b929592945050506040919091013590565b60008060408385031215612256578182fd5b8235612261816129a3565b946020939093013593505050565b60008060008060008060c08789031215612287578182fd5b8635612292816129a3565b95506020870135945060408701356122a9816129a3565b935060608701356122b9816129a3565b92506080870135915060a087013567ffffffffffffffff8111156122db578182fd5b6122e789828a01612161565b9150509295509295509295565b60008060008060808587031215612309578384fd5b8435612314816129a3565b935060208501359250604085013561232b816129a3565b9396929550929360600135925050565b600080600080600060a08688031215612352578081fd5b853561235d816129a3565b9450602086013593506040860135612374816129a3565b925060608601359150608086013567ffffffffffffffff811115612396578182fd5b6123a288828901612161565b9150509295509295909350565b6000806000606084860312156123c3578081fd5b833567ffffffffffffffff808211156123da578283fd5b6123e68783880161208c565b945060208601359150808211156123fb578283fd5b6124078783880161208c565b9350604086013591508082111561241c578283fd5b5061242986828701612104565b9150509250925092565b60008060408385031215612445578182fd5b823567ffffffffffffffff8082111561245c578384fd5b6124688683870161208c565b9350602085013591508082111561247d578283fd5b5061248a85828601612104565b9150509250929050565b6000602082840312156124a5578081fd5b81518015158114611c41578182fd5b6000602082840312156124c5578081fd5b5035919050565b600080604083850312156124de578182fd5b8235915060208301356124f0816129a3565b809150509250929050565b60006020828403121561250c578081fd5b81356001600160e01b031981168114611c41578182fd5b600060208284031215612534578081fd5b813567ffffffffffffffff81111561254a578182fd5b611f2384828501612161565b600060208284031215612567578081fd5b5051919050565b60008151808452612586816020860160208601612919565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b166014840152808660601b1660288401525083603c83015282516125e281605c850160208701612919565b91909101605c019695505050505050565b60008251612605818460208701612919565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612647816017850160208801612919565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612678816028840160208801612919565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126b79083018461256e565b9695505050505050565b6001600160a01b0397881681529587166020870152604086019490945260608501929092528416608084015290921660a082015260c081019190915260e00190565b6001600160a01b038981168252888116602083015260408201889052606082018790528581166080830152841660a082015260c0810183905261010060e082018190526000906127558382018561256e565b9b9a5050505050505050505050565b6001600160a01b03929092168252602082015260400190565b602081526000611c41602083018461256e565b6020808252601f908201527f50656750726f78793a2063616c6c6572206973206e6f742063726f7373657200604082015260600190565b6020808252818101527f50656750726f78793a206e6f7420737570706f7274207468697320746f6b656e604082015260600190565b60208082526023908201527f50656750726f78793a20636861696e494473206c656e677468206e6f74206d616040820152620e8c6d60eb1b606082015260800190565b6020808252601d908201527f50656750726f78793a2063616c6c6572206973206e6f742061646d696e000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561289f5761289f61298d565b604052919050565b600067ffffffffffffffff8211156128c1576128c161298d565b5060051b60200190565b600082198211156128de576128de612977565b500190565b60008160001904831182151516156128fd576128fd612977565b500290565b60008282101561291457612914612977565b500390565b60005b8381101561293457818101518382015260200161291c565b838111156116cb5750506000910152565b60008161295457612954612977565b506000190190565b600060001982141561297057612970612977565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146129b857600080fd5b5056fea2646970667358221220fb40005b699bca0ba819a9575e60cff93fbf79b090865a554b439c8008a4c57764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5998,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "threshold",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6002,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "isFinished",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6008,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "isVoted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6012,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2447,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2442_storage)"
      },
      {
        "astId": 7516,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "pegSwap",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPegSwap)6990"
      },
      {
        "astId": 7522,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "supportToken",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 7526,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "txMinted",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 7530,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "txUnlocked",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 7534,
        "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
        "label": "txRollbacked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPegSwap)6990": {
        "encoding": "inplace",
        "label": "contract IPegSwap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2442_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2442_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)2442_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2439,
            "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2441,
            "contract": "contracts/pegbridge/PegProxy.sol:PegProxy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}