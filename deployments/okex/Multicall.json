{
  "address": "0x43e9cebf47397b510eB0a8aD9478dA2aC05F969c",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf262a039a754aa8895da222cb0377572ab3cfb75e7150fe8a8942c01d09d7b01",
  "receipt": {
    "to": null,
    "from": "0x0E04597D3397C9cA39C1B9f6907004Df507463d7",
    "contractAddress": "0x43e9cebf47397b510eB0a8aD9478dA2aC05F969c",
    "transactionIndex": 0,
    "gasUsed": "341974",
    "logsBloom": "0x
    "blockHash": "0x6a0d9f139ce7aff36faeeb425db171bdf1da8148573d0f4cf0d99576d42a3414",
    "transactionHash": "0xf262a039a754aa8895da222cb0377572ab3cfb75e7150fe8a8942c01d09d7b01",
    "logs": [],
    "blockNumber": 3029896,
    "cumulativeGasUsed": "341974",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ddc692e08f8ee3e2684f0a466f8897ed",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"pragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success);\\n            returnData[i] = ret;\\n        }\\n    }\\n    // Helper functions\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n}\",\"keccak256\":\"0x1c56222060d14d318c4cca17653ea13a8be9d25ce98a1e654eeb9c7e567095ac\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610539806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a29190610426565b60405180910390f35b6100be6100b93660046102a8565b610123565b6040516100a292919061042f565b610095610245565b6100956100e2366004610287565b61024e565b61009561025b565b61009561025f565b6100ff610263565b6040516100a29190610412565b61009561011a3660046103de565b610267565b4290565b8051439060609067ffffffffffffffff8111801561014057600080fd5b5060405190808252806020026020018201604052801561017457816020015b606081526020019060019003908161015f5790505b50905060005b835181101561023f5760008085838151811061019257fe5b6020026020010151600001516001600160a01b03168684815181106101b357fe5b6020026020010151602001516040516101cc91906103f6565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b50915091508161021d57600080fd5b8084848151811061022a57fe5b6020908102919091010152505060010161017a565b50915091565b60001943014090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356001600160a01b038116811461028257600080fd5b919050565b600060208284031215610298578081fd5b6102a18261026b565b9392505050565b600060208083850312156102ba578182fd5b67ffffffffffffffff80843511156102d0578283fd5b8335840185601f8201126102e2578384fd5b8035828111156102ee57fe5b6102fb84858302016104af565b81815284810190838601875b848110156103cf5781358601601f196040828e0382011215610327578a8bfd5b604051604081018181108b8211171561033c57fe5b60405261034a838c0161026b565b815260408301358a81111561035d578c8dfd5b8084019350508d603f840112610371578b8cfd5b8a8301358a81111561037f57fe5b61038f8c84601f840116016104af565b92508083528e60408286010111156103a5578c8dfd5b80604085018d85013782018b018c9052808b01919091528552509287019290870190600101610307565b50909998505050505050505050565b6000602082840312156103ef578081fd5b5035919050565b600082516104088184602087016104d3565b9190910192915050565b6001600160a01b0391909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156104a157878603605f190184528151805180885261048281888a018985016104d3565b601f01601f19169690960185019550928401929084019060010161045b565b509398975050505050505050565b60405181810167ffffffffffffffff811182821017156104cb57fe5b604052919050565b60005b838110156104ee5781810151838201526020016104d6565b838111156104fd576000848401525b5050505056fea26469706673582212205f94252fbbbdb1e68c7dea562400348c826a635af60939eda9040c4551ec238d64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a29190610426565b60405180910390f35b6100be6100b93660046102a8565b610123565b6040516100a292919061042f565b610095610245565b6100956100e2366004610287565b61024e565b61009561025b565b61009561025f565b6100ff610263565b6040516100a29190610412565b61009561011a3660046103de565b610267565b4290565b8051439060609067ffffffffffffffff8111801561014057600080fd5b5060405190808252806020026020018201604052801561017457816020015b606081526020019060019003908161015f5790505b50905060005b835181101561023f5760008085838151811061019257fe5b6020026020010151600001516001600160a01b03168684815181106101b357fe5b6020026020010151602001516040516101cc91906103f6565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b50915091508161021d57600080fd5b8084848151811061022a57fe5b6020908102919091010152505060010161017a565b50915091565b60001943014090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356001600160a01b038116811461028257600080fd5b919050565b600060208284031215610298578081fd5b6102a18261026b565b9392505050565b600060208083850312156102ba578182fd5b67ffffffffffffffff80843511156102d0578283fd5b8335840185601f8201126102e2578384fd5b8035828111156102ee57fe5b6102fb84858302016104af565b81815284810190838601875b848110156103cf5781358601601f196040828e0382011215610327578a8bfd5b604051604081018181108b8211171561033c57fe5b60405261034a838c0161026b565b815260408301358a81111561035d578c8dfd5b8084019350508d603f840112610371578b8cfd5b8a8301358a81111561037f57fe5b61038f8c84601f840116016104af565b92508083528e60408286010111156103a5578c8dfd5b80604085018d85013782018b018c9052808b01919091528552509287019290870190600101610307565b50909998505050505050505050565b6000602082840312156103ef578081fd5b5035919050565b600082516104088184602087016104d3565b9190910192915050565b6001600160a01b0391909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156104a157878603605f190184528151805180885261048281888a018985016104d3565b601f01601f19169690960185019550928401929084019060010161045b565b509398975050505050505050565b60405181810167ffffffffffffffff811182821017156104cb57fe5b604052919050565b60005b838110156104ee5781810151838201526020016104d6565b838111156104fd576000848401525b5050505056fea26469706673582212205f94252fbbbdb1e68c7dea562400348c826a635af60939eda9040c4551ec238d64736f6c63430007060033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}