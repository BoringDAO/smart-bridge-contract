{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xa1C094Be9E6E3d5FA1815aF8c2c80fF19a4FEcdb",
      "txHash": "0x1d8bf4603c4bdcab9bef32aa91425d8edae82c8a62f7f6d1ebe6d55bdad6f6dc",
      "kind": "uups"
    },
    {
      "address": "0x364701C4276B800A7493C84785E8ECD97258AcDe",
      "txHash": "0x1fc92669809933a17814099b992e78bf845ce49eba5b07e863724058000e7f34",
      "kind": "uups"
    },
    {
      "address": "0x225247882FD7396c62E29707DA0890151208161a",
      "txHash": "0xbeb4e60507ddc5191f632462f004dfcbcc40a181985cdaa354d11578623fd17e",
      "kind": "uups"
    }
  ],
  "impls": {
    "565ed7945997fc159e504f2b748c15c7527d2075b21b4d49f4de98f91ca97d63": {
      "address": "0x68D97B7A961a5239B9F911DA8dEb57F6eF6e5e28",
      "txHash": "0xb0ed5ddd61e38f62d8bfa4480d7b7de4057dbd58a935f39b322c758d8af05b2f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
          },
          {
            "contract": "ProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/ProposalVote.sol:10"
          },
          {
            "contract": "ProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/ProposalVote.sol:12"
          },
          {
            "contract": "ProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/ProposalVote.sol:13"
          },
          {
            "contract": "ProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/ProposalVote.sol:14"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeAmountM",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twoway/TwoWayToll.sol:11"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeRatioM",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twoway/TwoWayToll.sol:12"
          },
          {
            "contract": "TwoWayToll",
            "label": "removeFeeAmount",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twoway/TwoWayToll.sol:14"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeTo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twoway/TwoWayToll.sol:15"
          },
          {
            "contract": "TwoWayToll",
            "label": "feeToDev",
            "type": "t_address",
            "src": "contracts/twoway/TwoWayToll.sol:16"
          },
          {
            "contract": "TwoWay",
            "label": "supportToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twoway/TwoWay.sol:28"
          },
          {
            "contract": "TwoWay",
            "label": "txMinted",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twoway/TwoWay.sol:29"
          },
          {
            "contract": "TwoWay",
            "label": "txUnlocked",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twoway/TwoWay.sol:30"
          },
          {
            "contract": "TwoWay",
            "label": "txRollbacked",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twoway/TwoWay.sol:31"
          },
          {
            "contract": "TwoWay",
            "label": "pairs",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/twoway/TwoWay.sol:34"
          },
          {
            "contract": "TwoWay",
            "label": "unlockFeeOn",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/twoway/TwoWay.sol:36"
          },
          {
            "contract": "TwoWay",
            "label": "chainid",
            "type": "t_uint256",
            "src": "contracts/twoway/TwoWay.sol:38"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "59c608122cefa3ca1c473df53e961c7429bcaa5712168ecb723199765d9afe5c": {
      "address": "0x6334c58adb5E5A86F548d4512e86a4D895EaB70F",
      "txHash": "0x86feaf10116d9ff1113bb23b305e6f14451b2f82804ef4a73d3bd0c1cabdebc5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
          },
          {
            "contract": "SwapPair",
            "label": "token0",
            "type": "t_address",
            "src": "contracts/twoway/SwapPair.sol:25"
          },
          {
            "contract": "SwapPair",
            "label": "reserve0",
            "type": "t_uint256",
            "src": "contracts/twoway/SwapPair.sol:27"
          },
          {
            "contract": "SwapPair",
            "label": "supportChainids",
            "type": "t_struct(UintSet)3476_storage",
            "src": "contracts/twoway/SwapPair.sol:29"
          },
          {
            "contract": "SwapPair",
            "label": "reserve1s",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/twoway/SwapPair.sol:30"
          },
          {
            "contract": "SwapPair",
            "label": "totalReserve1s",
            "type": "t_uint256",
            "src": "contracts/twoway/SwapPair.sol:31"
          },
          {
            "contract": "SwapPair",
            "label": "twoWay",
            "type": "t_address",
            "src": "contracts/twoway/SwapPair.sol:33"
          },
          {
            "contract": "SwapPair",
            "label": "diff0",
            "type": "t_uint256",
            "src": "contracts/twoway/SwapPair.sol:35"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(UintSet)3476_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3018_storage"
              }
            ]
          },
          "t_struct(Set)3018_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0231d3b99fbe9d076496d701354d5ad4f1be2e4e7d63dc7f0c2d924d8bb4ee27": {
      "address": "0xe4aF65953eeB4b868B7b7ff33808E22069B09916",
      "txHash": "0xa327fb26be841163831cecb3a5065fa6c6d90711e2b77eae86b6d95dec0e9980",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8615_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8615_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e6d27c69768338c3526b7367972ce4d27e2f52d61dfcb606e769448b66bba374": {
      "address": "0x4C6162edad2c4389d2536558789fd91FFa2E7861",
      "txHash": "0x5bcf86df1c2dbdcfbd170ebf3435bc3a2df3a2133eb21e07e367a27abe9fa8c3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8700_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8700_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8700_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8700_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f5f855e3aa9a031649d708e27b00e2eee84472bbd049ae70dc399a82fea43ecd": {
      "address": "0x0Bf101ab5CC8C6Be93D9fb6742e1e4d724aFa414",
      "txHash": "0x2d81a04798c42e31decd3f7a0bc65da91c8ef48e5785decc9612173d8c2d1900",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:20"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8701_storage))",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:33"
          },
          {
            "contract": "NBridge",
            "label": "isInWhitelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NBridge.sol:35"
          },
          {
            "contract": "NBridge",
            "label": "isCoin",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/native/NBridge.sol:38"
          },
          {
            "contract": "NBridge",
            "label": "locked",
            "type": "t_bool",
            "src": "contracts/native/NBridge.sol:39"
          },
          {
            "contract": "NBridge",
            "label": "eventIndex0",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/native/NBridge.sol:42"
          },
          {
            "contract": "NBridge",
            "label": "eventHeights0",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:43"
          },
          {
            "contract": "NBridge",
            "label": "eventIndex1",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:46"
          },
          {
            "contract": "NBridge",
            "label": "eventHeights1",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/native/NBridge.sol:47"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8701_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8701_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8701_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
