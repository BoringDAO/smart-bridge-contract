{
  "address": "0x45B126397189101e9Cf3B7BD4De0a847BaA9D442",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToDev",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CrossBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeRatio",
          "type": "uint256"
        }
      ],
      "name": "FeeChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "FeeToChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "FeeToRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Rollback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Rollbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chianID0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CROSSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "addSupportToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0s",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "token1s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        }
      ],
      "name": "addSupportTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnBoringToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeAmountFix",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmountRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "crossIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "crossOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeAmountM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeRatioM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToDev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getMaxToken0AmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getMaxToken1AmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "removeFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "removePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "removeSupportToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIDs",
          "type": "uint256[]"
        }
      ],
      "name": "removeSupportTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "rollback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeRatio",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setFeeToDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        }
      ],
      "name": "setRemovalMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setRemoveFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "twoWayFeePool",
      "outputs": [
        {
          "internalType": "contract ITwoWayFeePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txRollbacked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "txUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txid",
          "type": "string"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39086bd201fa43b756ad9c242ded5e53b11849a3e81ede486994e70fb6565bc5",
  "receipt": {
    "to": null,
    "from": "0x2353178C6c05378812f024A783541857634A1e82",
    "contractAddress": "0x45B126397189101e9Cf3B7BD4De0a847BaA9D442",
    "transactionIndex": 2,
    "gasUsed": "3286138",
    "logsBloom": "0x
    "blockHash": "0xdf7d0fc6a98c8693c1ee2432ad007ef81dd0df42ea997b58ae83be0b2a2c55b8",
    "transactionHash": "0x39086bd201fa43b756ad9c242ded5e53b11849a3e81ede486994e70fb6565bc5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 4775844,
        "transactionHash": "0x39086bd201fa43b756ad9c242ded5e53b11849a3e81ede486994e70fb6565bc5",
        "address": "0x45B126397189101e9Cf3B7BD4De0a847BaA9D442",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002353178c6c05378812f024a783541857634a1e82",
          "0x0000000000000000000000002353178c6c05378812f024a783541857634a1e82"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xdf7d0fc6a98c8693c1ee2432ad007ef81dd0df42ea997b58ae83be0b2a2c55b8"
      }
    ],
    "blockNumber": 4775844,
    "cumulativeGasUsed": "4614173",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2353178C6c05378812f024A783541857634A1e82"
  ],
  "solcInputHash": "c2aa850b1a3381226981cb5e4976532c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToDev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CrossBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeToChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FeeToRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Rollback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Rollbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chianID0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"addSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0s\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"}],\"name\":\"addSupportTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBoringToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmountFix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"crossIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"crossOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeAmountM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeRatioM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxToken0AmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxToken1AmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"removeFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"removeSupportToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIDs\",\"type\":\"uint256[]\"}],\"name\":\"removeSupportTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"rollback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeToDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setRemovalMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setRemoveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twoWayFeePool\",\"outputs\":[{\"internalType\":\"contract ITwoWayFeePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txRollbacked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"txUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/twoway/TwoWay.sol\":\"TwoWay\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ProposalVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract ProposalVote {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) public threshold;\\n\\n    mapping(bytes32 => bool) isFinished;\\n    mapping(bytes32 => mapping(address => bool)) isVoted;\\n    mapping(bytes32 => uint256) counter;\\n\\n    event ProposalVoted(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address proposer,\\n        uint256 count,\\n        uint256 threshold\\n    );\\n\\n    event ThresholdChanged(address token, uint256 oldThreshold, uint256 newThreshold);\\n\\n    function _setThreshold(address token, uint256 _threshold) internal virtual {\\n        uint256 oldThreshold = threshold[token];\\n        threshold[token] = _threshold;\\n        emit ThresholdChanged(token, oldThreshold, _threshold);\\n    }\\n\\n    function _vote(\\n        address tokenTo,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) internal virtual returns (bool result) {\\n        require(threshold[tokenTo] > 0, \\\"ProposalVote: threshold should be greater than 0\\\");\\n        uint256 count = threshold[tokenTo];\\n        bytes32 mid = keccak256(abi.encodePacked(tokenTo, from, to, amount, txid));\\n        require(isFinished[mid] == false, \\\"_vote::proposal finished\\\");\\n        require(isVoted[mid][msg.sender] == false, \\\"_vote::msg.sender voted\\\");\\n        counter[mid] = counter[mid].add(1);\\n        isVoted[mid][msg.sender] = true;\\n\\n        if (counter[mid] >= count) {\\n            isFinished[mid] = true;\\n            result = true;\\n        }\\n\\n        emit ProposalVoted(tokenTo, from, to, amount, msg.sender, counter[mid], count);\\n    }\\n}\\n\",\"keccak256\":\"0x0f7247daad2583af438ec1aace160eebc48ae66fe24112c28fbf020aff3d1780\",\"license\":\"MIT\"},\"contracts/interface/IBoringToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBoringToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9b558f607a5f506c5ff714d1e3a78601d87a93a07d4cfa3e2f86e8c0b6145452\",\"license\":\"MIT\"},\"contracts/interface/ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISwapPair {\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function token0() external returns (address);\\n\\n    function token1() external returns (address);\\n\\n    function swap(address to, bool direction) external; // direction: token0 -> token1 or token1 -> token0\\n\\n    function getReserves() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x9c4ae7b77df05c170e001fa46d481d32e11c997350d120a70c68b88b536443d1\",\"license\":\"MIT\"},\"contracts/interface/ITwoWayFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITwoWayFeePool {\\n\\tfunction notify(uint256 amount) external;\\n}\",\"keccak256\":\"0x0cd26c51f7b22b7ffb5e503f1654744c0496fb3112ad7f38dc0abfd9a1603ae8\",\"license\":\"MIT\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\",\"keccak256\":\"0x59daa50e2a7b0432cf597060735aea01306e124bee6361882812e489797f057d\",\"license\":\"MIT\"},\"contracts/twoway/TwoWay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../interface/ISwapPair.sol\\\";\\nimport \\\"../interface/IBoringToken.sol\\\";\\nimport \\\"../interface/ITwoWayFeePool.sol\\\";\\nimport \\\"../ProposalVote.sol\\\";\\nimport \\\"./TwoWayToll.sol\\\";\\n\\ncontract TwoWay is ProposalVote, AccessControl, TwoWayToll {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    bytes32 public constant CROSSER_ROLE = \\\"CROSSER_ROLE\\\";\\n\\n\\n    // mapping(address => address) public supportToken; // eg.ethToken => bscToke\\n    mapping(address => mapping(uint => address)) public supportToken;\\n    mapping(string => bool) public txMinted;\\n    mapping(string => bool) public txUnlocked;\\n    mapping(string => bool) public txRollbacked;\\n\\n    ITwoWayFeePool public twoWayFeePool;\\n\\n    mapping(address => mapping(uint256 => address)) public pairs;\\n    mapping(address => uint256) removalMinimum;\\n\\n    //================= Event ==================//\\n    event CrossBurn(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount);\\n    event Lock(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount);\\n    event Unlock(address token0, address token1, uint256 chianID0, uint256 chainID1, address from, address to, uint256 amount, string txid);\\n    event Rollback(address token0, address token1, uint256 chainID0, uint256 chainID1, address from, address to, uint256 amount, string txid);\\n    event Rollbacked(address token0, address from, uint256 amount, string txid);\\n\\n    constructor(address _feeToDev) TwoWayToll(_feeToDev) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // view\\n    // todo\\n    function getPair(address token, uint256 chainID) public view onlySupportToken(token, chainID) returns(address) {\\n        return pairs[token][chainID];\\n    }\\n\\n    function addPair(address token, address pair, uint256 chainID) public onlyAdmin {\\n        require(pairs[token][chainID] == address(0), \\\"token already supported\\\");\\n        pairs[token][chainID] = pair;\\n    }\\n\\n    function setRemovalMinimum(address token0, uint256 minimum) public onlyAdmin {\\n        removalMinimum[token0] = minimum;\\n    }\\n\\n    function removePair(address token, uint256 chainID) public onlyAdmin {\\n        require(pairs[token][chainID] != address(0), \\\"token not supported\\\");\\n        delete pairs[token][chainID];\\n    }\\n\\n    function addLiquidity(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amount,\\n        address to\\n    ) public onlySupportToken(token0, chainID) returns (uint256 liquidity) {\\n        address pair = pairs[token0][chainID];\\n\\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amount);\\n        liquidity = ISwapPair(pair).mint(to);\\n    }\\n\\n    function removeLiquidity(\\n        address token0,\\n        uint256 chainID,\\n        uint256 liquidity,\\n        address to\\n    ) public onlySupportToken(token0, chainID) returns (uint256 amount0, uint256 amount1) {\\n        require(removalMinimum[token0] < liquidity, \\\"liquidity is less than minimum\\\");\\n        address pair = pairs[token0][chainID];\\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity);\\n        (amount0, amount1) = ISwapPair(pair).burn(msg.sender);\\n        (uint removeFeeAmount,) = calculateRemoveFee(token0, chainID, amount0);\\n\\n        if (removeFeeAmount > 0) {\\n            IERC20(token0).safeTransferFrom(msg.sender, feeToDev, removeFeeAmount);\\n        }\\n\\n        if (amount1 > 0) {\\n            burnBoringToken(msg.sender, token0, chainID, to, amount1);\\n        }\\n    }\\n\\n    // token0 -> token1\\n    function swapToken0ForToken1(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) internal onlySupportToken(token0, chainID) {\\n        require(amountIn > 0, \\\"input must be greater than 0\\\");\\n        address pair = pairs[token0][chainID];\\n\\n        // transfer erc20 token to pair address\\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amountIn);\\n        ISwapPair(pair).swap(to, true);\\n    }\\n\\n    function swapToken1ForToken0(\\n        address token0,\\n        uint256 chainID,\\n        uint256 amountIn,\\n        address to\\n    ) internal onlySupportToken(token0, chainID) {\\n        require(amountIn > 0, \\\"input must be greater than 0\\\");\\n        address pair = pairs[token0][chainID];\\n        address token1 = ISwapPair(pair).token1();\\n\\n        // transfer bor-erc20 token to pair address\\n        IERC20(token1).safeTransferFrom(msg.sender, pair, amountIn);\\n        ISwapPair(pair).swap(to, false);\\n    }\\n\\n    function getMaxToken1AmountOut(address token0, uint256 chainID) public view returns (uint256) {\\n        address pair = pairs[token0][chainID];\\n        (, uint256 _reserve1) = ISwapPair(pair).getReserves();\\n\\n        return _reserve1;\\n    }\\n\\n    function getMaxToken0AmountOut(address token0, uint256 chainID) public view returns (uint256) {\\n        address pair = pairs[token0][chainID];\\n        (uint256 _reserve0, ) = ISwapPair(pair).getReserves();\\n\\n        return _reserve0;\\n    }\\n\\n    function crossOut(\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) public onlySupportToken(token0, chainID) {\\n        require(amount > 0, \\\"PegProxy: amount must be greater than 0\\\");\\n        require(to != address(0), \\\"PegProxy: to is empty\\\");\\n\\n        (uint256 feeAmountFix, uint256 feeAmountRatio, uint256 remainAmount) = calculateFee(token0, chainID, amount);\\n        IERC20(token0).safeTransferFrom(msg.sender, feeTo[token0][chainID], feeAmountRatio);\\n        twoWayFeePool.notify(feeAmountRatio);\\n\\n        if (feeAmountFix > 0) {\\n            IERC20(token0).safeTransferFrom(msg.sender, feeToDev, feeAmountFix);\\n        }\\n\\n        IERC20(token0).safeTransferFrom(msg.sender, address(this), remainAmount);\\n\\n        uint256 out = getMaxToken1AmountOut(token0, chainID);\\n        uint256 burnAmount = remainAmount.min(out);\\n        if (burnAmount > 0) {\\n            swapToken0ForToken1(token0, chainID, burnAmount, msg.sender);\\n            _burnBoringToken(msg.sender, token0, chainID, to, burnAmount);\\n        }\\n        if (amount > out) {\\n            uint256 lockAmount = remainAmount.sub(burnAmount);\\n            emit Lock(token0, supportToken[token0][chainID], block.chainid, chainID, msg.sender, to, lockAmount);\\n        }\\n    }\\n\\n    function crossIn(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlyCrosser whenNotMinted(txid) {\\n        bool result = _vote(token0, from, to, amount, txid);\\n        if (result) {\\n            // mint token\\n            txMinted[txid] = true;\\n            address pair = pairs[token0][chainID];\\n            address borToken = ISwapPair(pair).token1();\\n            uint token0Amount = getMaxToken0AmountOut(token0, chainID);\\n            if (amount > token0Amount) {\\n                emit Rollback(token0, supportToken[token0][chainID], block.chainid, chainID, from, to, amount, txid);\\n            } else {\\n                IBoringToken(borToken).mint(address(this), amount);\\n                swapToken1ForToken0(token0, chainID, amount, to);\\n            }\\n        }\\n    }\\n\\n    function rollback(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlySupportToken(token0, chainID) onlyCrosser whenNotRollbacked(txid) {\\n        bool result = _vote(token0, from, from, amount, txid);\\n        if (result) {\\n            txRollbacked[txid] = true;\\n            IERC20(token0).safeTransfer(from, amount);\\n            emit Rollbacked(token0, from, amount, txid);\\n        }\\n    }\\n\\n    function unlock(\\n        address token0,\\n        uint256 chainID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory txid\\n    ) public onlySupportToken(token0, chainID) onlyCrosser whenNotUnlocked(txid) {\\n        bool result = _vote(token0, from, to, amount, txid);\\n        if (result) {\\n            txUnlocked[txid] = true;\\n            IERC20(token0).safeTransfer(to, amount);\\n            emit Unlock(token0, supportToken[token0][chainID], block.chainid, chainID, from, to, amount, txid);\\n        }\\n    }\\n\\n    function _burnBoringToken(\\n        address sender,\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        address pair = pairs[token0][chainID];\\n        address token1 = ISwapPair(pair).token1();\\n\\n        require(IERC20(token1).balanceOf(sender) >= amount, \\\"msg.sender not enough token to burn\\\");\\n\\n        IBoringToken(token1).burn(sender, amount);\\n        emit CrossBurn(token0, supportToken[token0][chainID], block.chainid, chainID,  sender, to, amount);\\n    }\\n\\n\\n    function burnBoringToken(\\n        address sender,\\n        address token0,\\n        uint256 chainID,\\n        address to,\\n        uint256 amount\\n    ) public onlySupportToken(token0, chainID) {\\n        _burnBoringToken(sender, token0, chainID, to, amount);\\n    }\\n\\n    //================ Setter ==================//\\n    function setThreshold(address token, uint256 _threshold) public onlyAdmin {\\n        _setThreshold(token, _threshold);\\n    }\\n\\n    function addSupportToken(address token0, address token1, uint256 chainID) public onlyAdmin {\\n        require(supportToken[token0][chainID] == address(0), \\\"PegProxy: Toke already Supported\\\");\\n        supportToken[token0][chainID] = token1;\\n    }\\n\\n    function removeSupportToken(address token0, uint256 chainID) public onlyAdmin {\\n        require(supportToken[token0][chainID] != address(0), \\\"PegProxy: toke not supported\\\");\\n        delete supportToken[token0][chainID];\\n    }\\n\\n    function addSupportTokens(address[] memory token0s, address[] memory token1s, uint256[] memory chainIDs) public {\\n        require(token0s.length == token1s.length, \\\"PegProxy: token length not match\\\");\\n        require(token0s.length == chainIDs.length, \\\"PegProxy: chainIDs length not match\\\");\\n        for (uint256 i; i <token0s.length; i++) {\\n            addSupportToken(token0s[i], token1s[i], chainIDs[i]);\\n        }\\n    }\\n\\n    function removeSupportTokens(address[] memory token0s, uint256[] memory chainIDs) public {\\n        require(token0s.length == chainIDs.length, \\\"PegProxy: chainIDs length not match\\\");\\n        for (uint256 i; i < token0s.length; i++) {\\n            removeSupportToken(token0s[i], chainIDs[i]);\\n        }\\n    }\\n\\n    //================ Toll =====================//\\n    function setFeeTo(address token0, uint256 chainID, address account) external onlyAdmin {\\n        _setFeeTo(token0, chainID, account);\\n    }\\n\\n    function setFee(address token0, uint256 chainID, uint256 feeAmount, uint256 feeRatio) external onlyAdmin {\\n        _setFee(token0, chainID, feeAmount, feeRatio);\\n    }\\n\\n    function setFeeToDev(address account) external {\\n        _setFeeToDev(account);\\n    }\\n\\n    function setRemoveFee(address token0, uint256 chainID, uint256 _feeAmount) external onlyAdmin {\\n        _setRemoveFee(token0, chainID, _feeAmount);\\n    }\\n\\n    //================ Modifier =================//\\n    modifier onlySupportToken(address token, uint256 chainID) {\\n        require(supportToken[token][chainID] != address(0), \\\"PegProxy: not support this token\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"PegProxy: caller is not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCrosser {\\n        require(hasRole(CROSSER_ROLE, msg.sender), \\\"PegProxy: caller is not crosser\\\");\\n        _;\\n    }\\n\\n    modifier whenNotMinted(string memory _txid) {\\n        require(txMinted[_txid] == false, \\\"PegProxy: tx minted\\\");\\n        _;\\n    }\\n\\n    modifier whenNotUnlocked(string memory _txid) {\\n        require(txUnlocked[_txid] == false, \\\"PegProxy: tx unlocked\\\");\\n        _;\\n    }\\n\\n    modifier whenNotRollbacked(string memory _txid) {\\n        require(txRollbacked[_txid] == false, \\\"PegProxy: tx rollbacked\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xec89f91d773fa2a8ff7fcd51c4203da9a60748041a0772f4664ce16691008b88\",\"license\":\"MIT\"},\"contracts/twoway/TwoWayToll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/SafeDecimalMath.sol\\\";\\n\\ncontract TwoWayToll {\\n    using SafeDecimalMath for uint256;\\n\\n    mapping(address => mapping(uint256 => uint256)) public feeAmountM;\\n    mapping(address => mapping(uint256 => uint256)) public feeRatioM;\\n    mapping(address => mapping(uint256 => uint256)) public removeFeeAmount;\\n    // mapping(address => mapping(uint256 => EnumerableSet.AddressSet)) internal feeToSet;\\n    mapping(address => mapping(uint256 => address)) public feeTo;\\n    address public feeToDev;\\n\\n    event FeeChange(address token, uint256 chainID, uint256 feeAmount, uint256 feeRatio);\\n    event FeeToRemoved(address token, uint256 chainID, address account);\\n    event FeeToChanged(address token, uint256 chainID, address account);\\n\\n    constructor(address _feeToDev) {\\n        feeToDev = _feeToDev;\\n    }\\n\\n    function _setFeeToDev(address _feeToDev) internal {\\n        feeToDev = _feeToDev;\\n    }\\n\\n    function _setFee(\\n        address token,\\n        uint256 chainID,\\n        uint256 _feeAmount,\\n        uint256 _feeRatio\\n    ) internal virtual {\\n        require(_feeRatio <= 1e18, \\\"fee ratio not correct\\\");\\n\\n        feeAmountM[token][chainID] = _feeAmount;\\n        feeRatioM[token][chainID] = _feeRatio;\\n        emit FeeChange(token, chainID, _feeAmount, _feeRatio);\\n    }\\n\\n    function _setRemoveFee(\\n        address token,\\n        uint256 chainID,\\n        uint256 _feeAmount\\n    ) internal virtual {\\n        removeFeeAmount[token][chainID] = _feeAmount;\\n    }\\n\\n    function _setFeeTo(address token, uint256 chainID, address account) internal virtual {\\n        require(feeTo[token][chainID] != account, \\\"Toll::account was feeTo already\\\");\\n        feeTo[token][chainID] = account;\\n        emit FeeToChanged(token, chainID, account);\\n    }\\n\\n    function calculateFee(\\n        address token,\\n        uint256 chainID,\\n        uint256 amount\\n    ) public view virtual returns (uint256 feeAmountFix, uint256 feeAmountRatio, uint256 remainAmount) {\\n        feeAmountFix = feeAmountM[token][chainID];\\n        uint256 _feeRatio = feeRatioM[token][chainID];\\n        feeAmountRatio = amount.multiplyDecimal(_feeRatio);\\n        remainAmount = amount - feeAmountFix - feeAmountRatio;\\n    }\\n\\n    function calculateRemoveFee(address token, uint256 chainID, uint256 amount) public view virtual returns (uint256 feeAmount, uint256 remainAmount) {\\n        require(amount > removeFeeAmount[token][chainID], \\\"not enough token\\\");\\n        feeAmount = removeFeeAmount[token][chainID];\\n        remainAmount = amount - feeAmount;\\n    } \\n}\\n\",\"keccak256\":\"0x443ed6c2418190e4eb780f64e1e30c841298a31e3f5dab733cc2222154982a14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003aea38038062003aea833981016040819052620000349162000117565b600980546001600160a01b0319166001600160a01b0383161790556200005c60003362000063565b5062000147565b6200006f828262000073565b5050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166200006f5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006020828403121562000129578081fd5b81516001600160a01b038116811462000140578182fd5b9392505050565b61399380620001576000396000f3fe608060405234801561001057600080fd5b50600436106102735760003560e01c806391d1485411610151578063c369c773116100c3578063d692f4c511610087578063d692f4c51461069f578063db697be4146106d3578063df7e600a14610707578063ee8a6acf1461071a578063f06410f81461072d578063f8f8d5c01461074057600080fd5b8063c369c7731461061a578063c86ec2bf14610646578063cf28f67c14610666578063d547741f14610679578063d5e04b761461068c57600080fd5b8063a217fddf11610115578063a217fddf146105b3578063a5597a94146105bb578063af78881f146105ce578063b33efbd5146105e1578063b5acfa62146105f4578063be90c71b1461060757600080fd5b806391d1485414610521578063934ac70714610534578063967145af146105475780639c8d70be146105755780639d879990146105a057600080fd5b80632f2ff15d116101ea57806356ecaeb7116101ae57806356ecaeb71461046a5780635cb0c1fb1461047d57806364078943146104a8578063715ec45c146104d357806381660f5d146104e65780638fed0b2c146104f957600080fd5b80632f2ff15d146103ed57806336568abe146104005780633f3c64761461041357806353ad72e51461042657806356cf02d91461045457600080fd5b8063100be3bd1161023c578063100be3bd1461034257806310c274021461035557806312fef692146103835780631b322be4146103a4578063248a9ca3146103b75780632599c037146103da57600080fd5b80626349fb1461027857806301ffc9a7146102a85780630324ef9c146102cb57806303507ba5146102f957806303d405131461030e575b600080fd5b61028b610286366004612fe6565b610753565b6040516001600160a01b0390911681526020015b60405180910390f35b6102bb6102b6366004613395565b6107cf565b604051901515815260200161029f565b6102de6102d9366004613192565b610806565b6040805193845260208401929092529082015260600161029f565b61030c6103073660046132cd565b61086c565b005b61028b61031c366004612fe6565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b60095461028b906001600160a01b031681565b6102bb6103633660046133bd565b8051602081830181018051600b8252928201919093012091525460ff1681565b6103966103913660046131c6565b610908565b60405190815260200161029f565b61030c6103b2366004612f4c565b610a0c565b6103966103c536600461334e565b60009081526004602052604090206001015490565b61030c6103e8366004612fe6565b610ade565b61030c6103fb366004613366565b610ba0565b61030c61040e366004613366565b610bc6565b61030c610421366004613011565b610c44565b6102bb6104343660046133bd565b8051602081830181018051600d8252928201919093012091525460ff1681565b6103966b43524f535345525f524f4c4560a01b81565b610396610478366004612fe6565b610c76565b61039661048b366004612fe6565b600760209081526000928352604080842090915290825290205481565b6103966104b6366004612fe6565b600560209081526000928352604080842090915290825290205481565b61030c6104e1366004613052565b610d18565b61030c6104f436600461311e565b610ed3565b61050c6105073660046131c6565b611065565b6040805192835260208301919091520161029f565b6102bb61052f366004613366565b61128d565b610396610542366004612fe6565b6112b8565b6102bb6105553660046133bd565b8051602081830181018051600c8252928201919093012091525460ff1681565b610396610583366004612fe6565b600660209081526000928352604080842090915290825290205481565b61030c6105ae366004612fe6565b61135a565b610396600081565b61030c6105c9366004613192565b61138b565b600e5461028b906001600160a01b031681565b61030c6105ef366004612f8c565b6113d9565b61030c610602366004612f4c565b611435565b61050c610615366004613192565b611507565b61030c610628366004612f14565b600980546001600160a01b0319166001600160a01b03831617905550565b610396610654366004612f14565b60006020819052908152604090205481565b61030c610674366004613052565b6115ab565b61030c610687366004613366565b611825565b61030c61069a366004612fe6565b61184b565b61028b6106ad366004612fe6565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b61028b6106e1366004612fe6565b60086020908152600092835260408084209091529082529020546001600160a01b031681565b61030c6107153660046130d7565b61188e565b61030c610728366004613249565b611b84565b61030c61073b36600461320f565b611c9a565b61030c61074e366004612fe6565b611ccd565b6001600160a01b038083166000908152600a60209081526040808320858452909152812054909184918491166107a45760405162461bcd60e51b815260040161079b90613661565b60405180910390fd5b5050506001600160a01b039182166000908152600f6020908152604080832093835292905220541690565b60006001600160e01b03198216637965db0b60e01b148061080057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b03831660008181526005602090815260408083208684528252808320549383526006825280832086845290915281205481906108498582611d99565b92508261085685876138a7565b61086091906138a7565b91505093509350939050565b805182511461088d5760405162461bcd60e51b815260040161079b90613696565b60005b8251811015610903576108f18382815181106108bc57634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106108e457634e487b7160e01b600052603260045260246000fd5b6020026020010151611ccd565b806108fb81613901565b915050610890565b505050565b6001600160a01b038085166000908152600a60209081526040808320878452909152812054909186918691166109505760405162461bcd60e51b815260040161079b90613661565b6001600160a01b038088166000818152600f602090815260408083208b84529091529020549091169061098590338389611dc2565b6040516335313c2160e11b81526001600160a01b038681166004830152821690636a62784290602401602060405180830381600087803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0091906133f0565b98975050505050505050565b610a1760003361128d565b610a335760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038381166000908152600a602090815260408083208584529091529020541615610aa65760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20546f6b6520616c726561647920537570706f72746564604482015260640161079b565b6001600160a01b039283166000908152600a602090815260408083209383529290522080546001600160a01b03191691909216179055565b610ae960003361128d565b610b055760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038281166000908152600f6020908152604080832085845290915290205416610b6d5760405162461bcd60e51b81526020600482015260136024820152721d1bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604482015260640161079b565b6001600160a01b039091166000908152600f602090815260408083209383529290522080546001600160a01b0319169055565b600082815260046020526040902060010154610bbc8133611e2d565b6109038383611e91565b6001600160a01b0381163314610c365760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161079b565b610c408282611f17565b5050565b610c4f60003361128d565b610c6b5760405162461bcd60e51b815260040161079b906136d9565b610903838383611f7e565b6001600160a01b038083166000908152600f60209081526040808320858452909152808220548151630240bc6b60e21b815282519394919091169284928492630902f1ac9260048083019392829003018186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190613408565b9695505050505050565b6001600160a01b038087166000908152600a602090815260408083208984529091529020548791879116610d5e5760405162461bcd60e51b815260040161079b90613661565b610d776b43524f535345525f524f4c4560a01b3361128d565b610d935760405162461bcd60e51b815260040161079b9061362a565b82600c81604051610da491906134b0565b9081526040519081900360200190205460ff1615610dfc5760405162461bcd60e51b8152602060048201526015602482015274141959d41c9bde1e4e881d1e081d5b9b1bd8dad959605a1b604482015260640161079b565b6000610e0b8a89898989612072565b90508015610ec7576001600c86604051610e2591906134b0565b908152604051908190036020019020805491151560ff19909216919091179055610e596001600160a01b038b1688886122fa565b6001600160a01b03808b166000908152600a602090815260408083208d8452909152908190205490517fe8a9cddb11d86358ad5c2fdd6359f0a6f41de0d399033319becf1364409dacbc92610ebe928e9291169046908e908e908e908e908e906135b6565b60405180910390a15b50505050505050505050565b6001600160a01b038086166000908152600a602090815260408083208884529091529020548691869116610f195760405162461bcd60e51b815260040161079b90613661565b610f326b43524f535345525f524f4c4560a01b3361128d565b610f4e5760405162461bcd60e51b815260040161079b9061362a565b82600d81604051610f5f91906134b0565b9081526040519081900360200190205460ff1615610fbf5760405162461bcd60e51b815260206004820152601760248201527f50656750726f78793a20747820726f6c6c6261636b6564000000000000000000604482015260640161079b565b6000610fce8988898989612072565b9050801561105a576001600d86604051610fe891906134b0565b908152604051908190036020019020805491151560ff1990921691909117905561101c6001600160a01b038a1688886122fa565b7f9420db1a0c5e4f45cc0dac05f17e8eb893645981e3c01e8d14120353a487d9e9898888886040516110519493929190613541565b60405180910390a15b505050505050505050565b6001600160a01b038085166000908152600a602090815260408083208784529091528120549091829187918791166110af5760405162461bcd60e51b815260040161079b90613661565b6001600160a01b03881660009081526010602052604090205486116111165760405162461bcd60e51b815260206004820152601e60248201527f6c6971756964697479206973206c657373207468616e206d696e696d756d0000604482015260640161079b565b6001600160a01b038881166000908152600f602090815260408083208b8452909152908190205490516323b872dd60e01b8152336004820152911660248201819052604482018890529081906323b872dd90606401602060405180830381600087803b15801561118557600080fd5b505af1158015611199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bd919061332e565b5060405163226bf2d160e21b81523360048201526001600160a01b038216906389afcb44906024016040805180830381600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190613408565b909550935060006112488a8a88611507565b509050801561126d5760095461126d906001600160a01b038c81169133911684611dc2565b841561128057611280338b8b8a896113d9565b5050505094509492505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038083166000908152600f60209081526040808320858452909152808220548151630240bc6b60e21b815282519394919091169284928492630902f1ac9260048083019392829003018186803b15801561131857600080fd5b505afa15801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113509190613408565b5095945050505050565b61136560003361128d565b6113815760405162461bcd60e51b815260040161079b906136d9565b610c40828261232a565b61139660003361128d565b6113b25760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b039290921660009081526007602090815260408083209383529290522055565b6001600160a01b038085166000908152600a60209081526040808320878452909152902054859185911661141f5760405162461bcd60e51b815260040161079b90613661565b61142c8787878787612386565b50505050505050565b61144060003361128d565b61145c5760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038381166000908152600f6020908152604080832085845290915290205416156114cf5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20616c726561647920737570706f72746564000000000000000000604482015260640161079b565b6001600160a01b039283166000908152600f602090815260408083209383529290522080546001600160a01b03191691909216179055565b6001600160a01b03831660009081526007602090815260408083208584529091528120548190831161156e5760405162461bcd60e51b815260206004820152601060248201526f3737ba1032b737bab3b4103a37b5b2b760811b604482015260640161079b565b6001600160a01b0385166000908152600760209081526040808320878452909152902054915061159e82846138a7565b9050935093915050565b50565b6115c46b43524f535345525f524f4c4560a01b3361128d565b6115e05760405162461bcd60e51b815260040161079b9061362a565b80600b816040516115f191906134b0565b9081526040519081900360200190205460ff16156116475760405162461bcd60e51b8152602060048201526013602482015272141959d41c9bde1e4e881d1e081b5a5b9d1959606a1b604482015260640161079b565b60006116568887878787612072565b9050801561181b576001600b8460405161167091906134b0565b9081526040805160209281900383018120805460ff1916941515949094179093556001600160a01b038b81166000908152600f84528281208c825284528281205463d21220a760e01b8652925192909116939092849263d21220a792600480820193929182900301818787803b1580156116e957600080fd5b505af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190612f30565b9050600061172f8b8b6112b8565b9050808711156117ab576001600160a01b03808c166000908152600a602090815260408083208e8452909152908190205490517f56a316ee63540abb5f8fd44be7a6eb2016a90fc9bb3a34ffe13948a44c49a6169261179e928f9291169046908f908f908f908f908f906135b6565b60405180910390a1611817565b6040516340c10f1960e01b8152306004820152602481018890526001600160a01b038316906340c10f1990604401600060405180830381600087803b1580156117f357600080fd5b505af1158015611807573d6000803e3d6000fd5b505050506118178b8b898b6125c5565b5050505b5050505050505050565b6000828152600460205260409020600101546118418133611e2d565b6109038383611f17565b61185660003361128d565b6118725760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b03909116600090815260106020526040902055565b6001600160a01b038085166000908152600a6020908152604080832087845290915290205485918591166118d45760405162461bcd60e51b815260040161079b90613661565b600083116119345760405162461bcd60e51b815260206004820152602760248201527f50656750726f78793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b606482015260840161079b565b6001600160a01b0384166119825760405162461bcd60e51b815260206004820152601560248201527450656750726f78793a20746f20697320656d70747960581b604482015260640161079b565b6000806000611992898988610806565b925092509250611a0133600860008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060009054906101000a90046001600160a01b0316848c6001600160a01b0316611dc2909392919063ffffffff16565b600e546040516326341e2d60e21b8152600481018490526001600160a01b03909116906398d078b490602401600060405180830381600087803b158015611a4757600080fd5b505af1158015611a5b573d6000803e3d6000fd5b505050506000831115611a8457600954611a84906001600160a01b038b81169133911686611dc2565b611a996001600160a01b038a16333084611dc2565b6000611aa58a8a610c76565b90506000611ab38383612770565b90508015611ad457611ac78b8b8333612786565b611ad4338c8c8c85612386565b81881115611817576000611ae884836128af565b90507f7cb5e2d54d5587c3a3448631884061009b0e2c30e37922a4dd4aed50e11dd7f38c600a60008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060009054906101000a90046001600160a01b0316468e338f87604051611b6e9796959493929190613574565b60405180910390a1505050505050505050505050565b8151835114611bd55760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20746f6b656e206c656e677468206e6f74206d61746368604482015260640161079b565b8051835114611bf65760405162461bcd60e51b815260040161079b90613696565b60005b8351811015611c9457611c82848281518110611c2557634e487b7160e01b600052603260045260246000fd5b6020026020010151848381518110611c4d57634e487b7160e01b600052603260045260246000fd5b6020026020010151848481518110611c7557634e487b7160e01b600052603260045260246000fd5b6020026020010151610a0c565b80611c8c81613901565b915050611bf9565b50505050565b611ca560003361128d565b611cc15760405162461bcd60e51b815260040161079b906136d9565b611c94848484846128bb565b611cd860003361128d565b611cf45760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038281166000908152600a6020908152604080832085845290915290205416611d665760405162461bcd60e51b815260206004820152601c60248201527f50656750726f78793a20746f6b65206e6f7420737570706f7274656400000000604482015260640161079b565b6001600160a01b039091166000908152600a602090815260408083209383529290522080546001600160a01b0319169055565b6000611da76012600a6137e0565b611db18484612990565b611dbb919061377d565b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c949085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261299c565b611e37828261128d565b610c4057611e4f816001600160a01b03166014612a6e565b611e5a836020612a6e565b604051602001611e6b9291906134cc565b60408051601f198184030181529082905262461bcd60e51b825261079b91600401613617565b611e9b828261128d565b610c405760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611ed33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f21828261128d565b15610c405760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03838116600090815260086020908152604080832086845290915290205481169082161415611ff65760405162461bcd60e51b815260206004820152601f60248201527f546f6c6c3a3a6163636f756e742077617320666565546f20616c726561647900604482015260640161079b565b6001600160a01b03838116600081815260086020908152604080832087845282529182902080546001600160a01b0319169486169485179055815192835282018590528101919091527f9963d2a39ea3765553bdc18f1222f7791b9c625670d73a9feb41fdf53158e4a4906060015b60405180910390a1505050565b6001600160a01b0385166000908152602081905260408120546120f05760405162461bcd60e51b815260206004820152603060248201527f50726f706f73616c566f74653a207468726573686f6c642073686f756c64206260448201526f0652067726561746572207468616e20360841b606482015260840161079b565b6001600160a01b038616600090815260208181526040808320549051909291612123918a918a918a918a918a9101613457565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff161561219b5760405162461bcd60e51b815260206004820152601860248201527f5f766f74653a3a70726f706f73616c2066696e69736865640000000000000000604482015260640161079b565b600081815260026020908152604080832033845290915290205460ff16156122055760405162461bcd60e51b815260206004820152601760248201527f5f766f74653a3a6d73672e73656e64657220766f746564000000000000000000604482015260640161079b565b60008181526003602052604090205461221f906001612c50565b60008281526003602081815260408084209485556002825280842033855282528320805460ff19166001179055918490529052548211612277576000818152600160208190526040909120805460ff19168217905592505b6000818152600360209081526040918290205482516001600160a01b038c811682528b811693820193909352918916828401526060820188905233608083015260a082015260c0810184905290517fe458477b94285c9f254a407e2614c39f55230b527ff7f51d76fdf33e251ae9369181900360e00190a1505095945050505050565b6040516001600160a01b03831660248201526044810182905261090390849063a9059cbb60e01b90606401611df6565b6001600160a01b038216600081815260208181526040918290208054908590558251938452908301819052908201839052907fb18e91516e037486aa6fa38f56a8aac933fd127180efe9c9745ecbf660a78e4490606001612065565b6001600160a01b038085166000908152600f60209081526040808320878452825280832054815163d21220a760e01b81529151941693849263d21220a7926004808201939182900301818787803b1580156123e057600080fd5b505af11580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190612f30565b6040516370a0823160e01b81526001600160a01b03898116600483015291925084918316906370a082319060240160206040518083038186803b15801561245e57600080fd5b505afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249691906133f0565b10156124f05760405162461bcd60e51b815260206004820152602360248201527f6d73672e73656e646572206e6f7420656e6f75676820746f6b656e20746f20626044820152623ab93760e91b606482015260840161079b565b604051632770a7eb60e21b81526001600160a01b03888116600483015260248201859052821690639dc29fac90604401600060405180830381600087803b15801561253a57600080fd5b505af115801561254e573d6000803e3d6000fd5b5050506001600160a01b038088166000908152600a602090815260408083208a8452909152908190205490517f79aee25f54411be6ea1ab53c9d3cc3e245c301d481091deda6343da926932c0c93506125b4928a92169046908a908d908b908b90613574565b60405180910390a150505050505050565b6001600160a01b038085166000908152600a60209081526040808320878452909152902054859185911661260b5760405162461bcd60e51b815260040161079b90613661565b6000841161265b5760405162461bcd60e51b815260206004820152601c60248201527f696e707574206d7573742062652067726561746572207468616e203000000000604482015260640161079b565b6001600160a01b038087166000908152600f60209081526040808320898452825280832054815163d21220a760e01b81529151941693849263d21220a7926004808201939182900301818787803b1580156126b557600080fd5b505af11580156126c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ed9190612f30565b90506127046001600160a01b038216338489611dc2565b60405163513c681b60e11b81526001600160a01b0386811660048301526000602483015283169063a278d03690604401600060405180830381600087803b15801561274e57600080fd5b505af1158015612762573d6000803e3d6000fd5b505050505050505050505050565b600081831061277f5781611dbb565b5090919050565b6001600160a01b038085166000908152600a6020908152604080832087845290915290205485918591166127cc5760405162461bcd60e51b815260040161079b90613661565b6000841161281c5760405162461bcd60e51b815260206004820152601c60248201527f696e707574206d7573742062652067726561746572207468616e203000000000604482015260640161079b565b6001600160a01b038087166000818152600f602090815260408083208a84529091529020549091169061285190338388611dc2565b60405163513c681b60e11b81526001600160a01b0385811660048301526001602483015282169063a278d03690604401600060405180830381600087803b15801561289b57600080fd5b505af1158015611817573d6000803e3d6000fd5b6000611dbb82846138a7565b670de0b6b3a764000081111561290b5760405162461bcd60e51b8152602060048201526015602482015274199959481c985d1a5bc81b9bdd0818dbdc9c9958dd605a1b604482015260640161079b565b6001600160a01b0384166000818152600560209081526040808320878452825280832086905583835260068252808320878452825291829020849055815192835282018590528101839052606081018290527fe7de0268825882caac9be515100046b260e4bb88ef28dcf7e4d99a3b9b7537829060800160405180910390a150505050565b6000611dbb8284613888565b60006129f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c5c9092919063ffffffff16565b8051909150156109035780806020019051810190612a0f919061332e565b6109035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161079b565b60606000612a7d836002613888565b612a88906002613765565b67ffffffffffffffff811115612aae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ad8576020820181803683370190505b509050600360fc1b81600081518110612b0157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b3e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612b62846002613888565b612b6d906001613765565b90505b6001811115612c01576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612baf57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612bd357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612bfa816138ea565b9050612b70565b508315611dbb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079b565b6000611dbb8284613765565b6060612c6b8484600085612c73565b949350505050565b606082471015612cd45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161079b565b843b612d225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079b565b600080866001600160a01b03168587604051612d3e91906134b0565b60006040518083038185875af1925050503d8060008114612d7b576040519150601f19603f3d011682016040523d82523d6000602084013e612d80565b606091505b5091509150612d90828286612d9b565b979650505050505050565b60608315612daa575081611dbb565b825115612dba5782518084602001fd5b8160405162461bcd60e51b815260040161079b9190613617565b600082601f830112612de4578081fd5b81356020612df9612df483613741565b613710565b80838252828201915082860187848660051b8901011115612e18578586fd5b855b85811015612e3f578135612e2d81613948565b84529284019290840190600101612e1a565b5090979650505050505050565b600082601f830112612e5c578081fd5b81356020612e6c612df483613741565b80838252828201915082860187848660051b8901011115612e8b578586fd5b855b85811015612e3f57813584529284019290840190600101612e8d565b600082601f830112612eb9578081fd5b813567ffffffffffffffff811115612ed357612ed3613932565b612ee6601f8201601f1916602001613710565b818152846020838601011115612efa578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612f25578081fd5b8135611dbb81613948565b600060208284031215612f41578081fd5b8151611dbb81613948565b600080600060608486031215612f60578182fd5b8335612f6b81613948565b92506020840135612f7b81613948565b929592945050506040919091013590565b600080600080600060a08688031215612fa3578081fd5b8535612fae81613948565b94506020860135612fbe81613948565b9350604086013592506060860135612fd581613948565b949793965091946080013592915050565b60008060408385031215612ff8578182fd5b823561300381613948565b946020939093013593505050565b600080600060608486031215613025578283fd5b833561303081613948565b925060208401359150604084013561304781613948565b809150509250925092565b60008060008060008060c0878903121561306a578081fd5b863561307581613948565b955060208701359450604087013561308c81613948565b9350606087013561309c81613948565b92506080870135915060a087013567ffffffffffffffff8111156130be578182fd5b6130ca89828a01612ea9565b9150509295509295509295565b600080600080608085870312156130ec578384fd5b84356130f781613948565b935060208501359250604085013561310e81613948565b9396929550929360600135925050565b600080600080600060a08688031215613135578283fd5b853561314081613948565b945060208601359350604086013561315781613948565b925060608601359150608086013567ffffffffffffffff811115613179578182fd5b61318588828901612ea9565b9150509295509295909350565b6000806000606084860312156131a6578081fd5b83356131b181613948565b95602085013595506040909401359392505050565b600080600080608085870312156131db578182fd5b84356131e681613948565b93506020850135925060408501359150606085013561320481613948565b939692955090935050565b60008060008060808587031215613224578182fd5b843561322f81613948565b966020860135965060408601359560600135945092505050565b60008060006060848603121561325d578081fd5b833567ffffffffffffffff80821115613274578283fd5b61328087838801612dd4565b94506020860135915080821115613295578283fd5b6132a187838801612dd4565b935060408601359150808211156132b6578283fd5b506132c386828701612e4c565b9150509250925092565b600080604083850312156132df578182fd5b823567ffffffffffffffff808211156132f6578384fd5b61330286838701612dd4565b93506020850135915080821115613317578283fd5b5061332485828601612e4c565b9150509250929050565b60006020828403121561333f578081fd5b81518015158114611dbb578182fd5b60006020828403121561335f578081fd5b5035919050565b60008060408385031215613378578182fd5b82359150602083013561338a81613948565b809150509250929050565b6000602082840312156133a6578081fd5b81356001600160e01b031981168114611dbb578182fd5b6000602082840312156133ce578081fd5b813567ffffffffffffffff8111156133e4578182fd5b612c6b84828501612ea9565b600060208284031215613401578081fd5b5051919050565b6000806040838503121561341a578182fd5b505080516020909101519092909150565b600081518084526134438160208601602086016138be565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b166014840152808660601b1660288401525083603c830152825161349f81605c8501602087016138be565b91909101605c019695505050505050565b600082516134c28184602087016138be565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516135048160178501602088016138be565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516135358160288401602088016138be565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610d0e9083018461342b565b6001600160a01b0397881681529587166020870152604086019490945260608501929092528416608084015290921660a082015260c081019190915260e00190565b6001600160a01b038981168252888116602083015260408201889052606082018790528581166080830152841660a082015260c0810183905261010060e082018190526000906136088382018561342b565b9b9a5050505050505050505050565b602081526000611dbb602083018461342b565b6020808252601f908201527f50656750726f78793a2063616c6c6572206973206e6f742063726f7373657200604082015260600190565b6020808252818101527f50656750726f78793a206e6f7420737570706f7274207468697320746f6b656e604082015260600190565b60208082526023908201527f50656750726f78793a20636861696e494473206c656e677468206e6f74206d616040820152620e8c6d60eb1b606082015260800190565b6020808252601d908201527f50656750726f78793a2063616c6c6572206973206e6f742061646d696e000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561373957613739613932565b604052919050565b600067ffffffffffffffff82111561375b5761375b613932565b5060051b60200190565b600082198211156137785761377861391c565b500190565b60008261379857634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156137d85781600019048211156137be576137be61391c565b808516156137cb57918102915b93841c93908002906137a2565b509250929050565b6000611dbb83836000826137f657506001610800565b8161380357506000610800565b816001811461381957600281146138235761383f565b6001915050610800565b60ff8411156138345761383461391c565b50506001821b610800565b5060208310610133831016604e8410600b8410161715613862575081810a610800565b61386c838361379d565b80600019048211156138805761388061391c565b029392505050565b60008160001904831182151516156138a2576138a261391c565b500290565b6000828210156138b9576138b961391c565b500390565b60005b838110156138d95781810151838201526020016138c1565b83811115611c945750506000910152565b6000816138f9576138f961391c565b506000190190565b60006000198214156139155761391561391c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115a857600080fdfea2646970667358221220e74b151a08544d7012b343aa1e0b7aa452b49f2d0d67cff85855b5f1b381047664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102735760003560e01c806391d1485411610151578063c369c773116100c3578063d692f4c511610087578063d692f4c51461069f578063db697be4146106d3578063df7e600a14610707578063ee8a6acf1461071a578063f06410f81461072d578063f8f8d5c01461074057600080fd5b8063c369c7731461061a578063c86ec2bf14610646578063cf28f67c14610666578063d547741f14610679578063d5e04b761461068c57600080fd5b8063a217fddf11610115578063a217fddf146105b3578063a5597a94146105bb578063af78881f146105ce578063b33efbd5146105e1578063b5acfa62146105f4578063be90c71b1461060757600080fd5b806391d1485414610521578063934ac70714610534578063967145af146105475780639c8d70be146105755780639d879990146105a057600080fd5b80632f2ff15d116101ea57806356ecaeb7116101ae57806356ecaeb71461046a5780635cb0c1fb1461047d57806364078943146104a8578063715ec45c146104d357806381660f5d146104e65780638fed0b2c146104f957600080fd5b80632f2ff15d146103ed57806336568abe146104005780633f3c64761461041357806353ad72e51461042657806356cf02d91461045457600080fd5b8063100be3bd1161023c578063100be3bd1461034257806310c274021461035557806312fef692146103835780631b322be4146103a4578063248a9ca3146103b75780632599c037146103da57600080fd5b80626349fb1461027857806301ffc9a7146102a85780630324ef9c146102cb57806303507ba5146102f957806303d405131461030e575b600080fd5b61028b610286366004612fe6565b610753565b6040516001600160a01b0390911681526020015b60405180910390f35b6102bb6102b6366004613395565b6107cf565b604051901515815260200161029f565b6102de6102d9366004613192565b610806565b6040805193845260208401929092529082015260600161029f565b61030c6103073660046132cd565b61086c565b005b61028b61031c366004612fe6565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b60095461028b906001600160a01b031681565b6102bb6103633660046133bd565b8051602081830181018051600b8252928201919093012091525460ff1681565b6103966103913660046131c6565b610908565b60405190815260200161029f565b61030c6103b2366004612f4c565b610a0c565b6103966103c536600461334e565b60009081526004602052604090206001015490565b61030c6103e8366004612fe6565b610ade565b61030c6103fb366004613366565b610ba0565b61030c61040e366004613366565b610bc6565b61030c610421366004613011565b610c44565b6102bb6104343660046133bd565b8051602081830181018051600d8252928201919093012091525460ff1681565b6103966b43524f535345525f524f4c4560a01b81565b610396610478366004612fe6565b610c76565b61039661048b366004612fe6565b600760209081526000928352604080842090915290825290205481565b6103966104b6366004612fe6565b600560209081526000928352604080842090915290825290205481565b61030c6104e1366004613052565b610d18565b61030c6104f436600461311e565b610ed3565b61050c6105073660046131c6565b611065565b6040805192835260208301919091520161029f565b6102bb61052f366004613366565b61128d565b610396610542366004612fe6565b6112b8565b6102bb6105553660046133bd565b8051602081830181018051600c8252928201919093012091525460ff1681565b610396610583366004612fe6565b600660209081526000928352604080842090915290825290205481565b61030c6105ae366004612fe6565b61135a565b610396600081565b61030c6105c9366004613192565b61138b565b600e5461028b906001600160a01b031681565b61030c6105ef366004612f8c565b6113d9565b61030c610602366004612f4c565b611435565b61050c610615366004613192565b611507565b61030c610628366004612f14565b600980546001600160a01b0319166001600160a01b03831617905550565b610396610654366004612f14565b60006020819052908152604090205481565b61030c610674366004613052565b6115ab565b61030c610687366004613366565b611825565b61030c61069a366004612fe6565b61184b565b61028b6106ad366004612fe6565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b61028b6106e1366004612fe6565b60086020908152600092835260408084209091529082529020546001600160a01b031681565b61030c6107153660046130d7565b61188e565b61030c610728366004613249565b611b84565b61030c61073b36600461320f565b611c9a565b61030c61074e366004612fe6565b611ccd565b6001600160a01b038083166000908152600a60209081526040808320858452909152812054909184918491166107a45760405162461bcd60e51b815260040161079b90613661565b60405180910390fd5b5050506001600160a01b039182166000908152600f6020908152604080832093835292905220541690565b60006001600160e01b03198216637965db0b60e01b148061080057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b03831660008181526005602090815260408083208684528252808320549383526006825280832086845290915281205481906108498582611d99565b92508261085685876138a7565b61086091906138a7565b91505093509350939050565b805182511461088d5760405162461bcd60e51b815260040161079b90613696565b60005b8251811015610903576108f18382815181106108bc57634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106108e457634e487b7160e01b600052603260045260246000fd5b6020026020010151611ccd565b806108fb81613901565b915050610890565b505050565b6001600160a01b038085166000908152600a60209081526040808320878452909152812054909186918691166109505760405162461bcd60e51b815260040161079b90613661565b6001600160a01b038088166000818152600f602090815260408083208b84529091529020549091169061098590338389611dc2565b6040516335313c2160e11b81526001600160a01b038681166004830152821690636a62784290602401602060405180830381600087803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0091906133f0565b98975050505050505050565b610a1760003361128d565b610a335760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038381166000908152600a602090815260408083208584529091529020541615610aa65760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20546f6b6520616c726561647920537570706f72746564604482015260640161079b565b6001600160a01b039283166000908152600a602090815260408083209383529290522080546001600160a01b03191691909216179055565b610ae960003361128d565b610b055760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038281166000908152600f6020908152604080832085845290915290205416610b6d5760405162461bcd60e51b81526020600482015260136024820152721d1bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604482015260640161079b565b6001600160a01b039091166000908152600f602090815260408083209383529290522080546001600160a01b0319169055565b600082815260046020526040902060010154610bbc8133611e2d565b6109038383611e91565b6001600160a01b0381163314610c365760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161079b565b610c408282611f17565b5050565b610c4f60003361128d565b610c6b5760405162461bcd60e51b815260040161079b906136d9565b610903838383611f7e565b6001600160a01b038083166000908152600f60209081526040808320858452909152808220548151630240bc6b60e21b815282519394919091169284928492630902f1ac9260048083019392829003018186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190613408565b9695505050505050565b6001600160a01b038087166000908152600a602090815260408083208984529091529020548791879116610d5e5760405162461bcd60e51b815260040161079b90613661565b610d776b43524f535345525f524f4c4560a01b3361128d565b610d935760405162461bcd60e51b815260040161079b9061362a565b82600c81604051610da491906134b0565b9081526040519081900360200190205460ff1615610dfc5760405162461bcd60e51b8152602060048201526015602482015274141959d41c9bde1e4e881d1e081d5b9b1bd8dad959605a1b604482015260640161079b565b6000610e0b8a89898989612072565b90508015610ec7576001600c86604051610e2591906134b0565b908152604051908190036020019020805491151560ff19909216919091179055610e596001600160a01b038b1688886122fa565b6001600160a01b03808b166000908152600a602090815260408083208d8452909152908190205490517fe8a9cddb11d86358ad5c2fdd6359f0a6f41de0d399033319becf1364409dacbc92610ebe928e9291169046908e908e908e908e908e906135b6565b60405180910390a15b50505050505050505050565b6001600160a01b038086166000908152600a602090815260408083208884529091529020548691869116610f195760405162461bcd60e51b815260040161079b90613661565b610f326b43524f535345525f524f4c4560a01b3361128d565b610f4e5760405162461bcd60e51b815260040161079b9061362a565b82600d81604051610f5f91906134b0565b9081526040519081900360200190205460ff1615610fbf5760405162461bcd60e51b815260206004820152601760248201527f50656750726f78793a20747820726f6c6c6261636b6564000000000000000000604482015260640161079b565b6000610fce8988898989612072565b9050801561105a576001600d86604051610fe891906134b0565b908152604051908190036020019020805491151560ff1990921691909117905561101c6001600160a01b038a1688886122fa565b7f9420db1a0c5e4f45cc0dac05f17e8eb893645981e3c01e8d14120353a487d9e9898888886040516110519493929190613541565b60405180910390a15b505050505050505050565b6001600160a01b038085166000908152600a602090815260408083208784529091528120549091829187918791166110af5760405162461bcd60e51b815260040161079b90613661565b6001600160a01b03881660009081526010602052604090205486116111165760405162461bcd60e51b815260206004820152601e60248201527f6c6971756964697479206973206c657373207468616e206d696e696d756d0000604482015260640161079b565b6001600160a01b038881166000908152600f602090815260408083208b8452909152908190205490516323b872dd60e01b8152336004820152911660248201819052604482018890529081906323b872dd90606401602060405180830381600087803b15801561118557600080fd5b505af1158015611199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bd919061332e565b5060405163226bf2d160e21b81523360048201526001600160a01b038216906389afcb44906024016040805180830381600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190613408565b909550935060006112488a8a88611507565b509050801561126d5760095461126d906001600160a01b038c81169133911684611dc2565b841561128057611280338b8b8a896113d9565b5050505094509492505050565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b038083166000908152600f60209081526040808320858452909152808220548151630240bc6b60e21b815282519394919091169284928492630902f1ac9260048083019392829003018186803b15801561131857600080fd5b505afa15801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113509190613408565b5095945050505050565b61136560003361128d565b6113815760405162461bcd60e51b815260040161079b906136d9565b610c40828261232a565b61139660003361128d565b6113b25760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b039290921660009081526007602090815260408083209383529290522055565b6001600160a01b038085166000908152600a60209081526040808320878452909152902054859185911661141f5760405162461bcd60e51b815260040161079b90613661565b61142c8787878787612386565b50505050505050565b61144060003361128d565b61145c5760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038381166000908152600f6020908152604080832085845290915290205416156114cf5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e20616c726561647920737570706f72746564000000000000000000604482015260640161079b565b6001600160a01b039283166000908152600f602090815260408083209383529290522080546001600160a01b03191691909216179055565b6001600160a01b03831660009081526007602090815260408083208584529091528120548190831161156e5760405162461bcd60e51b815260206004820152601060248201526f3737ba1032b737bab3b4103a37b5b2b760811b604482015260640161079b565b6001600160a01b0385166000908152600760209081526040808320878452909152902054915061159e82846138a7565b9050935093915050565b50565b6115c46b43524f535345525f524f4c4560a01b3361128d565b6115e05760405162461bcd60e51b815260040161079b9061362a565b80600b816040516115f191906134b0565b9081526040519081900360200190205460ff16156116475760405162461bcd60e51b8152602060048201526013602482015272141959d41c9bde1e4e881d1e081b5a5b9d1959606a1b604482015260640161079b565b60006116568887878787612072565b9050801561181b576001600b8460405161167091906134b0565b9081526040805160209281900383018120805460ff1916941515949094179093556001600160a01b038b81166000908152600f84528281208c825284528281205463d21220a760e01b8652925192909116939092849263d21220a792600480820193929182900301818787803b1580156116e957600080fd5b505af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190612f30565b9050600061172f8b8b6112b8565b9050808711156117ab576001600160a01b03808c166000908152600a602090815260408083208e8452909152908190205490517f56a316ee63540abb5f8fd44be7a6eb2016a90fc9bb3a34ffe13948a44c49a6169261179e928f9291169046908f908f908f908f908f906135b6565b60405180910390a1611817565b6040516340c10f1960e01b8152306004820152602481018890526001600160a01b038316906340c10f1990604401600060405180830381600087803b1580156117f357600080fd5b505af1158015611807573d6000803e3d6000fd5b505050506118178b8b898b6125c5565b5050505b5050505050505050565b6000828152600460205260409020600101546118418133611e2d565b6109038383611f17565b61185660003361128d565b6118725760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b03909116600090815260106020526040902055565b6001600160a01b038085166000908152600a6020908152604080832087845290915290205485918591166118d45760405162461bcd60e51b815260040161079b90613661565b600083116119345760405162461bcd60e51b815260206004820152602760248201527f50656750726f78793a20616d6f756e74206d75737420626520677265617465726044820152660207468616e20360cc1b606482015260840161079b565b6001600160a01b0384166119825760405162461bcd60e51b815260206004820152601560248201527450656750726f78793a20746f20697320656d70747960581b604482015260640161079b565b6000806000611992898988610806565b925092509250611a0133600860008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060009054906101000a90046001600160a01b0316848c6001600160a01b0316611dc2909392919063ffffffff16565b600e546040516326341e2d60e21b8152600481018490526001600160a01b03909116906398d078b490602401600060405180830381600087803b158015611a4757600080fd5b505af1158015611a5b573d6000803e3d6000fd5b505050506000831115611a8457600954611a84906001600160a01b038b81169133911686611dc2565b611a996001600160a01b038a16333084611dc2565b6000611aa58a8a610c76565b90506000611ab38383612770565b90508015611ad457611ac78b8b8333612786565b611ad4338c8c8c85612386565b81881115611817576000611ae884836128af565b90507f7cb5e2d54d5587c3a3448631884061009b0e2c30e37922a4dd4aed50e11dd7f38c600a60008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060009054906101000a90046001600160a01b0316468e338f87604051611b6e9796959493929190613574565b60405180910390a1505050505050505050505050565b8151835114611bd55760405162461bcd60e51b815260206004820181905260248201527f50656750726f78793a20746f6b656e206c656e677468206e6f74206d61746368604482015260640161079b565b8051835114611bf65760405162461bcd60e51b815260040161079b90613696565b60005b8351811015611c9457611c82848281518110611c2557634e487b7160e01b600052603260045260246000fd5b6020026020010151848381518110611c4d57634e487b7160e01b600052603260045260246000fd5b6020026020010151848481518110611c7557634e487b7160e01b600052603260045260246000fd5b6020026020010151610a0c565b80611c8c81613901565b915050611bf9565b50505050565b611ca560003361128d565b611cc15760405162461bcd60e51b815260040161079b906136d9565b611c94848484846128bb565b611cd860003361128d565b611cf45760405162461bcd60e51b815260040161079b906136d9565b6001600160a01b038281166000908152600a6020908152604080832085845290915290205416611d665760405162461bcd60e51b815260206004820152601c60248201527f50656750726f78793a20746f6b65206e6f7420737570706f7274656400000000604482015260640161079b565b6001600160a01b039091166000908152600a602090815260408083209383529290522080546001600160a01b0319169055565b6000611da76012600a6137e0565b611db18484612990565b611dbb919061377d565b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c949085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261299c565b611e37828261128d565b610c4057611e4f816001600160a01b03166014612a6e565b611e5a836020612a6e565b604051602001611e6b9291906134cc565b60408051601f198184030181529082905262461bcd60e51b825261079b91600401613617565b611e9b828261128d565b610c405760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611ed33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f21828261128d565b15610c405760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03838116600090815260086020908152604080832086845290915290205481169082161415611ff65760405162461bcd60e51b815260206004820152601f60248201527f546f6c6c3a3a6163636f756e742077617320666565546f20616c726561647900604482015260640161079b565b6001600160a01b03838116600081815260086020908152604080832087845282529182902080546001600160a01b0319169486169485179055815192835282018590528101919091527f9963d2a39ea3765553bdc18f1222f7791b9c625670d73a9feb41fdf53158e4a4906060015b60405180910390a1505050565b6001600160a01b0385166000908152602081905260408120546120f05760405162461bcd60e51b815260206004820152603060248201527f50726f706f73616c566f74653a207468726573686f6c642073686f756c64206260448201526f0652067726561746572207468616e20360841b606482015260840161079b565b6001600160a01b038616600090815260208181526040808320549051909291612123918a918a918a918a918a9101613457565b60408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff161561219b5760405162461bcd60e51b815260206004820152601860248201527f5f766f74653a3a70726f706f73616c2066696e69736865640000000000000000604482015260640161079b565b600081815260026020908152604080832033845290915290205460ff16156122055760405162461bcd60e51b815260206004820152601760248201527f5f766f74653a3a6d73672e73656e64657220766f746564000000000000000000604482015260640161079b565b60008181526003602052604090205461221f906001612c50565b60008281526003602081815260408084209485556002825280842033855282528320805460ff19166001179055918490529052548211612277576000818152600160208190526040909120805460ff19168217905592505b6000818152600360209081526040918290205482516001600160a01b038c811682528b811693820193909352918916828401526060820188905233608083015260a082015260c0810184905290517fe458477b94285c9f254a407e2614c39f55230b527ff7f51d76fdf33e251ae9369181900360e00190a1505095945050505050565b6040516001600160a01b03831660248201526044810182905261090390849063a9059cbb60e01b90606401611df6565b6001600160a01b038216600081815260208181526040918290208054908590558251938452908301819052908201839052907fb18e91516e037486aa6fa38f56a8aac933fd127180efe9c9745ecbf660a78e4490606001612065565b6001600160a01b038085166000908152600f60209081526040808320878452825280832054815163d21220a760e01b81529151941693849263d21220a7926004808201939182900301818787803b1580156123e057600080fd5b505af11580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190612f30565b6040516370a0823160e01b81526001600160a01b03898116600483015291925084918316906370a082319060240160206040518083038186803b15801561245e57600080fd5b505afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249691906133f0565b10156124f05760405162461bcd60e51b815260206004820152602360248201527f6d73672e73656e646572206e6f7420656e6f75676820746f6b656e20746f20626044820152623ab93760e91b606482015260840161079b565b604051632770a7eb60e21b81526001600160a01b03888116600483015260248201859052821690639dc29fac90604401600060405180830381600087803b15801561253a57600080fd5b505af115801561254e573d6000803e3d6000fd5b5050506001600160a01b038088166000908152600a602090815260408083208a8452909152908190205490517f79aee25f54411be6ea1ab53c9d3cc3e245c301d481091deda6343da926932c0c93506125b4928a92169046908a908d908b908b90613574565b60405180910390a150505050505050565b6001600160a01b038085166000908152600a60209081526040808320878452909152902054859185911661260b5760405162461bcd60e51b815260040161079b90613661565b6000841161265b5760405162461bcd60e51b815260206004820152601c60248201527f696e707574206d7573742062652067726561746572207468616e203000000000604482015260640161079b565b6001600160a01b038087166000908152600f60209081526040808320898452825280832054815163d21220a760e01b81529151941693849263d21220a7926004808201939182900301818787803b1580156126b557600080fd5b505af11580156126c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ed9190612f30565b90506127046001600160a01b038216338489611dc2565b60405163513c681b60e11b81526001600160a01b0386811660048301526000602483015283169063a278d03690604401600060405180830381600087803b15801561274e57600080fd5b505af1158015612762573d6000803e3d6000fd5b505050505050505050505050565b600081831061277f5781611dbb565b5090919050565b6001600160a01b038085166000908152600a6020908152604080832087845290915290205485918591166127cc5760405162461bcd60e51b815260040161079b90613661565b6000841161281c5760405162461bcd60e51b815260206004820152601c60248201527f696e707574206d7573742062652067726561746572207468616e203000000000604482015260640161079b565b6001600160a01b038087166000818152600f602090815260408083208a84529091529020549091169061285190338388611dc2565b60405163513c681b60e11b81526001600160a01b0385811660048301526001602483015282169063a278d03690604401600060405180830381600087803b15801561289b57600080fd5b505af1158015611817573d6000803e3d6000fd5b6000611dbb82846138a7565b670de0b6b3a764000081111561290b5760405162461bcd60e51b8152602060048201526015602482015274199959481c985d1a5bc81b9bdd0818dbdc9c9958dd605a1b604482015260640161079b565b6001600160a01b0384166000818152600560209081526040808320878452825280832086905583835260068252808320878452825291829020849055815192835282018590528101839052606081018290527fe7de0268825882caac9be515100046b260e4bb88ef28dcf7e4d99a3b9b7537829060800160405180910390a150505050565b6000611dbb8284613888565b60006129f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c5c9092919063ffffffff16565b8051909150156109035780806020019051810190612a0f919061332e565b6109035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161079b565b60606000612a7d836002613888565b612a88906002613765565b67ffffffffffffffff811115612aae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ad8576020820181803683370190505b509050600360fc1b81600081518110612b0157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b3e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612b62846002613888565b612b6d906001613765565b90505b6001811115612c01576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612baf57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612bd357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612bfa816138ea565b9050612b70565b508315611dbb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079b565b6000611dbb8284613765565b6060612c6b8484600085612c73565b949350505050565b606082471015612cd45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161079b565b843b612d225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161079b565b600080866001600160a01b03168587604051612d3e91906134b0565b60006040518083038185875af1925050503d8060008114612d7b576040519150601f19603f3d011682016040523d82523d6000602084013e612d80565b606091505b5091509150612d90828286612d9b565b979650505050505050565b60608315612daa575081611dbb565b825115612dba5782518084602001fd5b8160405162461bcd60e51b815260040161079b9190613617565b600082601f830112612de4578081fd5b81356020612df9612df483613741565b613710565b80838252828201915082860187848660051b8901011115612e18578586fd5b855b85811015612e3f578135612e2d81613948565b84529284019290840190600101612e1a565b5090979650505050505050565b600082601f830112612e5c578081fd5b81356020612e6c612df483613741565b80838252828201915082860187848660051b8901011115612e8b578586fd5b855b85811015612e3f57813584529284019290840190600101612e8d565b600082601f830112612eb9578081fd5b813567ffffffffffffffff811115612ed357612ed3613932565b612ee6601f8201601f1916602001613710565b818152846020838601011115612efa578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612f25578081fd5b8135611dbb81613948565b600060208284031215612f41578081fd5b8151611dbb81613948565b600080600060608486031215612f60578182fd5b8335612f6b81613948565b92506020840135612f7b81613948565b929592945050506040919091013590565b600080600080600060a08688031215612fa3578081fd5b8535612fae81613948565b94506020860135612fbe81613948565b9350604086013592506060860135612fd581613948565b949793965091946080013592915050565b60008060408385031215612ff8578182fd5b823561300381613948565b946020939093013593505050565b600080600060608486031215613025578283fd5b833561303081613948565b925060208401359150604084013561304781613948565b809150509250925092565b60008060008060008060c0878903121561306a578081fd5b863561307581613948565b955060208701359450604087013561308c81613948565b9350606087013561309c81613948565b92506080870135915060a087013567ffffffffffffffff8111156130be578182fd5b6130ca89828a01612ea9565b9150509295509295509295565b600080600080608085870312156130ec578384fd5b84356130f781613948565b935060208501359250604085013561310e81613948565b9396929550929360600135925050565b600080600080600060a08688031215613135578283fd5b853561314081613948565b945060208601359350604086013561315781613948565b925060608601359150608086013567ffffffffffffffff811115613179578182fd5b61318588828901612ea9565b9150509295509295909350565b6000806000606084860312156131a6578081fd5b83356131b181613948565b95602085013595506040909401359392505050565b600080600080608085870312156131db578182fd5b84356131e681613948565b93506020850135925060408501359150606085013561320481613948565b939692955090935050565b60008060008060808587031215613224578182fd5b843561322f81613948565b966020860135965060408601359560600135945092505050565b60008060006060848603121561325d578081fd5b833567ffffffffffffffff80821115613274578283fd5b61328087838801612dd4565b94506020860135915080821115613295578283fd5b6132a187838801612dd4565b935060408601359150808211156132b6578283fd5b506132c386828701612e4c565b9150509250925092565b600080604083850312156132df578182fd5b823567ffffffffffffffff808211156132f6578384fd5b61330286838701612dd4565b93506020850135915080821115613317578283fd5b5061332485828601612e4c565b9150509250929050565b60006020828403121561333f578081fd5b81518015158114611dbb578182fd5b60006020828403121561335f578081fd5b5035919050565b60008060408385031215613378578182fd5b82359150602083013561338a81613948565b809150509250929050565b6000602082840312156133a6578081fd5b81356001600160e01b031981168114611dbb578182fd5b6000602082840312156133ce578081fd5b813567ffffffffffffffff8111156133e4578182fd5b612c6b84828501612ea9565b600060208284031215613401578081fd5b5051919050565b6000806040838503121561341a578182fd5b505080516020909101519092909150565b600081518084526134438160208601602086016138be565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808860601b168352808760601b166014840152808660601b1660288401525083603c830152825161349f81605c8501602087016138be565b91909101605c019695505050505050565b600082516134c28184602087016138be565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516135048160178501602088016138be565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516135358160288401602088016138be565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610d0e9083018461342b565b6001600160a01b0397881681529587166020870152604086019490945260608501929092528416608084015290921660a082015260c081019190915260e00190565b6001600160a01b038981168252888116602083015260408201889052606082018790528581166080830152841660a082015260c0810183905261010060e082018190526000906136088382018561342b565b9b9a5050505050505050505050565b602081526000611dbb602083018461342b565b6020808252601f908201527f50656750726f78793a2063616c6c6572206973206e6f742063726f7373657200604082015260600190565b6020808252818101527f50656750726f78793a206e6f7420737570706f7274207468697320746f6b656e604082015260600190565b60208082526023908201527f50656750726f78793a20636861696e494473206c656e677468206e6f74206d616040820152620e8c6d60eb1b606082015260800190565b6020808252601d908201527f50656750726f78793a2063616c6c6572206973206e6f742061646d696e000000604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561373957613739613932565b604052919050565b600067ffffffffffffffff82111561375b5761375b613932565b5060051b60200190565b600082198211156137785761377861391c565b500190565b60008261379857634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156137d85781600019048211156137be576137be61391c565b808516156137cb57918102915b93841c93908002906137a2565b509250929050565b6000611dbb83836000826137f657506001610800565b8161380357506000610800565b816001811461381957600281146138235761383f565b6001915050610800565b60ff8411156138345761383461391c565b50506001821b610800565b5060208310610133831016604e8410600b8410161715613862575081810a610800565b61386c838361379d565b80600019048211156138805761388061391c565b029392505050565b60008160001904831182151516156138a2576138a261391c565b500290565b6000828210156138b9576138b961391c565b500390565b60005b838110156138d95781810151838201526020016138c1565b83811115611c945750506000910152565b6000816138f9576138f961391c565b506000190190565b60006000198214156139155761391561391c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146115a857600080fdfea2646970667358221220e74b151a08544d7012b343aa1e0b7aa452b49f2d0d67cff85855b5f1b381047664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6047,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "threshold",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6051,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "isFinished",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6057,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "isVoted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6061,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2437,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2432_storage)"
      },
      {
        "astId": 9911,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeAmountM",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9917,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeRatioM",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9923,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "removeFeeAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9929,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeTo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 9931,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "feeToDev",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8294,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "supportToken",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 8298,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "txMinted",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 8302,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "txUnlocked",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 8306,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "txRollbacked",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 8309,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "twoWayFeePool",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ITwoWayFeePool)7081"
      },
      {
        "astId": 8315,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "pairs",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 8319,
        "contract": "contracts/twoway/TwoWay.sol:TwoWay",
        "label": "removalMinimum",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITwoWayFeePool)7081": {
        "encoding": "inplace",
        "label": "contract ITwoWayFeePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2432_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2432_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)2432_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2429,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2431,
            "contract": "contracts/twoway/TwoWay.sol:TwoWay",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}