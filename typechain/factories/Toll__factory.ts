/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Toll, TollInterface } from "../Toll";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeRatio",
        type: "uint256",
      },
    ],
    name: "FeeChange",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "FeeToAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "FeeToRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calculateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
    ],
    name: "feeToLength",
    outputs: [
      {
        internalType: "uint256",
        name: "len",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "getFeeTo",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061042a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630324ef9c14610046578063336cbaa7146100735780636d05b2121461009e575b600080fd5b610059610054366004610253565b6100bf565b604080519283526020830191909152015b60405180910390f35b610086610081366004610253565b610124565b6040516001600160a01b03909116815260200161006a565b6100b16100ac36600461022a565b610159565b60405190815260200161006a565b6001600160a01b0383166000818152602081815260408083208684528252808320549383526001825280832086845290915281205490918291610102858261018c565b61010c9083610285565b935061011884866103c7565b92505050935093915050565b6001600160a01b0383166000908152600260209081526040808320858452909152812061015190836101b4565b949350505050565b6001600160a01b03821660009081526002602090815260408083208484529091528120610185906101c0565b9392505050565b600061019a6012600a610300565b6101a484846101ca565b610185919061029d565b92915050565b600061018583836101d6565b60006101ae825490565b600061018582846103a8565b60008260000182815481106101fb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b80356001600160a01b038116811461022557600080fd5b919050565b6000806040838503121561023c578182fd5b6102458361020e565b946020939093013593505050565b600080600060608486031215610267578081fd5b6102708461020e565b95602085013595506040909401359392505050565b60008219821115610298576102986103de565b500190565b6000826102b857634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156102f85781600019048211156102de576102de6103de565b808516156102eb57918102915b93841c93908002906102c2565b509250929050565b60006101858383600082610316575060016101ae565b81610323575060006101ae565b816001811461033957600281146103435761035f565b60019150506101ae565b60ff841115610354576103546103de565b50506001821b6101ae565b5060208310610133831016604e8410600b8410161715610382575081810a6101ae565b61038c83836102bd565b80600019048211156103a0576103a06103de565b029392505050565b60008160001904831182151516156103c2576103c26103de565b500290565b6000828210156103d9576103d96103de565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b982b1b2fb49564a585551235b548f6d006aab3a61827e9ff5f4f6934d6727fe64736f6c63430008040033";

export class Toll__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Toll> {
    return super.deploy(overrides || {}) as Promise<Toll>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Toll {
    return super.attach(address) as Toll;
  }
  connect(signer: Signer): Toll__factory {
    return super.connect(signer) as Toll__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TollInterface {
    return new utils.Interface(_abi) as TollInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Toll {
    return new Contract(address, _abi, signerOrProvider) as Toll;
  }
}
