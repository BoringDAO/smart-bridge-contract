{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interface/IToken.sol\";\nimport \"./ProposalVote.sol\";\nimport \"./Toll.sol\";\n\ncontract Bridge is ProposalVote, Toll, AccessControl {\n    using SafeMath for uint256;\n\n    bytes32 public constant CROSSER_ROLE = \"CROSSER_ROLE\";\n\n    // token in ethereum\n    address public token0;\n\n    // token in bsc/avalanche\n    IToken public token1;\n    mapping(string => bool) public txMinted;\n\n    event CrossBurn(\n        address token0,\n        address token1,\n        address from,\n        address to,\n        uint256 amount\n    );\n    event CrossMint(\n        address token0,\n        address token1,\n        address from,\n        address to,\n        uint256 amount,\n        string txid\n    );\n\n    constructor(\n        address[] memory _crosser,\n        address _token0,\n        IToken _token1,\n        address[] memory _feeTo\n    ) ProposalVote(_crosser.length) Toll(_feeTo) {\n        for (uint256 i; i < _crosser.length; i++) {\n            _setupRole(CROSSER_ROLE, _crosser[i]);\n        }\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function crossMint(\n        address from,\n        address to,\n        uint256 amount,\n        string memory txid\n    ) public onlyCrosser whenNotMinted(txid){\n        bool result = _vote(address(token1), from, to, amount, txid);\n        if (result) {\n            // mint token\n            txMinted[txid] = true;\n            (uint256 feeAmount, uint256 remainAmount) = calculateFee(amount, 0);\n            token1.mint(to, remainAmount);\n            uint256 feeToLen = feeToLength();\n            for (uint256 i; i < feeToLen; i++) {\n                token1.mint(getFeeTo(i), feeAmount.div(feeToLen));\n            }\n            emit CrossMint(token0, address(token1), from, to, amount, txid);\n        }\n    }\n\n    function crossBurn(address to, uint256 amount) public {\n        require(\n            token1.balanceOf(msg.sender) >= amount,\n            \"msg.sender not enough token to burn\"\n        );\n\n        (uint256 feeAmount, uint256 remainAmount) = calculateFee(amount, 1);\n        uint256 feeToLen = feeToLength();\n        for (uint256 i; i < feeToLen; i++) {\n            token1.transferFrom(msg.sender, getFeeTo(i), feeAmount.div(feeToLen));\n        }\n        token1.burn(msg.sender, remainAmount);\n        emit CrossBurn(token0, address(token1), msg.sender, to, remainAmount);\n    }\n\n    function setThreshold(uint256 _threshold) external onlyAdmin {\n        _setThreshold(_threshold);\n    }\n\n    function addFeeTo(address account) external onlyAdmin {\n        _addFeeTo(account);\n    }\n\n    function removeFeeTo(address account) external onlyAdmin {\n        _removeFeeTo(account);\n    }\n\n    function setFee(\n        uint256 _lockFeeAmount,\n        uint256 _lockFeeRatio,\n        uint256 _unlockFeeAmount,\n        uint256 _unlockFeeRatio\n    ) external onlyAdmin {\n        _setFee(\n            _lockFeeAmount,\n            _lockFeeRatio,\n            _unlockFeeAmount,\n            _unlockFeeRatio\n        );\n    }\n\n    modifier onlyCrosser {\n        require(\n            hasRole(CROSSER_ROLE, msg.sender),\n            \"Bridge::caller is not crosser\"\n        );\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"Bridge::only admin can call\"\n        );\n        _;\n    }\n\n    modifier whenNotMinted(string memory _txid) {\n        require(txMinted[_txid] == false, \"tx minted\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interface/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IToken is IERC20{\n    function mint(address to, uint amount) external returns(bool);\n    function burn(address from, uint amount) external returns(bool);\n}"
    },
    "contracts/ProposalVote.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./Structs.sol\";\n\ncontract ProposalVote {\n    using SafeMath for uint256;\n\n    mapping(bytes32 => Proposal) public proposalOf;\n\n    uint256 public threshold;\n\n    event ProposalVoted(\n        address from,\n        address to,\n        uint256 amount,\n        address proposer,\n        uint256 count,\n        uint256 threshold\n    );\n\n    event ThresholdChanged(\n        uint256 oldThreshold,\n        uint256 newThreshold\n    );\n\n    constructor(uint256 _threshold) {\n        threshold = _threshold;\n    }\n\n    function _setThreshold(uint256 _threshold) internal virtual {\n        uint256 oldThreshold = threshold;\n        threshold = _threshold;\n        emit ThresholdChanged(oldThreshold, threshold);\n    }\n\n    function _vote(\n        address tokenTo,\n        address from,\n        address to,\n        uint256 amount,\n        string memory txid\n    ) internal virtual returns(bool result){\n        bytes32 mid = keccak256(abi.encodePacked(tokenTo, from, to, amount, txid));\n        Proposal storage p = proposalOf[mid];\n        if (proposalOf[mid].isExist == false) {\n            // create proposal\n            p.tokenTo = tokenTo;\n            p.from = from;\n            p.to = to;\n            p.amount = amount;\n            p.count = 1;\n            p.txid = txid;\n            p.isExist = true;\n            p.isVoted[msg.sender] = true;\n        } else {\n            require(p.isFinished == false, \"_vote::proposal finished\");\n            require(p.isVoted[msg.sender] == false, \"_vote::msg.sender voted\");\n            p.count = p.count.add(1);\n            p.isVoted[msg.sender] = true;\n        }\n        if (p.count >= threshold) {\n            p.isFinished = true;\n            result = true;\n        }\n        emit ProposalVoted(from, to, amount, msg.sender, p.count, threshold);\n    }\n}\n"
    },
    "contracts/Toll.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"./lib/SafeDecimalMath.sol\";\n\ncontract Toll {\n    using SafeMath for uint256;\n    using SafeDecimalMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // fee\n    // leave ethereum\n    uint256 public lockFeeRatio;\n    uint256 public lockFeeAmount;\n    // back ethereum\n    uint256 public unlockFeeRatio;\n    uint256 public unlockFeeAmount;\n\n    EnumerableSet.AddressSet internal feeToSet;\n\n    event FeeChange(\n        uint256 lockFeeAmount,\n        uint256 lockFeeRatio,\n        uint256 unlockFeeAmount,\n        uint256 unlockFeeRatio\n    );\n\n    event FeeToRemoved(\n        address account\n    );\n\n    event FeeToAdded (\n        address account\n    );\n\n    constructor(address[] memory _feeToSet) {\n        for (uint i; i < _feeToSet.length; i++) {\n            feeToSet.add(_feeToSet[i]);\n        }\n    }\n\n    function _setFee(\n        uint256 _lockFeeAmount,\n        uint256 _lockFeeRatio,\n        uint256 _unlockFeeAmount,\n        uint256 _unlockFeeRatio\n    ) internal virtual {\n        require(_lockFeeRatio <= 1e18, \"fee ratio not correct\");\n        require(_unlockFeeRatio <= 1e18, \"fee ratio not correct\");\n        lockFeeAmount = _lockFeeAmount;\n        lockFeeRatio = _lockFeeRatio;\n        unlockFeeAmount = _unlockFeeAmount;\n        unlockFeeRatio = _unlockFeeRatio;\n        emit FeeChange(_lockFeeAmount, _lockFeeRatio, _unlockFeeAmount, _unlockFeeRatio);\n    }\n\n    function _addFeeTo(address account) internal virtual {\n        require(feeToSet.contains(account) == false, \"Toll::account was feeTo already\");\n        feeToSet.add(account);\n        emit FeeToAdded(account);\n    }\n\n    function _removeFeeTo(address account) internal virtual {\n        require(feeToSet.contains(account) == true, \"Toll::account is not feeTo\");\n        feeToSet.remove(account);\n        emit FeeToRemoved(account);\n    }\n\n    function calculateFee(\n        uint256 amount,\n        uint256 crossType\n    ) public view virtual returns (uint256 feeAmount, uint256 remainAmount) {\n        uint256 _feeMinAmount;\n        uint256 _feeRatio;\n        if (crossType == 0) {\n            // leave ethereum\n            _feeMinAmount = lockFeeAmount;\n            _feeRatio = lockFeeRatio;\n        } else {\n            // back ethereum\n            _feeMinAmount = unlockFeeAmount;\n            _feeRatio = unlockFeeRatio;\n        }\n        feeAmount = _feeMinAmount.add(amount.multiplyDecimal(_feeRatio));\n        remainAmount = amount.sub(feeAmount);\n    }\n\n    function feeToLength() public view returns(uint256 len) {\n        len = feeToSet.length();\n    }\n\n    function getFeeTo(uint256 i) public view returns(address account) {\n        account = feeToSet.at(i);\n    }\n\n}\n\n\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nstruct Proposal {\n    address tokenTo;\n    address from;\n    address to;\n    uint256 amount;\n    uint256 count;\n    string txid;\n    bool isFinished;\n    bool isExist;\n    mapping(address => bool) isVoted;\n}\n"
    },
    "contracts/lib/SafeDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n// Libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n// https://docs.synthetix.io/contracts/SafeDecimalMath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}"
    },
    "contracts/CrossLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./lib/SafeDecimalMath.sol\";\nimport \"./ProposalVote.sol\";\n\ncontract CrossLock is ProposalVote, AccessControl {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using SafeDecimalMath for uint256;\n\n    // eg.ethToken => bscToken\n    mapping(address => address) public supportToken;\n    mapping(address => bytes32) public roleFlag;\n\n    mapping(string => bool) public txUnlocked;\n\n    event Lock(\n        address ethToken,\n        address bscToken,\n        address locker,\n        address to,\n        uint256 amount\n    );\n    event Unlock(\n        address ethToken,\n        address bscToken,\n        address from,\n        address to,\n        uint256 amount,\n        string txid\n    );\n\n    constructor(uint256 _threshold) ProposalVote(_threshold) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function addSupportToken(address ethTokenAddr, address bscTokenAddr, bytes32 _roleFlag)\n        public\n        onlyAdmin\n    {\n        require(\n            supportToken[ethTokenAddr] == address(0),\n            \"Toke already Supported\"\n        );\n        require(_roleFlag != bytes32(0), \"role falg should not bytes32(0)\");\n        require(roleFlag[ethTokenAddr] == bytes32(0), \"role flag already exist\");\n        supportToken[ethTokenAddr] = bscTokenAddr;\n        roleFlag[ethTokenAddr] = _roleFlag;\n    }\n\n    function removeSupportToken(address ethTokenAddr) public onlyAdmin {\n        require(supportToken[ethTokenAddr] != address(0), \"Toke not Supported\");\n        delete supportToken[ethTokenAddr];\n    }\n\n    function removeRoleFlag(address token) public onlyAdmin {\n        require(roleFlag[token] != bytes32(0), \"roleFlag not Supported\");\n        delete roleFlag[token];\n    }\n\n    function addSupportTokens(\n        address[] memory ethTokenAddrs,\n        address[] memory bscTokenAddrs,\n        bytes32[] memory _roleFlags\n    ) public {\n        require(\n            ethTokenAddrs.length == bscTokenAddrs.length,\n            \"Token length not match\"\n        );\n        require(\n            ethTokenAddrs.length == _roleFlags.length,\n            \"Token length not match\"\n        );\n        for (uint256 i; i < ethTokenAddrs.length; i++) {\n            addSupportToken(ethTokenAddrs[i], bscTokenAddrs[i], _roleFlags[i]);\n        }\n    }\n\n    function removeSupportTokens(address[] memory addrs) public {\n        for (uint256 i; i < addrs.length; i++) {\n            removeSupportToken(addrs[i]);\n            removeRoleFlag(addrs[i]);\n        }\n    }\n\n    function lock(\n        address token,\n        address to,\n        uint256 amount\n    ) public onlySupportToken(token) {\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit Lock(token, supportToken[token], msg.sender, to, amount);\n    }\n\n    function unlock(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        string memory txid\n    ) public onlySupportToken(token) onlyCrosser(token) whenNotUnlocked(txid) {\n        bool result = _vote(token, from, to, amount, txid);\n        if (result) {\n            txUnlocked[txid] = true;\n            IERC20(token).safeTransfer(to, amount);\n            emit Unlock(token, supportToken[token], from, to, amount, txid);\n        }\n    }\n\n    function setThreshold(uint _threshold) public onlyAdmin {\n        _setThreshold(_threshold);\n    }\n\n    modifier onlySupportToken(address token) {\n        require(supportToken[token] != address(0), \"Lock::Not Support Token\");\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"caller is not admin\");\n        _;\n    }\n\n    modifier onlyCrosser(address token) {\n        require(hasRole(roleFlag[token], msg.sender), \"caller is not crosser\");\n        _;\n    }\n\n    modifier whenNotUnlocked(string memory _txid) {\n        require(txUnlocked[_txid] == false, \"tx unlocked\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/pegbridge/PegProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../interface/IPegSwap.sol\";\nimport \"../interface/IPegSwapPair.sol\";\nimport \"../interface/IBoringToken.sol\";\nimport \"../ProposalVote.sol\";\n\ncontract PegProxy is ProposalVote, AccessControl {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using Math for uint256;\n\n    bytes32 public constant CROSSER_ROLE = \"CROSSER_ROLE\";\n\n    address public pegSwap;\n    mapping(address => address) public supportToken; // eg.ethToken => bscToke\n    mapping(string => bool) public txMinted;\n    mapping(string => bool) public txUnlocked;\n\n    //================= Event ==================//\n    event CrossBurn(address srcToken, address destToken, address from, address to, uint256 amount);\n    event Lock(address srcToken, address destToken, address from, address to, uint256 amount);\n    event Unlock(address srcToken, address destToken, address from, address to, uint256 amount, string txid);\n    event Rollback(address srcToken, address destToken, address from, address to, uint amount, string txid);\n\n    constructor(uint256 _threshold) ProposalVote(_threshold) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function crossOut(\n        address token,\n        address to,\n        uint256 amount\n    ) public onlySupportToken(token) {\n        require(amount > 0, \"PegProxy: amount must be greater than 0\");\n        require(to != address(0), \"PegProxy: to is empty\");\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        uint256 out = IPegSwap(pegSwap).getMaxToken1AmountOut(token);\n        uint256 burnAmount = amount.min(out);\n        if (burnAmount > 0) {\n            IPegSwap(pegSwap).swapToken0ForToken1(token, burnAmount, address(this));\n            burnBoringToken(token, to, burnAmount);\n        }\n\n        uint256 lockAmount = amount.sub(burnAmount);\n\n        if (lockAmount > 0) {\n            lock(token, to, lockAmount);\n        }\n    }\n\n    function crossIn(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        string memory txid\n    ) public onlyCrosser whenNotMinted(txid) {\n        bool result = _vote(token, from, to, amount, txid);\n        if (result) {\n            // mint token\n            txMinted[txid] = true;\n            address pair = IPegSwap(pegSwap).getPair(token);\n            address token1 = IPegSwapPair(pair).token1();\n            // TODO: (check failure and throw event)\n            IBoringToken(token1).mint(address(this), amount);\n            IPegSwap(pegSwap).swapToken1ForToken0(token, amount, to);\n        }\n    }\n\n    // 1. fee dynamicly\n    // 2. \n    function rollback() public  {\n\n    }\n\n    function lock(\n        address token,\n        address to,\n        uint256 amount\n    ) internal {\n        // IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit Lock(token, supportToken[token], msg.sender, to, amount);\n    }\n\n    function unlock(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        string memory txid\n    ) public onlySupportToken(token) onlyCrosser whenNotUnlocked(txid) {\n        bool result = _vote(token, from, to, amount, txid);\n        if (result) {\n            txUnlocked[txid] = true;\n            IERC20(token).safeTransfer(to, amount);\n            emit Unlock(token, supportToken[token], from, to, amount, txid);\n        }\n    }\n\n    function burnBoringToken(\n        address token,\n        address to,\n        uint256 amount\n    ) public onlySupportToken(token) {\n        address pair = IPegSwap(pegSwap).getPair(token);\n        address token1 = IPegSwapPair(pair).token1();\n\n        require(IERC20(token1).balanceOf(msg.sender) >= amount, \"PegProxy: msg.sender not enough token to burn\");\n\n        IBoringToken(token1).burn(msg.sender, amount);\n        emit CrossBurn(token, supportToken[token], msg.sender, to, amount);\n    }\n\n    //================ Setter ==================//\n    function setThreshold(uint256 _threshold) public onlyAdmin {\n        _setThreshold(_threshold);\n    }\n\n    function setPegSwap(address _pegSwap) public onlyAdmin {\n        pegSwap = _pegSwap;\n    }\n\n    function addSupportToken(address ethTokenAddr, address bscTokenAddr) public onlyAdmin {\n        require(supportToken[ethTokenAddr] == address(0), \"PegProxy: Toke already Supported\");\n        supportToken[ethTokenAddr] = bscTokenAddr;\n    }\n\n    function removeSupportToken(address ethTokenAddr) public onlyAdmin {\n        require(supportToken[ethTokenAddr] != address(0), \"PegProxy: toke not supported\");\n        delete supportToken[ethTokenAddr];\n    }\n\n    function addSupportTokens(address[] memory ethTokenAddrs, address[] memory bscTokenAddrs) public {\n        require(ethTokenAddrs.length == bscTokenAddrs.length, \"PegProxy: token length not match\");\n        for (uint256 i; i < ethTokenAddrs.length; i++) {\n            addSupportToken(ethTokenAddrs[i], bscTokenAddrs[i]);\n        }\n    }\n\n    function removeSupportTokens(address[] memory ethTokenAddrs) public {\n        for (uint256 i; i < ethTokenAddrs.length; i++) {\n            removeSupportToken(ethTokenAddrs[i]);\n        }\n    }\n\n    //================ Modifier =================//\n    modifier onlySupportToken(address token) {\n        require(supportToken[token] != address(0), \"PegProxy: not support this token\");\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"PegProxy: caller is not admin\");\n        _;\n    }\n\n    modifier onlyCrosser {\n        require(hasRole(CROSSER_ROLE, msg.sender), \"PegProxy: caller is not crosser\");\n        _;\n    }\n\n    modifier whenNotMinted(string memory _txid) {\n        require(txMinted[_txid] == false, \"PegProxy: tx minted\");\n        _;\n    }\n\n    modifier whenNotUnlocked(string memory _txid) {\n        require(txUnlocked[_txid] == false, \"PegProxy: tx unlocked\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interface/IPegSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\ninterface IPegSwap {\n    function swapToken0ForToken1(\n        address token0,\n        uint256 amountIn,\n        address to\n    ) external;\n\n    function swapToken1ForToken0(\n        address token0,\n        uint256 amountIn,\n        address to\n    ) external;\n\n    function getPair(address token) external view returns (address);\n\n    function getMaxToken1AmountOut(address token0) external view returns (uint256);\n}\n"
    },
    "contracts/interface/IPegSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\ninterface IPegSwapPair {\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function token0() external returns (address);\n\n    function token1() external returns (address);\n\n    function swap(address to, bool direction) external; // direction: token0 -> token1 or token1 -> token0\n\n    function getReserves() external view returns (uint256, uint256);\n}\n"
    },
    "contracts/interface/IBoringToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBoringToken is IERC20 {\n    function mint(address to, uint256 amount) external;\n\n    function burn(address from, uint256 amount) external;\n}\n"
    },
    "contracts/pegbridge/PegSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PegSwapPair is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n\n    address public token0; // origin erc20 token\n    address public token1; // bor-erc20 token\n\n    uint256 private reserve0;\n    uint256 private reserve1;\n\n    address public pegSwap;\n\n    event Mint(address indexed sender, uint256 amount);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amountIn, uint256 amountOut, address indexed to);\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n    function setPegSwap(address _pegSwap) external onlyOwner {\n        pegSwap = _pegSwap;\n    }\n\n    // called once by the owner at time of deployment\n    function initialize(address _token0, address _token1) external onlyOwner {\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function getReserves() public view returns (uint256, uint256) {\n        return (reserve0, reserve1);\n    }\n\n    function mint(address to) external returns (uint256 liquidity) {\n        (uint256 _reserve0, ) = getReserves();\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 amount0 = balance0.sub(_reserve0);\n\n        // x + y = k, obtaining liquidity is equal to amount\n        liquidity = amount0;\n        require(liquidity > 0, \"PegSwapPair: insufficient liquidity minted\");\n\n        _mint(to, liquidity);\n\n        // update reserves\n        reserve0 = balance0;\n\n        emit Mint(msg.sender, amount0);\n    }\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1) {\n        (uint256 _reserve0, uint256 _reserve1) = getReserves();\n        address _token0 = token0;\n        address _token1 = token1;\n\n        uint256 _totalSupply = totalSupply();\n        uint256 liquidity = balanceOf(address(this));\n\n        amount0 = liquidity.mul(_reserve0).div(_totalSupply);\n        amount1 = liquidity.mul(_reserve1).div(_totalSupply);\n\n        require(amount0 > 0, \"PegSwapPair: insufficient liquidity burned\");\n        if (_reserve1 > 0) require(amount1 > 0, \"PegSwapPair: insufficient liquidity burned\");\n\n        IERC20(_token0).transfer(to, amount0);\n        if (_reserve1 > 0) IERC20(_token1).transfer(to, amount1);\n\n        _burn(address(this), liquidity);\n\n        // current balance\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n\n        // update reserves\n        reserve0 = balance0;\n        reserve1 = balance1;\n\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    function swap(address to, bool direction) public onlyPegSwap {\n        // token0 -> token1\n        if (direction) {\n            _swapToken0ForToken1(to);\n        } else {\n            _swapToken1ForToken0(to);\n        }\n    }\n\n    function _swapToken0ForToken1(address to) internal {\n        (uint256 _reserve0, uint256 _reserve1) = getReserves();\n\n        address _token0 = token0;\n        address _token1 = token1;\n\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 amount0 = balance0.sub(_reserve0);\n\n        require(amount0 > 0, \"PegSwapPair: swap amount should be greater than 0\");\n        require(_reserve1 >= amount0, \"PegSwapPair: insuffient liquidity\");\n\n        IERC20(_token1).transfer(to, amount0);\n\n        // current balance\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n\n        reserve0 = balance0;\n        reserve1 = balance1;\n\n        emit Swap(msg.sender, amount0, amount0, to);\n    }\n\n    function _swapToken1ForToken0(address to) internal {\n        (uint256 _reserve0, uint256 _reserve1) = getReserves();\n\n        address _token0 = token0;\n        address _token1 = token1;\n\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n        uint256 amount1 = balance1.sub(_reserve1);\n        require(_reserve0 >= amount1, \"Insuffient liquidity\");\n        require(amount1 > 0, \"Swap amount should be greater than 0\");\n\n        IERC20(_token0).transfer(to, amount1);\n\n        // current balance\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n\n        reserve0 = balance0;\n        reserve1 = balance1;\n\n        emit Swap(msg.sender, amount1, amount1, to);\n    }\n\n    modifier onlyPegSwap {\n        require(msg.sender == pegSwap, \"PegSwapPair: only pegSwap can invoke it\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/test/TestIToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TestITokenETH is ERC20, Ownable{\n    address public minter;\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        _mint(msg.sender, 1000 * 10**18);\n    }\n\n    function mint(address to, uint amount) external returns(bool) {\n        _mint(to, amount);\n        return true;\n    }\n    \n    function burn(address to, uint amount) external returns(bool) {\n        _burn(to, amount);\n        return true;\n    }\n\n    modifier onlyMinter {\n        require(msg.sender == minter, \"only minter\");\n        _;\n    }\n}\n\ncontract TestITokenBSC is ERC20, Ownable{\n    address public minter;\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _minter\n    ) ERC20(_name, _symbol) {\n        _mint(msg.sender, 1000 * 10**18);\n        minter = _minter;\n    }\n\n    function mint(address to, uint amount) external onlyMinter returns(bool) {\n        _mint(to, amount);\n        return true;\n    }\n    \n    function burn(address to, uint amount) external onlyMinter returns(bool) {\n        _burn(to, amount);\n        return true;\n    }\n\n    function setMinter(address _minter) external onlyOwner {\n        minter = _minter;\n    }\n\n    modifier onlyMinter {\n        require(msg.sender == minter, \"only minter\");\n        _;\n    }\n\n}\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interface/IToken.sol\";\n\ncontract Token is ERC20, IToken, AccessControl {\n\n    bytes32 public MINTER_ROLE = \"MINTER_ROLE\";\n    bytes32 public BURNER_ROLE = \"BURNER_ROLE\";\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimal, address admin) ERC20(_name, _symbol) {\n        _setupDecimals(_decimal);\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    function mint(address to, uint amount) public override onlyMinter returns(bool) {\n        _mint(to, amount);\n        return true;\n    }\n\n    function burn(address to, uint amount) public override onlyBurner returns(bool) {\n        _burn(to, amount);  \n        return true;\n    }\n\n    modifier onlyMinter {\n        require(hasRole(MINTER_ROLE, msg.sender), \"caller is not minter\");\n        _;\n    }\n\n    modifier onlyBurner {\n        require(hasRole(BURNER_ROLE, msg.sender), \"caller is not burner\");\n        _;\n    }\n\n}"
    },
    "contracts/pegbridge/BoringToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract BoringToken is ERC20, AccessControl {\n    bytes32 public constant MINTER_ROLE = \"MINTER_ROLE\";\n    bytes32 public constant BURNER_ROLE = \"BURNER_ROLE\";\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function mint(address to, uint256 amount) public onlyMinter {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) public onlyBurner {\n        _burn(from, amount);\n    }\n\n    modifier onlyAdmin {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"BoringToken: msg.sender is not admin\");\n        _;\n    }\n\n    modifier onlyMinter {\n        require(hasRole(MINTER_ROLE, msg.sender), \"BoringToken: msg.sender is not minter\");\n        _;\n    }\n\n    modifier onlyBurner {\n        require(hasRole(BURNER_ROLE, msg.sender), \"BoringToken: msg.sender is not burner\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/CrossToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract CrossToken is ERC20, AccessControl {\n    bytes32 public constant CROSSER_ROLE = \"CROSSER_ROLE\";\n\n    address public xToken;\n    mapping(string => bool) public txMinted;\n\n    // xToken yToken eg. ethToken bscToken\n    event CrossBurn(\n        address xToken,\n        address yToken,\n        address from,\n        address to,\n        uint256 amount\n    );\n    event CrossMint(\n        address xToken,\n        address yToken,\n        address from,\n        address to,\n        uint256 amount,\n        string txid\n    );\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _crosser,\n        address _xToken\n    ) ERC20(_name, _symbol) {\n        xToken = _xToken;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(CROSSER_ROLE, _crosser);\n    }\n\n    function crossMint(\n        address addrFromETH,\n        address recepient,\n        uint256 amount,\n        string memory _txid\n    ) public onlyCrosser whenNotMinted(_txid) {\n        txMinted[_txid] = true;\n        _mint(recepient, amount);\n        emit CrossMint(xToken, address(this), addrFromETH, recepient, amount, _txid);\n    }\n\n    function crossBurn(address recipient, uint256 amount) public {\n        _burn(msg.sender, amount);\n        emit CrossBurn(xToken, address(this), msg.sender, recipient, amount);\n    }\n\n    modifier onlyCrosser {\n        require(\n            hasRole(CROSSER_ROLE, msg.sender),\n            \"CrossToken::caller is not crosser\"\n        );\n        _;\n    }\n\n    modifier whenNotMinted(string memory _txid) {\n        require(txMinted[_txid] == false, \"tx minted\");\n        _;\n    }\n}"
    },
    "contracts/pegbridge/PegSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interface/IPegSwapPair.sol\";\n\ncontract PegSwap is Ownable {\n    using SafeMath for uint256;\n\n    address public pegProxy;\n\n    // origin token address => pair address\n    // example: dai => pair(token0=dai, token1=borDAI)\n    mapping(address => address) public pairs;\n\n    function setPegProxy(address _pegProxy) public {\n        pegProxy = _pegProxy;\n    }\n\n    function getPair(address token) public view onlySupportToken(token) returns (address) {\n        return pairs[token];\n    }\n\n    function addPair(address token, address pair) public onlyOwner {\n        require(pairs[token] == address(0), \"PegSwap: token already supported\");\n        pairs[token] = pair;\n    }\n\n    function removePair(address token) public onlyOwner {\n        require(pairs[token] != address(0), \"PegSwap: token not supported\");\n        delete pairs[token];\n    }\n\n    function addLiquidity(\n        address token0,\n        uint256 amount,\n        address to\n    ) public onlySupportToken(token0) returns (uint256 liquidity) {\n        address pair = getPair(token0);\n        IERC20(token0).transferFrom(msg.sender, pair, amount);\n        liquidity = IPegSwapPair(pair).mint(to);\n    }\n\n    function removeLiquidity(\n        address token0,\n        uint256 liquidity,\n        address to\n    ) public onlySupportToken(token0) returns (uint256 amount0, uint256 amount1) {\n        address pair = getPair(token0);\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity);\n        (amount0, amount1) = IPegSwapPair(pair).burn(to);\n    }\n\n    // token0 -> token1\n    function swapToken0ForToken1(\n        address token0,\n        uint256 amountIn,\n        address to\n    ) public onlySupportToken(token0) onlyPegProxy {\n        require(amountIn > 0, \"PegSwap: input must be greater than 0\");\n        address pair = getPair(token0);\n\n        // transfer erc20 token to pair address\n        IERC20(token0).transferFrom(msg.sender, pair, amountIn);\n        IPegSwapPair(pair).swap(to, true);\n    }\n\n    // token1 -> token0\n    function swapToken1ForToken0(\n        address token0,\n        uint256 amountIn,\n        address to\n    ) public onlySupportToken(token0) onlyPegProxy {\n        require(amountIn > 0, \"PegSwap: input must be greater than 0\");\n        address pair = getPair(token0);\n        address token1 = IPegSwapPair(pair).token1();\n\n        // transfer bor-erc20 token to pair address\n        IERC20(token1).transferFrom(msg.sender, pair, amountIn);\n        IPegSwapPair(pair).swap(to, false);\n    }\n\n    function getMaxToken1AmountOut(address token0) public view returns (uint256) {\n        address pair = getPair(token0);\n        (, uint256 _reserve1) = IPegSwapPair(pair).getReserves();\n\n        return _reserve1;\n    }\n\n    modifier onlySupportToken(address token) {\n        require(pairs[token] != address(0), \"PegSwap: not support this token\");\n        _;\n    }\n\n    modifier onlyPegProxy {\n        require(msg.sender == pegProxy, \"PegSwap: caller is not pegProxy\");\n        _;\n    }\n}\n"
    },
    "contracts/pegbridge/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        _mint(msg.sender, 1000 * 10**18);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}