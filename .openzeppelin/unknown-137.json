{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x71ab7Be843a042bC325623CC4b7313D9ebceb5B2",
      "txHash": "0x9409123f893b395d251cb848d7d13c81ccb0e4f1729de9f98d9009775a8f8461",
      "kind": "uups"
    },
    {
      "address": "0x64E4E7840bC20959c8BA984Db82fA0132D9b04dD",
      "txHash": "0x423f3335a9cb6f95ca65be4118523e89431d6d7924f89c437b57fe55295ed69c",
      "kind": "uups"
    },
    {
      "address": "0x6dc551088AFAf828b95a9c9Ad590AeFE797c8e87",
      "txHash": "0xa4e4161c5cfd7af66702ca5674863086c0287b6690cbc7a7766db1de6c0aaf13",
      "kind": "uups"
    },
    {
      "address": "0x413cfE1C41F98879365D665CACB7E79a60001fEE",
      "txHash": "0x5dd4f2a1c7f82a7e776fa5577fedb727ac6e18cda4fb691d9a84aa80aed1ae31",
      "kind": "uups"
    },
    {
      "address": "0xA43ab63Ed31B10fd3c5DF0Fd8A3FeAe7246eFCDf",
      "txHash": "0x35c84762a6c019b3da6f432c32c35fd17036c02a00dd1ed4d2b46c9edaac43a2",
      "kind": "uups"
    },
    {
      "address": "0x231D60Cc4693ce6B3EE6b992e81b416D8C38EaE9",
      "txHash": "0x21374e93dd75d3dd6fdb29aae19fef174c635ec019e67975488593b41b11de5c",
      "kind": "uups"
    },
    {
      "address": "0xAE15F4bBc3B600118Eda3dD127eD2D38Fb00C010",
      "txHash": "0xb37a70325d3bf30ff71b285dabaed511020498615d73814e75866b24fce2bf98",
      "kind": "uups"
    },
    {
      "address": "0xB225cC2207FECC82806042cEB386eF2b23E2464c",
      "txHash": "0x30c0e2cdcbcfd54c92cffd03f2283bdf943608d9bc7046a073699bee2e0cb6f9",
      "kind": "uups"
    },
    {
      "address": "0x421A538234aF050c77eF735b23A1Db03243B0e4b",
      "txHash": "0x93897de55d64b03b58c3e763910189e9c580c066498b6b3c5174cfdf7097230b",
      "kind": "uups"
    },
    {
      "address": "0x8DE93f998b6b0ddA780Ee12B97dde1F2fADd3B1d",
      "txHash": "0xce51ad70f11bcbaf4dbe42b2e5e8497d77959356d8ac94003138d546625650a2",
      "kind": "uups"
    },
    {
      "address": "0xBb5eA9b628f8A93c653c0eaC986238407930059d",
      "txHash": "0xd479f186f6de0c3c6045f695f438cdcaed7de4d509666525078b2f6051fe3c67",
      "kind": "uups"
    },
    {
      "address": "0x0D9ceFE09299C8c3Cbe1F2706fbcEdBc35d73052",
      "txHash": "0x3ab30f6f7c73ef5d9652f5d5fd0bb37cabb5188442f389a30001e4f486389dcc",
      "kind": "uups"
    },
    {
      "address": "0x70dfE627c3b04FDF8E8C9572FcEC9E098FeD552d",
      "txHash": "0x38db2eed2ed01ae7d6b82119394c6636c2632ee5d18d132c3a416b18cba4a86e",
      "kind": "uups"
    },
    {
      "address": "0x79904eC9De1FCCF7ca50fE3f8430e922d53e07e6",
      "txHash": "0x806eccf559ba9329649c2fdb9249c43eafdf19f63936f8308862ef7337817e62",
      "kind": "uups"
    },
    {
      "address": "0x091C23C213945b1F96e4BA660bdee1FD61663d11",
      "txHash": "0xc413ccfcf9446ae310180fcdf86fcd1bf0a995a64f1bc8e3862081e61e7c0a11",
      "kind": "uups"
    },
    {
      "address": "0x4D98192A8A078D0937c8FCa144C07e741364BdcA",
      "txHash": "0x06082915f3aa5322613f21b58da8c7a853b00b48b1dccf1efe51ed177588c607",
      "kind": "uups"
    },
    {
      "address": "0x6B906d17301447117C83F12DEc183331Ac3BCaa5",
      "txHash": "0x5995573cc883f6f196de870cc49e7dc1535edfd3406845ca0a4ed218dff5a54c",
      "kind": "uups"
    },
    {
      "address": "0x6Ed5c7Df9ba01629FBcb759eFdAC4302df8B9492",
      "txHash": "0xfc8c55d06cafa1eb846a43c41a904c667b619567147fa12348806b9a8ccf1652",
      "kind": "uups"
    },
    {
      "address": "0xC20826eF97B16C133674e8075Da3ACb389Ade4A1",
      "txHash": "0x4071e17396489ce96475636a758a27bd5be37aa626a7d6985352d78d5ea1ed54",
      "kind": "uups"
    },
    {
      "address": "0x746158B125447C909291cf3B271C929D156cBAd2",
      "txHash": "0xb55c9942485a3c57d2510aee4e4328adc2fade4b2b6ad094ccde25bcac55e59e",
      "kind": "uups"
    },
    {
      "address": "0xc5e8228b910722C6B7aE77221dd96DC134B9C861",
      "txHash": "0xbd3746029cbbdcd04b6c69f2a680f481f4f6f5d4990556d69c25a184a4d31b88",
      "kind": "uups"
    },
    {
      "address": "0xC947Abe6413eb91B23e5464900Ac965bE7cdE77b",
      "txHash": "0x7568a2ff6575df83f8e51df6af5c5d5708f974ac308feb30e86375ea23bb4e4b",
      "kind": "uups"
    },
    {
      "address": "0xA1e4aA6C12AA2b7121215d25D6Af08075eb87918",
      "txHash": "0x0a519e9c6eb8b2ae11495a176474d2979953652389cc27c45a02695fea2ffe0f",
      "kind": "uups"
    },
    {
      "address": "0x0caD6ef3383C4349c68f072076BCDE7B7623576B",
      "txHash": "0xc2960c0cc828d5ddba65ec9494d77fdcf907849b8c00e646979c1ae32b88ed5d",
      "kind": "uups"
    },
    {
      "address": "0x775E38077FDbdAfCB777215ccfB41cf8FC949019",
      "txHash": "0x782c3c6b6e41156aec2b49ed24d86f043edf654dd38317b0bf165da04968e896",
      "kind": "uups"
    }
  ],
  "impls": {
    "0231d3b99fbe9d076496d701354d5ad4f1be2e4e7d63dc7f0c2d924d8bb4ee27": {
      "address": "0x36AD517D8e79E1975ca5Aa56BBd938ee6af55A79",
      "txHash": "0x031b99ffc5541193aa88b1bb9c50a1d75f6d9f11889277141743bb9a02679a46",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8615_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8615_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8615_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e6d27c69768338c3526b7367972ce4d27e2f52d61dfcb606e769448b66bba374": {
      "address": "0xb3444429076DD1edFa7717bFbC534f963a7ff7a6",
      "txHash": "0xa25aae418bcc884f51898ba5ceef5d0837d559d2f9eee93cf5eb7fe519632698",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8700_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8700_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8700_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8700_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f608a90b4141f4580189793971ad08bfd3615120ec63d02c397e6fe6f93aa388": {
      "address": "0x9C9a5b3d7023AA2Ef2F35E457426B0B72e909B16",
      "txHash": "0x443a9a68d251a5f4967e4d902a49cbb03075d4187887b2b87439b974028e45b5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:24"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8246",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:30"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:32"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:34"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:37"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:39"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:41"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:46"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "700f05188f621f1c3e0e65f788b9362e9ee1f301c2b5c648a92c961bc45e0f10": {
      "address": "0x6944C07B091A6d202F08a3e59822FA2718BA3D26",
      "txHash": "0x287bed41758fc835cb6777f09c11c04848047c7fd5ebdffcf39afc3aa5caf567",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "787ebb03be77202bfdc3e12e8087c55426ec4f560b2764ec034fb83442aec89b": {
      "address": "0x8Fe430Be5F4401943B9b0e8a0a11EE045530DC0f",
      "txHash": "0x6d4953c0cfc4c045a3e1948f3b4b3eb30da3700eb191d11d1dca93b3eaad96d6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayChef",
            "label": "rewardToken",
            "type": "t_contract(IERC20Upgradeable)1809",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:31"
          },
          {
            "contract": "TwoWayChef",
            "label": "dispatcher",
            "type": "t_address",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:32"
          },
          {
            "contract": "TwoWayChef",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:33"
          },
          {
            "contract": "TwoWayChef",
            "label": "rewardPerSecond",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:34"
          },
          {
            "contract": "TwoWayChef",
            "label": "startTS",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:35"
          },
          {
            "contract": "TwoWayChef",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)15675_storage)dyn_storage",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:37"
          },
          {
            "contract": "TwoWayChef",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15665_storage))",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:38"
          },
          {
            "contract": "TwoWayChef",
            "label": "stakingRewards",
            "type": "t_mapping(t_uint256,t_contract(IStakingReward)8246)",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:40"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1809": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(PoolInfo)15675_storage)dyn_storage": {
            "label": "struct TwoWayChef.PoolInfo[]"
          },
          "t_struct(PoolInfo)15675_storage": {
            "label": "struct TwoWayChef.PoolInfo",
            "members": [
              {
                "label": "depositToken",
                "type": "t_contract(IERC20Upgradeable)1809"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardTS",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15665_storage))": {
            "label": "mapping(uint256 => mapping(address => struct TwoWayChef.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)15665_storage)": {
            "label": "mapping(address => struct TwoWayChef.UserInfo)"
          },
          "t_struct(UserInfo)15665_storage": {
            "label": "struct TwoWayChef.UserInfo",
            "members": [
              {
                "label": "depositAmount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_contract(IStakingReward)8246)": {
            "label": "mapping(uint256 => contract IStakingReward)"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "591c6ff0f055db0b40c8f756dbfb7299248079d72eba5e7fe10f39f1e31abcd7": {
      "address": "0x6D8F5573dBAac09F44e8672c11DA10fff5eF0fFe",
      "txHash": "0x8c15dcb4efb6fe4a4731894422e82513c49f1cdc7dff30a9acdd5815a4a637b0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "StakingReward",
            "label": "chef",
            "type": "t_address",
            "src": "contracts/twowayV2/pool/StakingReward.sol:32"
          },
          {
            "contract": "StakingReward",
            "label": "rewardsToken",
            "type": "t_contract(IERC20Upgradeable)1809",
            "src": "contracts/twowayV2/pool/StakingReward.sol:33"
          },
          {
            "contract": "StakingReward",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:34"
          },
          {
            "contract": "StakingReward",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:35"
          },
          {
            "contract": "StakingReward",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:36"
          },
          {
            "contract": "StakingReward",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:37"
          },
          {
            "contract": "StakingReward",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:38"
          },
          {
            "contract": "StakingReward",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/pool/StakingReward.sol:40"
          },
          {
            "contract": "StakingReward",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/pool/StakingReward.sol:41"
          },
          {
            "contract": "StakingReward",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:42"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)1809": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "07ce33efa684632a4971a07f5eaafbd485385d248ab55c1aa5f3a43f0e9ecf9e": {
      "address": "0x180cc929c2157B9b35186622b923062033E9b0a3",
      "txHash": "0xfeab734e5c7e8d1562ed0742dbc6dd9f3e6082ef5fa40e601a89e6356546342e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:24"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8246",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:30"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:32"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:34"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:37"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:39"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:41"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:46"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "e87fb3ceee4e5185b81ed7f0d254323c88e0c8d5422b99ed729600e4085fd834": {
      "address": "0x6D0649a20F517248001B20d0Ff0e3A8b661aa772",
      "txHash": "0xbe3f3224577e4b58b4fc92213351efc4573208aee60c1b6b513f94aee2ca2570",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:24"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8246",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:30"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:32"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:34"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:37"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:39"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:41"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:46"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "5fe32e21963b4a7e15373c68d8846be385426ea6fb7b97fe2e704e7ade89902a": {
      "address": "0x6eC7a6A14509dA191c6FA1491Ef6137bdD8601ce",
      "txHash": "0xb7174824d9988298915eab91b84bd53926f7c65f1e5a2a8893e6ed0ea08ec4da",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayChef",
            "label": "rewardToken",
            "type": "t_contract(IERC20Upgradeable)1809",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:31"
          },
          {
            "contract": "TwoWayChef",
            "label": "dispatcher",
            "type": "t_address",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:32"
          },
          {
            "contract": "TwoWayChef",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:33"
          },
          {
            "contract": "TwoWayChef",
            "label": "rewardPerSecond",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:34"
          },
          {
            "contract": "TwoWayChef",
            "label": "startTS",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:35"
          },
          {
            "contract": "TwoWayChef",
            "label": "poolInfo",
            "type": "t_array(t_struct(PoolInfo)15684_storage)dyn_storage",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:37"
          },
          {
            "contract": "TwoWayChef",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15674_storage))",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:38"
          },
          {
            "contract": "TwoWayChef",
            "label": "stakingRewards",
            "type": "t_mapping(t_uint256,t_contract(IStakingReward)8246)",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:40"
          },
          {
            "contract": "TwoWayChef",
            "label": "totalDeposit",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/twowayV2/pool/TwoWayChef.sol:41"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1809": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(PoolInfo)15684_storage)dyn_storage": {
            "label": "struct TwoWayChef.PoolInfo[]"
          },
          "t_struct(PoolInfo)15684_storage": {
            "label": "struct TwoWayChef.PoolInfo",
            "members": [
              {
                "label": "depositToken",
                "type": "t_contract(IERC20Upgradeable)1809"
              },
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardTS",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15674_storage))": {
            "label": "mapping(uint256 => mapping(address => struct TwoWayChef.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)15674_storage)": {
            "label": "mapping(address => struct TwoWayChef.UserInfo)"
          },
          "t_struct(UserInfo)15674_storage": {
            "label": "struct TwoWayChef.UserInfo",
            "members": [
              {
                "label": "depositAmount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_contract(IStakingReward)8246)": {
            "label": "mapping(uint256 => contract IStakingReward)"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "fe2e3d335a1d8791c6f53ca61c6999dfb5132cf321205bac4b2f27ed54a5fd43": {
      "address": "0xAfe527d9491931FF63e1E1032aD9ADF03aa1de3D",
      "txHash": "0x35238b825aacdf1ca9e568799a01316af9e371c3fbe2639ca727887922d97d95",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "StakingReward",
            "label": "chef",
            "type": "t_address",
            "src": "contracts/twowayV2/pool/StakingReward.sol:32"
          },
          {
            "contract": "StakingReward",
            "label": "rewardsToken",
            "type": "t_contract(IERC20Upgradeable)1809",
            "src": "contracts/twowayV2/pool/StakingReward.sol:33"
          },
          {
            "contract": "StakingReward",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:34"
          },
          {
            "contract": "StakingReward",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:35"
          },
          {
            "contract": "StakingReward",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:36"
          },
          {
            "contract": "StakingReward",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:37"
          },
          {
            "contract": "StakingReward",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:38"
          },
          {
            "contract": "StakingReward",
            "label": "pid",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:39"
          },
          {
            "contract": "StakingReward",
            "label": "supply",
            "type": "t_uint256",
            "src": "contracts/twowayV2/pool/StakingReward.sol:40"
          },
          {
            "contract": "StakingReward",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/pool/StakingReward.sol:42"
          },
          {
            "contract": "StakingReward",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/pool/StakingReward.sol:43"
          },
          {
            "contract": "StakingReward",
            "label": "balanceOf_",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/pool/StakingReward.sol:44"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)1809": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ed2433538ffc0d9b8f3a2918852ac2a667db0c5f94a051cb30b05ff97d8da8ad": {
      "address": "0x5aBCf7fF0DD5f67A3A76Aa0352C01cFee0c63ceC",
      "txHash": "0x33875c7a20e812de24324bb0f99dd4981263f46ad716d1461d9d0c2baa1dfacf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:24"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8246",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:30"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:32"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:34"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:37"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:39"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:41"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:46"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "9300328bf1b4b0b80e8c538b1089a2a3349d2fb9f281fa12f17165da70c5e264": {
      "address": "0x2FD719dFED6840fc3a675f3a561a661Aa15058E7",
      "txHash": "0xfe349f9841dd88f78bbc9909c6fe184d2b350019e23e859394d8d9d2e79c2ec5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:24"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8246",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:30"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:32"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:34"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:37"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:39"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:41"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:46"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          },
          {
            "contract": "TwoWayCenter",
            "label": "srs",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:49"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "9fb0a01c7caab57ba546956ab3236f11b5d8caad506971ffeda87d3426e855e5": {
      "address": "0x2ce068E7c1d2def4b4Df555E16347210167A823b",
      "txHash": "0x66a6e7feeb863c1c8dbbf7707da43eb8b71d0948e1940cf702c4cdb2fcbfa650",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:19"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8700_storage))",
            "src": "contracts/native/NBridge.sol:28"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          },
          {
            "contract": "NBridge",
            "label": "isInWhitelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NBridge.sol:34"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8700_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8700_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8700_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "16209134aab64a31ff65ce131ea539fcea0453a5ee7ac3560665adf8f571a9eb": {
      "address": "0x9E7611D96943ff5F04e4f1D5F4435D967D4FcFF9",
      "txHash": "0x6c51cbb675441a5f1cf86686852c773915576374fd399242ca809ed6e8c18839",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:24"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8286",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:30"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:32"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:34"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:37"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:39"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:41"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:46"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          },
          {
            "contract": "TwoWayCenter",
            "label": "srs",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:49"
          },
          {
            "contract": "TwoWayCenter",
            "label": "rewardRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:51"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeToTreasuryRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:53"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8286": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "f5f855e3aa9a031649d708e27b00e2eee84472bbd049ae70dc399a82fea43ecd": {
      "address": "0xD76833c75d29f8D3D1bca5303dF8ee392d6a5291",
      "txHash": "0x1087afcdf290a1b5ca8b5d037bd1b9d42e414a92b1c08d8bb67d5744c499d139",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "NProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:11"
          },
          {
            "contract": "NProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/native/NProposalVote.sol:13"
          },
          {
            "contract": "NProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NProposalVote.sol:14"
          },
          {
            "contract": "NProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/native/NProposalVote.sol:15"
          },
          {
            "contract": "NToll",
            "label": "feeRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/native/NToll.sol:12"
          },
          {
            "contract": "NToll",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/native/NToll.sol:14"
          },
          {
            "contract": "NBridge",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:20"
          },
          {
            "contract": "NBridge",
            "label": "supportedTokens",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8701_storage))",
            "src": "contracts/native/NBridge.sol:29"
          },
          {
            "contract": "NBridge",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/native/NBridge.sol:30"
          },
          {
            "contract": "NBridge",
            "label": "minCrossAmount",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:31"
          },
          {
            "contract": "NBridge",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:32"
          },
          {
            "contract": "NBridge",
            "label": "ratioFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:33"
          },
          {
            "contract": "NBridge",
            "label": "isInWhitelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/native/NBridge.sol:35"
          },
          {
            "contract": "NBridge",
            "label": "isCoin",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/native/NBridge.sol:38"
          },
          {
            "contract": "NBridge",
            "label": "locked",
            "type": "t_bool",
            "src": "contracts/native/NBridge.sol:39"
          },
          {
            "contract": "NBridge",
            "label": "eventIndex0",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/native/NBridge.sol:42"
          },
          {
            "contract": "NBridge",
            "label": "eventHeights0",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/native/NBridge.sol:43"
          },
          {
            "contract": "NBridge",
            "label": "eventIndex1",
            "type": "t_uint256",
            "src": "contracts/native/NBridge.sol:46"
          },
          {
            "contract": "NBridge",
            "label": "eventHeights1",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/native/NBridge.sol:47"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenInfo)8701_storage))": {
            "label": "mapping(uint256 => mapping(address => struct NBridge.TokenInfo))"
          },
          "t_mapping(t_address,t_struct(TokenInfo)8701_storage)": {
            "label": "mapping(address => struct NBridge.TokenInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(TokenInfo)8701_storage": {
            "label": "struct NBridge.TokenInfo",
            "members": [
              {
                "label": "tokenType",
                "type": "t_uint256"
              },
              {
                "label": "mirrorAddress",
                "type": "t_address"
              },
              {
                "label": "mirrorChainId",
                "type": "t_uint256"
              },
              {
                "label": "isSupported",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "76a1a15eff59af7d8acb5dbaf00782ff433e98b2bf206d01340afcc6be85b05b": {
      "address": "0xD761ff6421A2AAE45163b4a25daA5906aA9ADe33",
      "txHash": "0x9a1e825f779ff28ea8b43e12742d7eac3d3bf60b35aa3fc0132cf039bd1a1683",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "threshold",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:10"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isFinished",
            "type": "t_mapping(t_bytes32,t_bool)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:12"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "isVoted",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:13"
          },
          {
            "contract": "TwoWayProposalVote",
            "label": "counter",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/twowayV2/TwoWayProposalVote.sol:14"
          },
          {
            "contract": "TwoWayCenter",
            "label": "chainId",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:25"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:26"
          },
          {
            "contract": "TwoWayCenter",
            "label": "treasuryTo",
            "type": "t_address",
            "src": "contracts/twowayV2/TwoWayCenter.sol:27"
          },
          {
            "contract": "TwoWayCenter",
            "label": "sr",
            "type": "t_contract(IStakingReward)8246",
            "src": "contracts/twowayV2/TwoWayCenter.sol:28"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toCenterToken",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:31"
          },
          {
            "contract": "TwoWayCenter",
            "label": "toEdgeToken",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:33"
          },
          {
            "contract": "TwoWayCenter",
            "label": "decimalDiff",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:35"
          },
          {
            "contract": "TwoWayCenter",
            "label": "txHandled",
            "type": "t_mapping(t_string_memory_ptr,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:36"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isInWhilelist",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:38"
          },
          {
            "contract": "TwoWayCenter",
            "label": "fixFees",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:40"
          },
          {
            "contract": "TwoWayCenter",
            "label": "lockBalances",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:42"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesHigh",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:43"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesMedium",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:44"
          },
          {
            "contract": "TwoWayCenter",
            "label": "ratioFeesLow",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:45"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainHigh",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:47"
          },
          {
            "contract": "TwoWayCenter",
            "label": "remainLow",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:48"
          },
          {
            "contract": "TwoWayCenter",
            "label": "srs",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:50"
          },
          {
            "contract": "TwoWayCenter",
            "label": "rewardRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:52"
          },
          {
            "contract": "TwoWayCenter",
            "label": "feeToTreasuryRatio",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:54"
          },
          {
            "contract": "TwoWayCenter",
            "label": "isCoin",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:56"
          },
          {
            "contract": "TwoWayCenter",
            "label": "locked",
            "type": "t_bool",
            "src": "contracts/twowayV2/TwoWayCenter.sol:57"
          },
          {
            "contract": "TwoWayCenter",
            "label": "eventIndex0",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:60"
          },
          {
            "contract": "TwoWayCenter",
            "label": "eventHeights0",
            "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/twowayV2/TwoWayCenter.sol:61"
          },
          {
            "contract": "TwoWayCenter",
            "label": "eventIndex1",
            "type": "t_uint256",
            "src": "contracts/twowayV2/TwoWayCenter.sol:64"
          },
          {
            "contract": "TwoWayCenter",
            "label": "eventHeights1",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/twowayV2/TwoWayCenter.sol:65"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IStakingReward)8246": {
            "label": "contract IStakingReward"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_string_memory_ptr,t_bool)": {
            "label": "mapping(string => bool)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(uint256 => mapping(uint256 => uint256))"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)43_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    }
  }
}
