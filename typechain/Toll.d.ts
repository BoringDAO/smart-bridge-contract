/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TollInterface extends ethers.utils.Interface {
  functions: {
    "calculateFee(address,uint256,uint256)": FunctionFragment;
    "feeToLength(address,uint256)": FunctionFragment;
    "getFeeTo(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeToLength",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTo",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeTo", data: BytesLike): Result;

  events: {
    "FeeChange(address,uint256,uint256,uint256)": EventFragment;
    "FeeToAdded(address,uint256,address)": EventFragment;
    "FeeToRemoved(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToRemoved"): EventFragment;
}

export class Toll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TollInterface;

  functions: {
    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
    >;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len: BigNumber }>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { account: string }>;
  };

  calculateFee(
    token: string,
    chainID: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
  >;

  feeToLength(
    token: string,
    chainID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeTo(
    token: string,
    chainID: BigNumberish,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount: BigNumber; remainAmount: BigNumber }
    >;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    FeeChange(
      token?: null,
      chainID?: null,
      feeAmount?: null,
      feeRatio?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        chainID: BigNumber;
        feeAmount: BigNumber;
        feeRatio: BigNumber;
      }
    >;

    FeeToAdded(
      token?: null,
      chainID?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; chainID: BigNumber; account: string }
    >;

    FeeToRemoved(
      token?: null,
      chainID?: null,
      account?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; chainID: BigNumber; account: string }
    >;
  };

  estimateGas: {
    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFee(
      token: string,
      chainID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeToLength(
      token: string,
      chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTo(
      token: string,
      chainID: BigNumberish,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
